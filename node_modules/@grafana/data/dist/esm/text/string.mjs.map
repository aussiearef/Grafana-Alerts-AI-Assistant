{"version":3,"file":"string.mjs","sources":["../../../src/text/string.ts"],"sourcesContent":["import { camelCase } from 'lodash';\n\nconst specialChars = ['(', '[', '{', '}', ']', ')', '\\\\', '|', '*', '+', '-', '.', '?', '<', '>', '#', '&', '^', '$'];\nconst specialMatcher = '([\\\\' + specialChars.join('\\\\') + '])';\nconst specialCharEscape = new RegExp(specialMatcher, 'g');\nconst specialCharUnescape = new RegExp('(\\\\\\\\)' + specialMatcher, 'g');\n\nexport function escapeStringForRegex(value: string) {\n  if (!value) {\n    return value;\n  }\n\n  return value.replace(specialCharEscape, '\\\\$1');\n}\n\nexport function unEscapeStringFromRegex(value: string) {\n  if (!value) {\n    return value;\n  }\n\n  return value.replace(specialCharUnescape, '$2');\n}\n\nexport function stringStartsAsRegEx(str: string): boolean {\n  if (!str) {\n    return false;\n  }\n\n  return str[0] === '/';\n}\n\nexport function stringToJsRegex(str: string): RegExp {\n  if (!stringStartsAsRegEx(str)) {\n    return new RegExp(`^${str}$`);\n  }\n\n  const match = str.match(new RegExp('^/(.*?)/(g?i?m?y?s?)$'));\n\n  if (!match) {\n    throw new Error(`'${str}' is not a valid regular expression.`);\n  }\n\n  return new RegExp(match[1], match[2]);\n}\n\nexport function stringToMs(str: string): number {\n  if (!str) {\n    return 0;\n  }\n\n  const nr = parseInt(str, 10);\n  const unit = str.slice(String(nr).length);\n  const s = 1000;\n  const m = s * 60;\n  const h = m * 60;\n  const d = h * 24;\n\n  switch (unit) {\n    case 's':\n      return nr * s;\n    case 'm':\n      return nr * m;\n    case 'h':\n      return nr * h;\n    case 'd':\n      return nr * d;\n    default:\n      if (!unit) {\n        return isNaN(nr) ? 0 : nr;\n      }\n      throw new Error('Not supported unit: ' + unit);\n  }\n}\n\nexport function toNumberString(value: number | undefined | null): string {\n  if (value !== null && value !== undefined && Number.isFinite(value)) {\n    return value.toString();\n  }\n  return '';\n}\n\nexport function toIntegerOrUndefined(value: string): number | undefined {\n  if (!value) {\n    return undefined;\n  }\n  const v = parseInt(value, 10);\n  return isNaN(v) ? undefined : v;\n}\n\nexport function toFloatOrUndefined(value: string): number | undefined {\n  if (!value) {\n    return undefined;\n  }\n  const v = parseFloat(value);\n  return isNaN(v) ? undefined : v;\n}\n\nexport function toPascalCase(string: string) {\n  const str = camelCase(string);\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n\nexport function escapeRegex(value: string): string {\n  return value.replace(/[\\\\^$*+?.()|[\\]{}\\/]/g, '\\\\$&');\n}\n"],"names":[],"mappings":"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"}