{"version":3,"file":"markdown.mjs","sources":["../../../src/text/markdown.ts"],"sourcesContent":["import { marked, MarkedOptions } from 'marked';\nimport { mangle } from 'marked-mangle';\n\nimport { sanitizeTextPanelContent } from './sanitize';\n\nlet hasInitialized = false;\n\nexport interface RenderMarkdownOptions {\n  noSanitize?: boolean;\n  breaks?: boolean;\n}\n\nconst markdownOptions: MarkedOptions = {\n  pedantic: false,\n  gfm: true,\n  breaks: false,\n};\n\nexport function renderMarkdown(str?: string, options?: RenderMarkdownOptions): string {\n  if (!hasInitialized) {\n    marked.use(mangle());\n    marked.setOptions({ ...markdownOptions });\n    hasInitialized = true;\n  }\n\n  let opts = undefined;\n  if (options?.breaks) {\n    opts = {\n      ...markdownOptions,\n      breaks: true,\n    };\n  }\n  const html = marked(str || '', opts);\n\n  // `marked()` returns a promise if using any extensions that require async processing.\n  // we don't use any async extensions, but there is no way for typescript to know this, so we need to check the type.\n  if (typeof html !== 'string') {\n    throw new Error('Failed to process markdown synchronously.');\n  }\n\n  if (options?.noSanitize) {\n    return html;\n  }\n\n  return sanitizeTextPanelContent(html);\n}\n\nexport function renderTextPanelMarkdown(str?: string, options?: RenderMarkdownOptions): string {\n  if (!hasInitialized) {\n    marked.use(mangle());\n    marked.setOptions({ ...markdownOptions });\n    hasInitialized = true;\n  }\n\n  const html = marked(str || '');\n\n  // `marked()` returns a promise if using any extensions that require async processing.\n  // we don't use any async extensions, but there is no way for typescript to know this, so we need to check the type.\n  if (typeof html !== 'string') {\n    throw new Error('Failed to process markdown synchronously.');\n  }\n\n  if (options?.noSanitize) {\n    return html;\n  }\n\n  return sanitizeTextPanelContent(html);\n}\n"],"names":[],"mappings":";;;;AAKA,IAAI,cAAiB,GAAA,KAAA;AAOrB,MAAM,eAAiC,GAAA;AAAA,EACrC,QAAU,EAAA,KAAA;AAAA,EACV,GAAK,EAAA,IAAA;AAAA,EACL,MAAQ,EAAA;AACV,CAAA;AAEgB,SAAA,cAAA,CAAe,KAAc,OAAyC,EAAA;AACpF,EAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,IAAO,MAAA,CAAA,GAAA,CAAI,QAAQ,CAAA;AACnB,IAAA,MAAA,CAAO,UAAW,CAAA,EAAE,GAAG,eAAA,EAAiB,CAAA;AACxC,IAAiB,cAAA,GAAA,IAAA;AAAA;AAGnB,EAAA,IAAI,IAAO,GAAA,SAAA;AACX,EAAA,IAAI,sCAAS,MAAQ,EAAA;AACnB,IAAO,IAAA,GAAA;AAAA,MACL,GAAG,eAAA;AAAA,MACH,MAAQ,EAAA;AAAA,KACV;AAAA;AAEF,EAAA,MAAM,IAAO,GAAA,MAAA,CAAO,GAAO,IAAA,EAAA,EAAI,IAAI,CAAA;AAInC,EAAI,IAAA,OAAO,SAAS,QAAU,EAAA;AAC5B,IAAM,MAAA,IAAI,MAAM,2CAA2C,CAAA;AAAA;AAG7D,EAAA,IAAI,sCAAS,UAAY,EAAA;AACvB,IAAO,OAAA,IAAA;AAAA;AAGT,EAAA,OAAO,yBAAyB,IAAI,CAAA;AACtC;AAEgB,SAAA,uBAAA,CAAwB,KAAc,OAAyC,EAAA;AAC7F,EAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,IAAO,MAAA,CAAA,GAAA,CAAI,QAAQ,CAAA;AACnB,IAAA,MAAA,CAAO,UAAW,CAAA,EAAE,GAAG,eAAA,EAAiB,CAAA;AACxC,IAAiB,cAAA,GAAA,IAAA;AAAA;AAGnB,EAAM,MAAA,IAAA,GAAO,MAAO,CAAA,GAAA,IAAO,EAAE,CAAA;AAI7B,EAAI,IAAA,OAAO,SAAS,QAAU,EAAA;AAC5B,IAAM,MAAA,IAAI,MAAM,2CAA2C,CAAA;AAAA;AAG7D,EAAA,IAAI,sCAAS,UAAY,EAAA;AACvB,IAAO,OAAA,IAAA;AAAA;AAGT,EAAA,OAAO,yBAAyB,IAAI,CAAA;AACtC;;;;"}