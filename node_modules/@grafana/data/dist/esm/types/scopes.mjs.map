{"version":3,"file":"scopes.mjs","sources":["../../../src/types/scopes.ts"],"sourcesContent":["export interface ScopeDashboardBindingSpec {\n  dashboard: string;\n  scope: string;\n}\n\nexport interface ScopeDashboardBindingStatus {\n  dashboardTitle: string;\n  groups?: string[];\n}\n\n// TODO: Use Resource from apiserver when we export the types\nexport interface ScopeDashboardBinding {\n  metadata: {\n    name: string;\n  };\n  spec: ScopeDashboardBindingSpec;\n  status: ScopeDashboardBindingStatus;\n}\n\nexport type ScopeFilterOperator = 'equals' | 'not-equals' | 'regex-match' | 'regex-not-match' | 'one-of' | 'not-one-of';\nexport type EqualityOrMultiOperator = Extract<ScopeFilterOperator, 'equals' | 'not-equals' | 'one-of' | 'not-one-of'>;\n\nexport function isEqualityOrMultiOperator(value: string): value is EqualityOrMultiOperator {\n  const operators = new Set(['equals', 'not-equals', 'one-of', 'not-one-of']);\n  return operators.has(value);\n}\n\nexport const scopeFilterOperatorMap: Record<string, ScopeFilterOperator> = {\n  '=': 'equals',\n  '!=': 'not-equals',\n  '=~': 'regex-match',\n  '!~': 'regex-not-match',\n  '=|': 'one-of',\n  '!=|': 'not-one-of',\n};\n\nexport const reverseScopeFilterOperatorMap: Record<ScopeFilterOperator, string> = Object.fromEntries(\n  Object.entries(scopeFilterOperatorMap).map(([symbol, operator]) => [operator, symbol])\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n) as Record<ScopeFilterOperator, string>;\n\nexport interface ScopeSpecFilter {\n  key: string;\n  value: string;\n  // values is used for operators that support multiple values (e.g. one-of, not-one-of)\n  values?: string[];\n  operator: ScopeFilterOperator;\n}\n\nexport interface ScopeSpec {\n  title: string;\n  type: string;\n  description: string;\n  category: string;\n  filters: ScopeSpecFilter[];\n}\n\n// TODO: Use Resource from apiserver when we export the types\nexport interface Scope {\n  metadata: {\n    name: string;\n  };\n  spec: ScopeSpec;\n}\n\nexport type ScopeNodeNodeType = 'container' | 'leaf';\nexport type ScopeNodeLinkType = 'scope';\n\nexport interface ScopeNodeSpec {\n  nodeType: ScopeNodeNodeType;\n  title: string;\n\n  description?: string;\n  disableMultiSelect?: boolean;\n  linkId?: string;\n  linkType?: ScopeNodeLinkType;\n}\n\n// TODO: Use Resource from apiserver when we export the types\nexport interface ScopeNode {\n  metadata: {\n    name: string;\n  };\n  spec: ScopeNodeSpec;\n}\n"],"names":[],"mappings":"AAsBO,SAAS,0BAA0B,KAAiD,EAAA;AACzF,EAAM,MAAA,SAAA,uBAAgB,GAAI,CAAA,CAAC,UAAU,YAAc,EAAA,QAAA,EAAU,YAAY,CAAC,CAAA;AAC1E,EAAO,OAAA,SAAA,CAAU,IAAI,KAAK,CAAA;AAC5B;AAEO,MAAM,sBAA8D,GAAA;AAAA,EACzE,GAAK,EAAA,QAAA;AAAA,EACL,IAAM,EAAA,YAAA;AAAA,EACN,IAAM,EAAA,aAAA;AAAA,EACN,IAAM,EAAA,iBAAA;AAAA,EACN,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA;AACT;AAEO,MAAM,gCAAqE,MAAO,CAAA,WAAA;AAAA,EACvF,MAAO,CAAA,OAAA,CAAQ,sBAAsB,CAAA,CAAE,GAAI,CAAA,CAAC,CAAC,MAAA,EAAQ,QAAQ,CAAA,KAAM,CAAC,QAAA,EAAU,MAAM,CAAC;AAAA;AAEvF;;;;"}