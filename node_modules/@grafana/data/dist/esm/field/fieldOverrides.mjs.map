{"version":3,"file":"fieldOverrides.mjs","sources":["../../../src/field/fieldOverrides.ts"],"sourcesContent":["import { isNumber, set, unset, get, cloneDeep } from 'lodash';\nimport { useMemo, useRef } from 'react';\nimport usePrevious from 'react-use/lib/usePrevious';\n\nimport { ThresholdsMode, VariableFormatID } from '@grafana/schema';\n\nimport { compareArrayValues, compareDataFrameStructures } from '../dataframe/frameComparisons';\nimport { guessFieldTypeForField } from '../dataframe/processDataFrame';\nimport { PanelPlugin } from '../panel/PanelPlugin';\nimport { asHexString } from '../themes/colorManipulator';\nimport { GrafanaTheme2 } from '../themes/types';\nimport { ReducerID, reduceField } from '../transformations/fieldReducer';\nimport { fieldMatchers } from '../transformations/matchers';\nimport { ScopedVars, DataContextScopedVar } from '../types/ScopedVars';\nimport { DataFrame, NumericRange, FieldType, Field, ValueLinkConfig, FieldConfig } from '../types/dataFrame';\nimport { LinkModel, DataLink } from '../types/dataLink';\nimport { DisplayProcessor, DisplayValue, DecimalCount } from '../types/displayValue';\nimport { FieldColorModeId } from '../types/fieldColor';\nimport {\n  DynamicConfigValue,\n  ApplyFieldOverrideOptions,\n  FieldOverrideContext,\n  FieldConfigPropertyItem,\n  DataLinkPostProcessor,\n  FieldConfigSource,\n} from '../types/fieldOverrides';\nimport { InterpolateFunction, PanelData } from '../types/panel';\nimport { TimeZone } from '../types/time';\nimport { FieldMatcher } from '../types/transformations';\nimport { mapInternalLinkToExplore } from '../utils/dataLinks';\nimport { locationUtil } from '../utils/location';\n\nimport { FieldConfigOptionsRegistry } from './FieldConfigOptionsRegistry';\nimport { getDisplayProcessor, getRawDisplayProcessor } from './displayProcessor';\nimport { getMinMaxAndDelta } from './scale';\nimport { standardFieldConfigEditorRegistry } from './standardFieldConfigEditorRegistry';\n\ninterface OverrideProps {\n  match: FieldMatcher;\n  properties: DynamicConfigValue[];\n}\n\nexport function findNumericFieldMinMax(data: DataFrame[]): NumericRange {\n  let min: number | null = null;\n  let max: number | null = null;\n\n  const reducers = [ReducerID.min, ReducerID.max];\n\n  for (const frame of data) {\n    for (const field of frame.fields) {\n      if (field.type === FieldType.number) {\n        const stats = reduceField({ field, reducers });\n        const statsMin = stats[ReducerID.min];\n        const statsMax = stats[ReducerID.max];\n\n        if (min === null || statsMin < min) {\n          min = statsMin;\n        }\n\n        if (max === null || statsMax > max) {\n          max = statsMax;\n        }\n      }\n    }\n  }\n\n  return { min, max, delta: (max ?? 0) - (min ?? 0) };\n}\n\n/**\n * Return a copy of the DataFrame with all rules applied\n */\nexport function applyFieldOverrides(options: ApplyFieldOverrideOptions): DataFrame[] {\n  if (!options.data) {\n    return [];\n  }\n\n  const source = options.fieldConfig;\n  if (!source) {\n    return options.data;\n  }\n\n  const fieldConfigRegistry = options.fieldConfigRegistry ?? standardFieldConfigEditorRegistry;\n\n  let seriesIndex = 0;\n  let globalRange: NumericRange | undefined = undefined;\n\n  // Prepare the Matchers\n  const override: OverrideProps[] = [];\n  if (source.overrides) {\n    for (const rule of source.overrides) {\n      const info = fieldMatchers.get(rule.matcher.id);\n      if (info) {\n        override.push({\n          match: info.get(rule.matcher.options),\n          properties: rule.properties,\n        });\n      }\n    }\n  }\n\n  return options.data.map((originalFrame, index) => {\n    // Need to define this new frame here as it's passed to the getLinkSupplier function inside the fields loop\n    const newFrame: DataFrame = { ...originalFrame };\n    // Copy fields\n    newFrame.fields = newFrame.fields.map((field) => {\n      return {\n        ...field,\n        config: cloneDeep(field.config),\n        state: {\n          ...field.state,\n        },\n      };\n    });\n\n    for (const field of newFrame.fields) {\n      const config = field.config;\n\n      field.state!.scopedVars = {\n        __dataContext: {\n          value: {\n            data: options.data!,\n            frame: newFrame,\n            frameIndex: index,\n            field: field,\n          },\n        },\n      };\n\n      const context = {\n        field: field,\n        data: options.data!,\n        dataFrameIndex: index,\n        replaceVariables: options.replaceVariables,\n        fieldConfigRegistry: fieldConfigRegistry,\n      };\n\n      // Anything in the field config that's not set by the datasource\n      // will be filled in by panel's field configuration\n      setFieldConfigDefaults(config, source.defaults, context);\n\n      // Find any matching rules and then override\n      for (const rule of override) {\n        if (rule.match(field, newFrame, options.data!)) {\n          for (const prop of rule.properties) {\n            // config.scopedVars is set already here\n            setDynamicConfigValue(config, prop, context);\n          }\n        }\n      }\n\n      // Try harder to set a real value that is not 'other'\n      let type = field.type;\n      if (!type || type === FieldType.other) {\n        const t = guessFieldTypeForField(field);\n        if (t) {\n          type = t;\n        }\n      }\n\n      // Set the Min/Max value automatically\n      const { range, newGlobalRange } = calculateRange(config, field, globalRange, options.data!);\n      globalRange = newGlobalRange;\n\n      // Clear any cached displayName as it can change during field overrides process\n      field.state!.displayName = null;\n      field.state!.seriesIndex = seriesIndex;\n      field.state!.range = range;\n      field.type = type;\n\n      // Some color modes needs series index to assign field color so we count\n      // up series index here but ignore time fields\n      if (field.type !== FieldType.time) {\n        seriesIndex++;\n      }\n\n      // and set the display processor using it\n      field.display = getDisplayProcessor({\n        field: field,\n        theme: options.theme,\n        timeZone: options.timeZone,\n      });\n\n      // Wrap the display with a cache to avoid double calls\n      if (field.config.unit !== 'dateTimeFromNow') {\n        field.display = cachingDisplayProcessor(field.display, 2500);\n      }\n\n      // Attach data links supplier\n      field.getLinks = getLinksSupplier(\n        newFrame,\n        field,\n        field.state!.scopedVars,\n        context.replaceVariables,\n        options.timeZone,\n        options.dataLinkPostProcessor\n      );\n\n      if (field.type === FieldType.nestedFrames) {\n        for (const nestedFrames of field.values) {\n          for (let nfIndex = 0; nfIndex < nestedFrames.length; nfIndex++) {\n            for (const valueField of nestedFrames[nfIndex].fields) {\n              // Get display processor for nested fields\n              valueField.display = getDisplayProcessor({\n                field: valueField,\n                theme: options.theme,\n                timeZone: options.timeZone,\n              });\n\n              valueField.state = {\n                scopedVars: {\n                  __dataContext: {\n                    value: {\n                      data: nestedFrames,\n                      frame: nestedFrames[nfIndex],\n                      frameIndex: nfIndex,\n                      field: valueField,\n                    },\n                  },\n                },\n              };\n\n              valueField.getLinks = getLinksSupplier(\n                nestedFrames[nfIndex],\n                valueField,\n                valueField.state!.scopedVars,\n                context.replaceVariables,\n                options.timeZone,\n                options.dataLinkPostProcessor\n              );\n            }\n          }\n        }\n      }\n    }\n\n    return newFrame;\n  });\n}\n\nfunction calculateRange(\n  config: FieldConfig,\n  field: Field,\n  globalRange: NumericRange | undefined,\n  data: DataFrame[]\n): { range?: { min?: number | null; max?: number | null; delta: number }; newGlobalRange: NumericRange | undefined } {\n  // Only calculate ranges when the field is a number and one of min/max is set to auto.\n  if (field.type !== FieldType.number || (isNumber(config.min) && isNumber(config.max))) {\n    return { newGlobalRange: globalRange };\n  }\n\n  // Calculate the min/max from the field.\n  if (config.fieldMinMax) {\n    const localRange = getMinMaxAndDelta(field);\n    const min = config.min ?? localRange.min;\n    const max = config.max ?? localRange.max;\n    return { range: { min, max, delta: max! - min! }, newGlobalRange: globalRange };\n  }\n\n  // We use the global range if supplied, otherwise we calculate it.\n  const newGlobalRange = globalRange ?? findNumericFieldMinMax(data);\n  const min = config.min ?? newGlobalRange!.min;\n  const max = config.max ?? newGlobalRange!.max;\n  return { range: { min, max, delta: max! - min! }, newGlobalRange };\n}\n\n// this is a significant optimization for streaming, where we currently re-process all values in the buffer on ech update\n// via field.display(value). this can potentially be removed once we...\n// 1. process data packets incrementally and/if cache the results in the streaming datafame (maybe by buffer index)\n// 2. have the ability to selectively get display color or text (but not always both, which are each quite expensive)\n// 3. sufficently optimize text formatting and threshold color determinitation\nfunction cachingDisplayProcessor(disp: DisplayProcessor, maxCacheSize = 2500): DisplayProcessor {\n  type dispCache = Map<unknown, DisplayValue>;\n  // decimals -> cache mapping, -1 is unspecified decimals\n  const caches = new Map<number, dispCache>();\n\n  // pre-init caches for up to 15 decimals\n  for (let i = -1; i <= 15; i++) {\n    caches.set(i, new Map());\n  }\n\n  return (value: unknown, decimals?: DecimalCount) => {\n    let cache = caches.get(decimals ?? -1)!;\n\n    let v = cache.get(value);\n\n    if (!v) {\n      // Don't grow too big\n      if (cache.size === maxCacheSize) {\n        cache.clear();\n      }\n\n      v = disp(value, decimals);\n\n      // convert to hex6 or hex8 so downstream we can cheaply test for alpha (and set new alpha)\n      // via a simple length check (in colorManipulator) rather using slow parsing via tinycolor\n      if (v.color) {\n        v.color = asHexString(v.color);\n      }\n\n      cache.set(value, v);\n    }\n\n    return v;\n  };\n}\n\nexport interface FieldOverrideEnv extends FieldOverrideContext {\n  fieldConfigRegistry: FieldConfigOptionsRegistry;\n}\n\nexport function setDynamicConfigValue(config: FieldConfig, value: DynamicConfigValue, context: FieldOverrideEnv) {\n  const reg = context.fieldConfigRegistry;\n  const item = reg.getIfExists(value.id);\n\n  if (!item) {\n    return;\n  }\n\n  const val = item.process(value.value, context, item.settings);\n\n  const remove = val === undefined || val === null;\n\n  if (remove) {\n    if (item.isCustom && config.custom) {\n      unset(config.custom, item.path);\n    } else {\n      unset(config, item.path);\n    }\n  } else {\n    if (item.isCustom) {\n      if (!config.custom) {\n        config.custom = {};\n      }\n      set(config.custom, item.path, val);\n    } else {\n      set(config, item.path, val);\n    }\n  }\n}\n\n// config -> from DS\n// defaults -> from Panel config\nexport function setFieldConfigDefaults(config: FieldConfig, defaults: FieldConfig, context: FieldOverrideEnv) {\n  // For cases where we have links on the datasource config and the panel config, we need to merge them\n  if (config.links && defaults.links) {\n    // Combine the data source links and the panel default config links\n    config.links = [...config.links, ...defaults.links];\n  }\n\n  // if we have a base threshold set by default but not on the config, we need to merge it in\n  const defaultBaseStep =\n    defaults?.thresholds?.mode === ThresholdsMode.Absolute &&\n    defaults.thresholds?.steps.find((step) => step.value === -Infinity);\n  if (\n    config.thresholds?.mode === ThresholdsMode.Absolute &&\n    !config.thresholds.steps.some((step) => step.value === -Infinity) &&\n    defaultBaseStep\n  ) {\n    config.thresholds.steps = [defaultBaseStep, ...config.thresholds.steps];\n  }\n  for (const fieldConfigProperty of context.fieldConfigRegistry.list()) {\n    if (fieldConfigProperty.isCustom && !config.custom) {\n      config.custom = {};\n    }\n    processFieldConfigValue(\n      fieldConfigProperty.isCustom ? config.custom : config,\n      fieldConfigProperty.isCustom ? defaults.custom : defaults,\n      fieldConfigProperty,\n      context\n    );\n  }\n\n  validateFieldConfig(config);\n}\n\nfunction processFieldConfigValue(\n  destination: Record<string, unknown>, // it's mutable\n  source: Record<string, unknown>,\n  fieldConfigProperty: FieldConfigPropertyItem,\n  context: FieldOverrideEnv\n) {\n  const currentConfig = get(destination, fieldConfigProperty.path);\n  if (currentConfig === null || currentConfig === undefined) {\n    const item = context.fieldConfigRegistry.getIfExists(fieldConfigProperty.id);\n    if (!item) {\n      return;\n    }\n\n    if (item && item.shouldApply(context.field!)) {\n      const val = item.process(get(source, item.path), context, item.settings);\n      if (val !== undefined && val !== null) {\n        set(destination, item.path, val);\n      }\n    }\n  }\n}\n\n/**\n * This checks that all options on FieldConfig make sense.  It mutates any value that needs\n * fixed.  In particular this makes sure that the first threshold value is -Infinity (not valid in JSON)\n */\nexport function validateFieldConfig(config: FieldConfig) {\n  const { thresholds } = config;\n\n  if (!config.color) {\n    if (thresholds) {\n      config.color = {\n        mode: FieldColorModeId.Thresholds,\n      };\n    }\n    // No Color settings\n  } else if (!config.color.mode) {\n    // Without a mode, skip color altogether\n    delete config.color;\n  }\n\n  // Verify that max > min (swap if necessary)\n  if (config.hasOwnProperty('min') && config.hasOwnProperty('max') && config.min! > config.max!) {\n    const tmp = config.max;\n    config.max = config.min;\n    config.min = tmp;\n  }\n}\n\nconst defaultInternalLinkPostProcessor: DataLinkPostProcessor = (options) => {\n  // For internal links at the moment only destination is Explore.\n  const { link, linkModel, dataLinkScopedVars, field, replaceVariables } = options;\n\n  if (link.internal) {\n    return mapInternalLinkToExplore({\n      link,\n      internalLink: link.internal,\n      scopedVars: dataLinkScopedVars,\n      field,\n      range: link.internal.range,\n      replaceVariables,\n    });\n  } else {\n    return linkModel;\n  }\n};\n\nexport const getLinksSupplier =\n  (\n    frame: DataFrame,\n    field: Field,\n    fieldScopedVars: ScopedVars,\n    replaceVariables: InterpolateFunction,\n    timeZone?: TimeZone,\n    dataLinkPostProcessor?: DataLinkPostProcessor\n  ) =>\n  (config: ValueLinkConfig): Array<LinkModel<Field>> => {\n    if (!field.config.links || field.config.links.length === 0) {\n      return [];\n    }\n\n    const linkModels = field.config.links.map((link: DataLink) => {\n      const dataContext: DataContextScopedVar = getFieldDataContextClone(frame, field, fieldScopedVars);\n      const dataLinkScopedVars = {\n        ...fieldScopedVars,\n        __dataContext: dataContext,\n      };\n\n      const boundReplaceVariables: InterpolateFunction = (value, scopedVars, format) =>\n        replaceVariables(value, { ...dataLinkScopedVars, ...scopedVars }, format);\n\n      // We are not displaying reduction result\n      if (config.valueRowIndex !== undefined && !isNaN(config.valueRowIndex)) {\n        dataContext.value.rowIndex = config.valueRowIndex;\n      } else {\n        dataContext.value.calculatedValue = config.calculatedValue;\n      }\n\n      let linkModel: LinkModel<Field>;\n\n      let href =\n        link.onClick || !link.onBuildUrl\n          ? link.url\n          : link.onBuildUrl({\n              origin: field,\n              replaceVariables: boundReplaceVariables,\n            });\n\n      if (href) {\n        href = locationUtil.assureBaseUrl(href.replace(/\\n/g, ''));\n        href = replaceVariables(href, dataLinkScopedVars, VariableFormatID.UriEncode);\n        href = locationUtil.processUrl(href);\n      }\n\n      if (link.onClick) {\n        linkModel = {\n          href,\n          title: replaceVariables(link.title || '', dataLinkScopedVars),\n          target: link.targetBlank ? '_blank' : undefined,\n          onClick: (evt: MouseEvent, origin: Field) => {\n            link.onClick!({\n              origin: origin ?? field,\n              e: evt,\n              replaceVariables: boundReplaceVariables,\n            });\n          },\n          origin: field,\n          oneClick: link.oneClick ?? false,\n        };\n      } else {\n        linkModel = {\n          href,\n          title: replaceVariables(link.title || '', dataLinkScopedVars),\n          target: link.targetBlank ? '_blank' : undefined,\n          origin: field,\n          oneClick: link.oneClick ?? false,\n        };\n      }\n\n      return (dataLinkPostProcessor || defaultInternalLinkPostProcessor)({\n        frame,\n        field,\n        dataLinkScopedVars,\n        replaceVariables,\n        config,\n        link,\n        linkModel,\n      });\n    });\n\n    return linkModels.filter((link): link is LinkModel => !!link);\n  };\n\n/**\n * Return a copy of the DataFrame with raw data\n */\nexport function applyRawFieldOverrides(data: DataFrame[]): DataFrame[] {\n  if (!data || data.length === 0) {\n    return [];\n  }\n\n  const newData = [...data];\n  const processor = getRawDisplayProcessor();\n\n  for (let frameIndex = 0; frameIndex < newData.length; frameIndex++) {\n    const newFrame = { ...newData[frameIndex] };\n    const newFields = [...newFrame.fields];\n\n    for (let fieldIndex = 0; fieldIndex < newFields.length; fieldIndex++) {\n      newFields[fieldIndex] = {\n        ...newFields[fieldIndex],\n        display: processor,\n      };\n    }\n\n    newData[frameIndex] = {\n      ...newFrame,\n      fields: newFields,\n    };\n  }\n\n  return newData;\n}\n\n/**\n * @internal\n */\nexport function useFieldOverrides(\n  plugin: PanelPlugin | undefined,\n  fieldConfig: FieldConfigSource | undefined,\n  data: PanelData | undefined,\n  timeZone: string,\n  theme: GrafanaTheme2,\n  replace: InterpolateFunction,\n  dataLinkPostProcessor?: DataLinkPostProcessor\n): PanelData | undefined {\n  const fieldConfigRegistry = plugin?.fieldConfigRegistry;\n  const structureRev = useRef(0);\n  const prevSeries = usePrevious(data?.series);\n\n  return useMemo(() => {\n    if (!fieldConfigRegistry || !fieldConfig || !data) {\n      return;\n    }\n\n    const series = data?.series;\n\n    if (\n      data.structureRev == null &&\n      series &&\n      prevSeries &&\n      !compareArrayValues(series, prevSeries, compareDataFrameStructures)\n    ) {\n      structureRev.current++;\n    }\n\n    const panelData: PanelData = {\n      structureRev: structureRev.current,\n      ...data,\n      series: applyFieldOverrides({\n        data: series,\n        fieldConfig,\n        fieldConfigRegistry,\n        replaceVariables: replace,\n        theme,\n        timeZone,\n        dataLinkPostProcessor,\n      }),\n    };\n    if (data.annotations && data.annotations.length > 0) {\n      panelData.annotations = applyFieldOverrides({\n        data: data.annotations,\n        fieldConfig: {\n          defaults: {},\n          overrides: [],\n        },\n        replaceVariables: replace,\n        theme,\n        timeZone,\n        dataLinkPostProcessor,\n      });\n    }\n    return panelData;\n  }, [fieldConfigRegistry, fieldConfig, data, prevSeries, timeZone, theme, replace, dataLinkPostProcessor]);\n}\n\n/**\n * Clones the existing dataContext or creates a new one\n */\nexport function getFieldDataContextClone(frame: DataFrame, field: Field, fieldScopedVars: ScopedVars) {\n  if (fieldScopedVars?.__dataContext) {\n    return {\n      value: {\n        ...fieldScopedVars.__dataContext.value,\n      },\n    };\n  }\n\n  return { value: { frame, field, data: [frame] } };\n}\n"],"names":["min","max"],"mappings":"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"}