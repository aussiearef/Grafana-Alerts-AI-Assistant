{"version":3,"file":"formats.mjs","sources":["../../../src/datetime/formats.ts"],"sourcesContent":["export interface SystemDateFormatSettings {\n  fullDate: string;\n  interval: {\n    millisecond: string;\n    second: string;\n    minute: string;\n    hour: string;\n    day: string;\n    month: string;\n    year: string;\n  };\n  useBrowserLocale: boolean;\n}\n\nconst DEFAULT_SYSTEM_DATE_FORMAT = 'YYYY-MM-DD HH:mm:ss';\nconst DEFAULT_SYSTEM_DATE_MS_FORMAT = 'YYYY-MM-DD HH:mm:ss.SSS';\n\nexport class SystemDateFormatsState {\n  fullDate = DEFAULT_SYSTEM_DATE_FORMAT;\n  fullDateMS = DEFAULT_SYSTEM_DATE_MS_FORMAT;\n  interval = {\n    millisecond: 'HH:mm:ss.SSS',\n    second: 'HH:mm:ss',\n    minute: 'HH:mm',\n    hour: 'MM/DD HH:mm',\n    day: 'MM/DD',\n    month: 'YYYY-MM',\n    year: 'YYYY',\n  };\n\n  update(settings: SystemDateFormatSettings) {\n    this.fullDate = settings.fullDate;\n    this.interval = settings.interval;\n\n    if (settings.useBrowserLocale) {\n      this.useBrowserLocale();\n    }\n  }\n\n  useBrowserLocale() {\n    this.fullDate = localTimeFormat({\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    });\n\n    // ES5 doesn't support `DateTimeFormatOptions.fractionalSecondDigits` so we have to use\n    // a hack with string replacement.\n    this.fullDateMS = this.fullDate.replace('ss', 'ss.SSS');\n\n    this.interval.millisecond = localTimeFormat(\n      { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false },\n      null,\n      this.interval.second\n    ).replace('ss', 'ss.SSS');\n    this.interval.second = localTimeFormat(\n      { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false },\n      null,\n      this.interval.second\n    );\n    this.interval.minute = localTimeFormat(\n      { hour: '2-digit', minute: '2-digit', hour12: false },\n      null,\n      this.interval.minute\n    );\n    this.interval.hour = localTimeFormat(\n      { month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: false },\n      null,\n      this.interval.hour\n    );\n    this.interval.day = localTimeFormat({ month: '2-digit', day: '2-digit', hour12: false }, null, this.interval.day);\n    this.interval.month = localTimeFormat(\n      { year: 'numeric', month: '2-digit', hour12: false },\n      null,\n      this.interval.month\n    );\n  }\n\n  getTimeFieldUnit(useMsResolution?: boolean) {\n    return `time:${useMsResolution ? this.fullDateMS : this.fullDate}`;\n  }\n}\n\n/**\n * localTimeFormat helps to generate date formats for momentjs based on browser's locale\n *\n * @param locale browser locale, or default\n * @param options DateTimeFormatOptions to format date\n * @param fallback default format if Intl API is not present\n */\nexport function localTimeFormat(\n  options: Intl.DateTimeFormatOptions,\n  locale?: string | string[] | null,\n  fallback?: string\n): string {\n  if (missingIntlDateTimeFormatSupport()) {\n    return fallback ?? DEFAULT_SYSTEM_DATE_FORMAT;\n  }\n\n  if (!locale && navigator) {\n    locale = [...navigator.languages];\n  }\n\n  // https://momentjs.com/docs/#/displaying/format/\n  const dateTimeFormat = new Intl.DateTimeFormat(locale || undefined, options);\n  const parts = dateTimeFormat.formatToParts(new Date());\n  const hour12 = dateTimeFormat.resolvedOptions().hour12;\n\n  const mapping: { [key: string]: string } = {\n    year: 'YYYY',\n    month: 'MM',\n    day: 'DD',\n    hour: hour12 ? 'hh' : 'HH',\n    minute: 'mm',\n    second: 'ss',\n    weekday: 'ddd',\n    era: 'N',\n    dayPeriod: 'A',\n    timeZoneName: 'Z',\n  };\n\n  return parts.map((part) => mapping[part.type] || part.value).join('');\n}\n\nexport const systemDateFormats = new SystemDateFormatsState();\n\nconst missingIntlDateTimeFormatSupport = (): boolean => {\n  return !('DateTimeFormat' in Intl) || !('formatToParts' in Intl.DateTimeFormat.prototype);\n};\n"],"names":[],"mappings":"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"}