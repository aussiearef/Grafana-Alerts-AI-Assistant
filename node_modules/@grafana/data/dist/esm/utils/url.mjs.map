{"version":3,"file":"url.mjs","sources":["../../../src/utils/url.ts"],"sourcesContent":["/**\n * @preserve jquery-param (c) 2015 KNOWLEDGECODE | MIT\n */\n\nimport { isDateTime } from '../datetime/moment_wrapper';\nimport { ExploreUrlState, URLRange } from '../types/explore';\nimport { RawTimeRange } from '../types/time';\n\n/**\n * Type to represent the value of a single query variable.\n *\n * @public\n */\nexport type UrlQueryValue = string | number | boolean | string[] | number[] | boolean[] | undefined | null;\n\n/**\n * Type to represent the values parsed from the query string.\n *\n * @public\n */\nexport type UrlQueryMap = Record<string, UrlQueryValue>;\n\nfunction renderUrl(path: string, query: UrlQueryMap | undefined): string {\n  if (query && Object.keys(query).length > 0) {\n    path += '?' + toUrlParams(query);\n  }\n  return path;\n}\n\nfunction encodeURIComponentAsAngularJS(val: EncodeURIComponentParams, pctEncodeSpaces?: boolean) {\n  return encodeURIComponent(val)\n    .replace(/%40/gi, '@')\n    .replace(/%3A/gi, ':')\n    .replace(/%24/g, '$')\n    .replace(/%2C/gi, ',')\n    .replace(/%3B/gi, ';')\n    .replace(/%20/g, pctEncodeSpaces ? '%20' : '+')\n    .replace(/[!'()*]/g, function (c) {\n      return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n}\n\ntype EncodeURIComponentParams = Parameters<typeof encodeURIComponent>[0];\n/**\n *  Encodes URL parameters in the style of AngularJS.\n *  Use `serializeParams` to encode parameters using `encodeURIComponent` instead.\n */\nfunction toUrlParams(a: any, encodeAsAngularJS = true) {\n  const s: any[] = [];\n  const rbracket = /\\[\\]$/;\n\n  const encodingFunction = encodeAsAngularJS\n    ? (value: EncodeURIComponentParams, pctEncodeSpaces?: boolean) =>\n        encodeURIComponentAsAngularJS(value, pctEncodeSpaces)\n    : (value: EncodeURIComponentParams, _: boolean) => encodeURIComponent(value);\n\n  const isArray = (obj: unknown) => {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  };\n\n  const add = (k: string, v: any) => {\n    v = typeof v === 'function' ? v() : v === null ? '' : v === undefined ? '' : v;\n    if (typeof v !== 'boolean') {\n      s[s.length] = encodingFunction(k, true) + '=' + encodingFunction(v, true);\n    } else {\n      const valueQueryPart = v ? '' : '=' + encodingFunction('false', true);\n      s[s.length] = encodingFunction(k, true) + valueQueryPart;\n    }\n  };\n\n  const buildParams = (prefix: string, obj: any) => {\n    let i, len, key;\n\n    if (prefix) {\n      if (isArray(obj)) {\n        for (i = 0, len = obj.length; i < len; i++) {\n          if (rbracket.test(prefix)) {\n            add(prefix, obj[i]);\n          } else {\n            buildParams(prefix, obj[i]);\n          }\n        }\n      } else if (obj && String(obj) === '[object Object]') {\n        for (key in obj) {\n          buildParams(prefix + '[' + key + ']', obj[key]);\n        }\n      } else {\n        add(prefix, obj);\n      }\n    } else if (isArray(obj)) {\n      for (i = 0, len = obj.length; i < len; i++) {\n        add(obj[i].name, obj[i].value);\n      }\n    } else {\n      for (key in obj) {\n        buildParams(key, obj[key]);\n      }\n    }\n    return s;\n  };\n\n  return buildParams('', a).join('&');\n}\n\n/**\n * Converts params into a URL-encoded query string.\n *\n * @param params data to serialize\n * @returns A URL-encoded string representing the provided data.\n */\nfunction serializeParams(params: unknown): string {\n  return toUrlParams(params, false);\n}\n\nfunction appendQueryToUrl(url: string, stringToAppend: string) {\n  if (stringToAppend !== undefined && stringToAppend !== null && stringToAppend !== '') {\n    const pos = url.indexOf('?');\n    if (pos !== -1) {\n      if (url.length - pos > 1) {\n        url += '&';\n      }\n    } else {\n      url += '?';\n    }\n    url += stringToAppend;\n  }\n\n  return url;\n}\n\n/**\n * Return search part (as object) of current url\n */\nfunction getUrlSearchParams(): UrlQueryMap {\n  const search = window.location.search.substring(1);\n  const searchParamsSegments = search.split('&');\n  const params: UrlQueryMap = {};\n  for (const p of searchParamsSegments) {\n    const keyValuePair = p.split('=');\n    if (keyValuePair.length > 1) {\n      // key-value param\n      const key = decodeURIComponent(keyValuePair[0]);\n      const value = decodeURIComponent(keyValuePair[1]);\n      if (key in params) {\n        params[key] = [...(params[key] as any[]), value];\n      } else {\n        params[key] = [value];\n      }\n    } else if (keyValuePair.length === 1) {\n      // boolean param\n      const key = decodeURIComponent(keyValuePair[0]);\n      params[key] = true;\n    }\n  }\n  return params;\n}\n\n/**\n * Parses an escaped url query string into key-value pairs.\n * Attribution: Code dervived from https://github.com/angular/angular.js/master/src/Angular.js#L1396\n * @returns {Object.<string,boolean|Array>}\n */\nexport function parseKeyValue(keyValue: string) {\n  const obj: any = {};\n  const parts = (keyValue || '').split('&');\n\n  for (let keyValue of parts) {\n    let splitPoint: number | undefined;\n    let key: string | undefined;\n    let val: string | undefined | boolean;\n\n    if (keyValue) {\n      key = keyValue = keyValue.replace(/\\+/g, '%20');\n      splitPoint = keyValue.indexOf('=');\n\n      if (splitPoint !== -1) {\n        key = keyValue.substring(0, splitPoint);\n        val = keyValue.substring(splitPoint + 1);\n      }\n\n      key = tryDecodeURIComponent(key);\n\n      if (key !== undefined) {\n        val = val !== undefined ? tryDecodeURIComponent(val as string) : true;\n\n        let parsedVal: any;\n        if (typeof val === 'string' && val !== '') {\n          parsedVal = val === 'true' || val === 'false' ? val === 'true' : val;\n        } else {\n          parsedVal = val;\n        }\n\n        if (!obj.hasOwnProperty(key)) {\n          obj[key] = isNaN(parsedVal) ? val : parsedVal;\n        } else if (Array.isArray(obj[key])) {\n          obj[key].push(val);\n        } else {\n          obj[key] = [obj[key], isNaN(parsedVal) ? val : parsedVal];\n        }\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction tryDecodeURIComponent(value: string): string | undefined {\n  try {\n    return decodeURIComponent(value);\n  } catch (e) {\n    return undefined;\n  }\n}\n\nexport const urlUtil = {\n  renderUrl,\n  toUrlParams,\n  appendQueryToUrl,\n  getUrlSearchParams,\n  parseKeyValue,\n  serializeParams,\n};\n\n/**\n * Create an string that is used in URL to represent the Explore state. This is basically just a stringified json\n * that is used as a state of a single Explore pane so it does not represent full Explore URL so some properties\n * may be omitted (they will be filled in with default values).\n *\n * @param urlState\n * @param compact this parameter is deprecated and will be removed in a future release.\n */\nexport function serializeStateToUrlParam(urlState: Partial<ExploreUrlState>, compact?: boolean): string {\n  if (compact !== undefined) {\n    console.warn('`compact` parameter is deprecated and will be removed in a future release');\n  }\n  return JSON.stringify(urlState);\n}\n\n/**\n * Converts RawTimeRange to a string that is stored in the URL\n * - relative - stays as it is (e.g. \"now\")\n * - absolute - converted to ms\n */\nexport const toURLRange = (range: RawTimeRange): URLRange => {\n  let from = range.from;\n  if (isDateTime(from)) {\n    from = from.valueOf().toString();\n  }\n\n  let to = range.to;\n  if (isDateTime(to)) {\n    to = to.valueOf().toString();\n  }\n\n  return {\n    from,\n    to,\n  };\n};\n"],"names":["keyValue"],"mappings":"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"}