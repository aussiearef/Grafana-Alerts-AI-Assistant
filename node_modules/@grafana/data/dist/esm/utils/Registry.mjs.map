{"version":3,"file":"Registry.mjs","sources":["../../../src/utils/Registry.ts"],"sourcesContent":["import { PluginState } from '../types/plugin';\nimport { SelectableValue } from '../types/select';\n\nexport interface RegistryItem {\n  id: string; // Unique Key -- saved in configs\n  name: string; // Display Name, can change without breaking configs\n  description?: string;\n  aliasIds?: string[]; // when the ID changes, we may want backwards compatibility ('current' => 'last')\n\n  /**\n   * Some extensions should not be user selectable\n   *  like: 'all' and 'any' matchers;\n   */\n  excludeFromPicker?: boolean;\n\n  /**\n   * Optional feature state\n   */\n  state?: PluginState;\n}\n\nexport interface RegistryItemWithOptions<TOptions = any> extends RegistryItem {\n  /**\n   * Convert the options to a string\n   */\n  getOptionsDisplayText?: (options: TOptions) => string;\n\n  /**\n   * Default options used if nothing else is specified\n   */\n  defaultOptions?: TOptions;\n}\n\ninterface RegistrySelectInfo {\n  options: Array<SelectableValue<string>>;\n  current: Array<SelectableValue<string>>;\n}\n\nexport class Registry<T extends RegistryItem> {\n  private ordered: T[] = [];\n  private byId = new Map<string, T>();\n  private initialized = false;\n\n  constructor(private init?: () => T[]) {\n    this.init = init;\n  }\n\n  setInit = (init: () => T[]) => {\n    if (this.initialized) {\n      throw new Error('Registry already initialized');\n    }\n    this.init = init;\n  };\n\n  getIfExists(id: string | undefined): T | undefined {\n    if (!this.initialized) {\n      this.initialize();\n    }\n\n    if (id) {\n      return this.byId.get(id);\n    }\n\n    return undefined;\n  }\n\n  private initialize() {\n    if (this.init) {\n      for (const ext of this.init()) {\n        this.register(ext);\n      }\n    }\n    this.sort();\n    this.initialized = true;\n  }\n\n  get(id: string): T {\n    const v = this.getIfExists(id);\n    if (!v) {\n      throw new Error(`\"${id}\" not found in: ${this.list().map((v) => v.id)}`);\n    }\n    return v;\n  }\n\n  selectOptions(current?: string[], filter?: (ext: T) => boolean): RegistrySelectInfo {\n    if (!this.initialized) {\n      this.initialize();\n    }\n\n    const select: RegistrySelectInfo = {\n      options: [],\n      current: [],\n    };\n\n    const currentOptions: Record<string, SelectableValue<string>> = {};\n    if (current) {\n      for (const id of current) {\n        currentOptions[id] = {};\n      }\n    }\n\n    for (const ext of this.ordered) {\n      if (ext.excludeFromPicker) {\n        continue;\n      }\n      if (filter && !filter(ext)) {\n        continue;\n      }\n\n      const option = {\n        value: ext.id,\n        label: ext.name,\n        description: ext.description,\n      };\n\n      if (ext.state === PluginState.alpha) {\n        option.label += ' (alpha)';\n      }\n\n      select.options.push(option);\n      if (currentOptions[ext.id]) {\n        currentOptions[ext.id] = option;\n      }\n    }\n\n    if (current) {\n      // this makes sure we preserve the order of ids\n      select.current = Object.values(currentOptions);\n    }\n\n    return select;\n  }\n\n  /**\n   * Return a list of values by ID, or all values if not specified\n   */\n  list(ids?: string[]): T[] {\n    if (!this.initialized) {\n      this.initialize();\n    }\n\n    if (ids) {\n      const found: T[] = [];\n      for (const id of ids) {\n        const v = this.getIfExists(id);\n        if (v) {\n          found.push(v);\n        }\n      }\n      return found;\n    }\n\n    return this.ordered;\n  }\n\n  isEmpty(): boolean {\n    if (!this.initialized) {\n      this.initialize();\n    }\n\n    return this.ordered.length === 0;\n  }\n\n  register(ext: T) {\n    if (this.byId.has(ext.id)) {\n      throw new Error('Duplicate Key:' + ext.id);\n    }\n\n    this.byId.set(ext.id, ext);\n    this.ordered.push(ext);\n\n    if (ext.aliasIds) {\n      for (const alias of ext.aliasIds) {\n        if (!this.byId.has(alias)) {\n          this.byId.set(alias, ext);\n        }\n      }\n    }\n\n    if (this.initialized) {\n      this.sort();\n    }\n  }\n\n  private sort() {\n    // TODO sort the list\n  }\n}\n"],"names":["v"],"mappings":"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"}