{"version":3,"file":"calculateField.mjs","sources":["../../../../src/transformations/transformers/calculateField.ts"],"sourcesContent":["import { defaults } from 'lodash';\nimport { map } from 'rxjs/operators';\n\nimport { getTimeField } from '../../dataframe/processDataFrame';\nimport { getFieldDisplayName } from '../../field/fieldState';\nimport { NullValueMode } from '../../types/data';\nimport { DataFrame, FieldType, Field } from '../../types/dataFrame';\nimport { DataTransformContext, DataTransformerInfo } from '../../types/transformations';\nimport { BinaryOperationID, binaryOperators } from '../../utils/binaryOperators';\nimport { UnaryOperationID, unaryOperators } from '../../utils/unaryOperators';\nimport { doStandardCalcs, fieldReducers, ReducerID } from '../fieldReducer';\nimport { getFieldMatcher } from '../matchers';\nimport { FieldMatcherID } from '../matchers/ids';\n\nimport { ensureColumnsTransformer } from './ensureColumns';\nimport { DataTransformerID } from './ids';\nimport { noopTransformer } from './noop';\n\nexport enum CalculateFieldMode {\n  ReduceRow = 'reduceRow',\n  CumulativeFunctions = 'cumulativeFunctions',\n  WindowFunctions = 'windowFunctions',\n  BinaryOperation = 'binary',\n  UnaryOperation = 'unary',\n  Index = 'index',\n}\n\nexport enum WindowSizeMode {\n  Percentage = 'percentage',\n  Fixed = 'fixed',\n}\n\nexport enum WindowAlignment {\n  Trailing = 'trailing',\n  Centered = 'centered',\n}\n\nexport interface ReduceOptions {\n  include?: string[]; // Assume all fields\n  reducer: ReducerID;\n  nullValueMode?: NullValueMode;\n}\n\nexport interface CumulativeOptions {\n  field?: string;\n  reducer: ReducerID;\n}\n\nexport interface WindowOptions extends CumulativeOptions {\n  windowSize?: number;\n  windowSizeMode?: WindowSizeMode;\n  windowAlignment?: WindowAlignment;\n}\n\nexport interface UnaryOptions {\n  operator: UnaryOperationID;\n  fieldName: string;\n}\n\nexport interface BinaryOptions {\n  left: BinaryValue;\n  operator: BinaryOperationID;\n  right: BinaryValue;\n}\n\nexport interface BinaryValue {\n  fixed?: string;\n  matcher?: { id?: FieldMatcherID; options?: string };\n}\n\ninterface IndexOptions {\n  asPercentile: boolean;\n}\n\nconst defaultReduceOptions: ReduceOptions = {\n  reducer: ReducerID.sum,\n};\n\nexport const defaultWindowOptions: WindowOptions = {\n  reducer: ReducerID.mean,\n  windowAlignment: WindowAlignment.Trailing,\n  windowSizeMode: WindowSizeMode.Percentage,\n  windowSize: 0.1,\n};\n\nconst defaultBinaryOptions: BinaryOptions = {\n  left: { fixed: '' },\n  operator: BinaryOperationID.Add,\n  right: { fixed: '' },\n};\n\nconst defaultUnaryOptions: UnaryOptions = {\n  operator: UnaryOperationID.Abs,\n  fieldName: '',\n};\n\nexport interface CalculateFieldTransformerOptions {\n  // True/False or auto\n  timeSeries?: boolean;\n  mode: CalculateFieldMode; // defaults to 'reduce'\n\n  // Only one should be filled\n  reduce?: ReduceOptions;\n  window?: WindowOptions;\n  cumulative?: CumulativeOptions;\n  binary?: BinaryOptions;\n  unary?: UnaryOptions;\n  index?: IndexOptions;\n\n  // Remove other fields\n  replaceFields?: boolean;\n\n  // Output field properties\n  alias?: string; // The output field name\n  // TODO: config?: FieldConfig; or maybe field overrides? since the UI exists\n}\n\ntype ValuesCreator = (data: DataFrame) => unknown[] | undefined;\n\nexport const calculateFieldTransformer: DataTransformerInfo<CalculateFieldTransformerOptions> = {\n  id: DataTransformerID.calculateField,\n  name: 'Add field from calculation',\n  description: 'Use the row values to calculate a new field',\n  defaultOptions: {\n    mode: CalculateFieldMode.ReduceRow,\n    reduce: {\n      reducer: ReducerID.sum,\n    },\n  },\n  operator: (options, ctx) => (outerSource) => {\n    const mode = options.mode ?? CalculateFieldMode.ReduceRow;\n\n    const asTimeSeries = options.timeSeries !== false;\n\n    const right = options.binary?.right;\n    const rightVal = typeof right === 'string' ? right : typeof right === 'object' ? right.fixed : undefined;\n    const isBinaryFixed = mode === CalculateFieldMode.BinaryOperation && !Number.isNaN(Number(rightVal));\n\n    const needsSingleFrame = asTimeSeries && !isBinaryFixed;\n\n    const operator = needsSingleFrame\n      ? ensureColumnsTransformer.operator(null, ctx)\n      : noopTransformer.operator({}, ctx);\n\n    return outerSource.pipe(\n      operator,\n      map((data) => {\n        let creator: ValuesCreator | undefined = undefined;\n\n        switch (mode) {\n          case CalculateFieldMode.ReduceRow:\n            creator = getReduceRowCreator(defaults(options.reduce, defaultReduceOptions), data);\n            break;\n          case CalculateFieldMode.CumulativeFunctions:\n            creator = getCumulativeCreator(defaults(options.cumulative, defaultReduceOptions), data);\n            break;\n          case CalculateFieldMode.WindowFunctions:\n            creator = getWindowCreator(defaults(options.window, defaultWindowOptions), data);\n            break;\n          case CalculateFieldMode.UnaryOperation:\n            creator = getUnaryCreator(defaults(options.unary, defaultUnaryOptions), data);\n            break;\n          case CalculateFieldMode.BinaryOperation:\n            const fieldNames: string[] = [];\n            data.map((frame) => {\n              frame.fields.map((field) => {\n                fieldNames.push(field.name);\n              });\n            });\n            const binaryOptions = {\n              left: checkBinaryValueType(options.binary?.left ?? '', fieldNames),\n              operator: options.binary?.operator ?? defaultBinaryOptions.operator,\n              right: checkBinaryValueType(options.binary?.right ?? '', fieldNames),\n            };\n            options.binary = binaryOptions;\n            if (binaryOptions.left?.matcher?.id && binaryOptions.left?.matcher.id === FieldMatcherID.byType) {\n              const fieldType = binaryOptions.left.matcher.options;\n              const operator = binaryOperators.getIfExists(binaryOptions.operator);\n              const outFrames = data.map((frame) => {\n                const { timeField } = getTimeField(frame);\n                const newFields: Field[] = [];\n                let didAddNewFields = false;\n                if (timeField && options.timeSeries !== false) {\n                  newFields.push(timeField);\n                }\n                // For each field of type match, apply operator\n                frame.fields.map((field, index) => {\n                  if (!options.replaceFields && !newFields.includes(field)) {\n                    newFields.push(field);\n                  }\n                  if (field.type === fieldType) {\n                    const left = field.values;\n                    // TODO consolidate common creator logic\n                    const right = findFieldValuesWithNameOrConstant(\n                      frame,\n                      binaryOptions.right ?? defaultBinaryOptions.right,\n                      data,\n                      ctx\n                    );\n                    if (!left || !right || !operator) {\n                      return undefined;\n                    }\n\n                    const arr = new Array(left.length);\n                    for (let i = 0; i < arr.length; i++) {\n                      arr[i] = operator.operation(left[i], right[i]);\n                    }\n                    const newField = {\n                      ...field,\n                      name: `${field.name} ${options.binary?.operator ?? ''} ${options.binary?.right.matcher?.options ?? options.binary?.right.fixed}`,\n                      values: arr,\n                    };\n                    delete newField.state;\n                    newFields.push(newField);\n                    didAddNewFields = true;\n                  }\n                });\n\n                if (options.replaceFields && !didAddNewFields) {\n                  return undefined;\n                }\n\n                return { ...frame, fields: newFields };\n              });\n\n              return outFrames.filter((frame) => frame != null);\n            } else {\n              creator = getBinaryCreator(defaults(binaryOptions, defaultBinaryOptions), data, ctx);\n            }\n            break;\n          case CalculateFieldMode.Index:\n            return data.map((frame) => {\n              const indexArr = [...Array(frame.length).keys()];\n\n              if (options.index?.asPercentile) {\n                for (let i = 0; i < indexArr.length; i++) {\n                  indexArr[i] = indexArr[i] / indexArr.length;\n                }\n              }\n\n              const f = {\n                name: options.alias ?? 'Row',\n                type: FieldType.number,\n                values: indexArr,\n                config: options.index?.asPercentile ? { unit: 'percentunit' } : {},\n              };\n              return {\n                ...frame,\n                fields: options.replaceFields ? [f] : [...frame.fields, f],\n              };\n            });\n        }\n\n        // Nothing configured\n        if (!creator) {\n          return data;\n        }\n\n        const outFrames = data.map((frame) => {\n          // delegate field creation to the specific function\n          const values = creator!(frame);\n          if (!values) {\n            // if nothing was done to frame, omit it when replacing fields\n            if (options.replaceFields) {\n              return undefined;\n            }\n            return frame;\n          }\n\n          const field = {\n            name: getNameFromOptions(options),\n            type: FieldType.number,\n            config: {},\n            values,\n          };\n          let fields: Field[] = [];\n\n          // Replace all fields with the single field\n          if (options.replaceFields) {\n            const { timeField } = getTimeField(frame);\n            if (timeField && options.timeSeries !== false) {\n              fields = [timeField, field];\n            } else {\n              fields = [field];\n            }\n          } else {\n            fields = [...frame.fields, field];\n          }\n          return {\n            ...frame,\n            fields,\n          };\n        });\n        return outFrames.filter((frame) => frame != null);\n      })\n    );\n  },\n};\n\nfunction getWindowCreator(options: WindowOptions, allFrames: DataFrame[]): ValuesCreator {\n  if (options.windowSize! <= 0) {\n    throw new Error('Add field from calculation transformation - Window size must be larger than 0');\n  }\n\n  let matcher = getFieldMatcher({\n    id: FieldMatcherID.numeric,\n  });\n\n  if (options.field) {\n    matcher = getFieldMatcher({\n      id: FieldMatcherID.byNames,\n      options: {\n        names: [options.field],\n      },\n    });\n  }\n\n  return (frame: DataFrame) => {\n    const window = Math.ceil(\n      options.windowSize! * (options.windowSizeMode === WindowSizeMode.Percentage ? frame.length : 1)\n    );\n\n    // Find the columns that should be examined\n    let selectedField: Field | null = null;\n    for (const field of frame.fields) {\n      if (matcher(field, frame, allFrames)) {\n        selectedField = field;\n        break;\n      }\n    }\n\n    if (!selectedField) {\n      return;\n    }\n\n    if (![ReducerID.mean, ReducerID.stdDev, ReducerID.variance].includes(options.reducer)) {\n      throw new Error(`Add field from calculation transformation - Unsupported reducer: ${options.reducer}`);\n    }\n\n    if (options.windowAlignment === WindowAlignment.Centered) {\n      return getCenteredWindowValues(frame, options.reducer, selectedField, window);\n    } else {\n      return getTrailingWindowValues(frame, options.reducer, selectedField, window);\n    }\n  };\n}\n\nfunction getTrailingWindowValues(frame: DataFrame, reducer: ReducerID, selectedField: Field, window: number) {\n  const vals: number[] = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < frame.length; i++) {\n    if (reducer === ReducerID.mean) {\n      const currentValue = selectedField.values[i];\n      if (currentValue !== null && currentValue !== undefined) {\n        count++;\n        sum += currentValue;\n\n        if (i > window - 1) {\n          const value = selectedField.values[i - window];\n          if (value != null) {\n            sum -= value;\n            count--;\n          }\n        }\n      }\n      vals.push(count === 0 ? 0 : sum / count);\n    } else if (reducer === ReducerID.variance) {\n      const start = Math.max(0, i - window + 1);\n      const end = i + 1;\n      vals.push(calculateVariance(selectedField.values.slice(start, end)));\n    } else if (reducer === ReducerID.stdDev) {\n      const start = Math.max(0, i - window + 1);\n      const end = i + 1;\n      vals.push(calculateStdDev(selectedField.values.slice(start, end)));\n    }\n  }\n  return vals;\n}\n\nfunction getCenteredWindowValues(frame: DataFrame, reducer: ReducerID, selectedField: Field, window: number) {\n  const vals: number[] = [];\n  let sum = 0;\n  let count = 0;\n  // Current value (i) is included in the leading part of the window. Which means if the window size is odd,\n  // the leading part of the window will be larger than the trailing part.\n  const leadingPartOfWindow = Math.ceil(window / 2) - 1;\n  const trailingPartOfWindow = Math.floor(window / 2);\n  for (let i = 0; i < frame.length; i++) {\n    const first = i - trailingPartOfWindow;\n    const last = i + leadingPartOfWindow;\n    if (reducer === ReducerID.mean) {\n      if (i === 0) {\n        // We're at the start and need to prime the leading part of the window\n        for (let x = 0; x < leadingPartOfWindow + 1 && x < selectedField.values.length; x++) {\n          if (selectedField.values[x] != null) {\n            sum += selectedField.values[x];\n            count++;\n          }\n        }\n      } else {\n        if (last < selectedField.values.length) {\n          // Last is inside the data and should be added.\n          if (selectedField.values[last] != null) {\n            sum += selectedField.values[last];\n            count++;\n          }\n        }\n        if (first > 0) {\n          // Remove values that have fallen outside of the window, if the start of the window isn't outside of the data.\n          if (selectedField.values[first - 1] != null) {\n            sum -= selectedField.values[first - 1];\n            count--;\n          }\n        }\n      }\n      vals.push(count === 0 ? 0 : sum / count);\n    } else if (reducer === ReducerID.variance) {\n      const windowVals = selectedField.values.slice(\n        Math.max(0, first),\n        Math.min(last + 1, selectedField.values.length)\n      );\n      vals.push(calculateVariance(windowVals));\n    } else if (reducer === ReducerID.stdDev) {\n      const windowVals = selectedField.values.slice(\n        Math.max(0, first),\n        Math.min(last + 1, selectedField.values.length)\n      );\n      vals.push(calculateStdDev(windowVals));\n    }\n  }\n  return vals;\n}\n\nfunction calculateVariance(vals: number[]): number {\n  if (vals.length < 1) {\n    return 0;\n  }\n  let squareSum = 0;\n  let runningMean = 0;\n  let nonNullCount = 0;\n  for (let i = 0; i < vals.length; i++) {\n    const currentValue = vals[i];\n    if (currentValue != null) {\n      nonNullCount++;\n      let _oldMean = runningMean;\n      runningMean += (currentValue - _oldMean) / nonNullCount;\n      squareSum += (currentValue - _oldMean) * (currentValue - runningMean);\n    }\n  }\n  if (nonNullCount === 0) {\n    return 0;\n  }\n  const variance = squareSum / nonNullCount;\n  return variance;\n}\n\nfunction calculateStdDev(vals: number[]): number {\n  return Math.sqrt(calculateVariance(vals));\n}\n\nfunction getCumulativeCreator(options: CumulativeOptions, allFrames: DataFrame[]): ValuesCreator {\n  let matcher = getFieldMatcher({\n    id: FieldMatcherID.numeric,\n  });\n\n  if (options.field) {\n    matcher = getFieldMatcher({\n      id: FieldMatcherID.byNames,\n      options: {\n        names: [options.field],\n      },\n    });\n  }\n\n  if (![ReducerID.mean, ReducerID.sum].includes(options.reducer)) {\n    throw new Error(`Add field from calculation transformation - Unsupported reducer: ${options.reducer}`);\n  }\n\n  return (frame: DataFrame) => {\n    // Find the columns that should be examined\n    let selectedField: Field | null = null;\n    for (const field of frame.fields) {\n      if (matcher(field, frame, allFrames)) {\n        selectedField = field;\n        break;\n      }\n    }\n\n    if (!selectedField) {\n      return;\n    }\n\n    const vals: number[] = [];\n\n    let total = 0;\n    for (let i = 0; i < frame.length; i++) {\n      total += selectedField.values[i] ?? 0;\n      if (options.reducer === ReducerID.sum) {\n        vals.push(total);\n      } else if (options.reducer === ReducerID.mean) {\n        vals.push(total / (i + 1));\n      }\n    }\n\n    return vals;\n  };\n}\n\nfunction getReduceRowCreator(options: ReduceOptions, allFrames: DataFrame[]): ValuesCreator {\n  let matcher = getFieldMatcher({\n    id: FieldMatcherID.numeric,\n  });\n\n  if (options.include && options.include.length) {\n    matcher = getFieldMatcher({\n      id: FieldMatcherID.byNames,\n      options: {\n        names: options.include,\n      },\n    });\n  }\n\n  const info = fieldReducers.get(options.reducer);\n\n  if (!info) {\n    throw new Error(`Unknown reducer: ${options.reducer}`);\n  }\n\n  const reducer = info.reduce ?? doStandardCalcs;\n  const ignoreNulls = options.nullValueMode === NullValueMode.Ignore;\n  const nullAsZero = options.nullValueMode === NullValueMode.AsZero;\n\n  return (frame: DataFrame) => {\n    // Find the columns that should be examined\n    const columns = [];\n    for (const field of frame.fields) {\n      if (matcher(field, frame, allFrames)) {\n        columns.push(field.values);\n      }\n    }\n\n    // Prepare a \"fake\" field for the row\n    const size = columns.length;\n    const row: Field = {\n      name: 'temp',\n      values: new Array(size),\n      type: FieldType.number,\n      config: {},\n    };\n    const vals: number[] = [];\n\n    for (let i = 0; i < frame.length; i++) {\n      for (let j = 0; j < size; j++) {\n        row.values[j] = columns[j][i];\n      }\n\n      vals.push(reducer(row, ignoreNulls, nullAsZero)[options.reducer]);\n    }\n\n    return vals;\n  };\n}\n\nfunction findFieldValuesWithNameOrConstant(\n  frame: DataFrame,\n  value: BinaryValue,\n  allFrames: DataFrame[],\n  ctx: DataTransformContext\n): number[] | undefined {\n  if (!value) {\n    return undefined;\n  }\n\n  if (value.matcher && value.matcher.id === FieldMatcherID.byName) {\n    const name = value.matcher.options ?? '';\n\n    for (const f of frame.fields) {\n      if (name === getFieldDisplayName(f, frame, allFrames)) {\n        if (f.type === FieldType.boolean) {\n          return f.values.map((v) => (v ? 1 : 0));\n        }\n        return f.values;\n      }\n    }\n  }\n\n  const v = parseFloat(value.fixed ?? value.matcher?.options ?? '');\n  if (!isNaN(v)) {\n    return new Array(frame.length).fill(v);\n  }\n\n  return undefined;\n}\n\nfunction getBinaryCreator(options: BinaryOptions, allFrames: DataFrame[], ctx: DataTransformContext): ValuesCreator {\n  const operator = binaryOperators.getIfExists(options.operator);\n\n  return (frame: DataFrame) => {\n    const left = findFieldValuesWithNameOrConstant(frame, options.left, allFrames, ctx);\n    const right = findFieldValuesWithNameOrConstant(frame, options.right, allFrames, ctx);\n    if (!left || !right || !operator) {\n      return undefined;\n    }\n\n    const arr = new Array(left.length);\n    for (let i = 0; i < arr.length; i++) {\n      arr[i] = operator.operation(left[i], right[i]);\n    }\n    return arr;\n  };\n}\n\nexport function checkBinaryValueType(value: BinaryValue | string, names: string[]): BinaryValue {\n  // Support old binary value structure\n  if (typeof value === 'string') {\n    if (isNaN(Number(value))) {\n      return { matcher: { id: FieldMatcherID.byName, options: value } };\n    } else {\n      // If it's a number, check if matches name, otherwise store as fixed number value\n      if (names.includes(value)) {\n        return { matcher: { id: FieldMatcherID.byName, options: value } };\n      } else {\n        return { fixed: value };\n      }\n    }\n  }\n  // Pass through new BinaryValue structure\n  return value;\n}\n\nfunction getUnaryCreator(options: UnaryOptions, allFrames: DataFrame[]): ValuesCreator {\n  const operator = unaryOperators.getIfExists(options.operator);\n\n  return (frame: DataFrame) => {\n    let value: number[] = [];\n\n    for (const f of frame.fields) {\n      if (options.fieldName === getFieldDisplayName(f, frame, allFrames) && f.type === FieldType.number) {\n        value = f.values;\n      }\n    }\n\n    if (!value.length || !operator) {\n      return undefined;\n    }\n\n    const arr = new Array(value.length);\n    for (let i = 0; i < arr.length; i++) {\n      arr[i] = operator.operation(value[i]);\n    }\n\n    return arr;\n  };\n}\n\nexport function getNameFromOptions(options: CalculateFieldTransformerOptions) {\n  if (options.alias?.length) {\n    return options.alias;\n  }\n\n  switch (options.mode) {\n    case CalculateFieldMode.CumulativeFunctions: {\n      const { cumulative } = options;\n      return `cumulative ${cumulative?.reducer ?? ''}${cumulative?.field ? `(${cumulative.field})` : ''}`;\n    }\n    case CalculateFieldMode.WindowFunctions: {\n      const { window } = options;\n      return `${window?.windowAlignment ?? ''} moving ${window?.reducer ?? ''}${\n        window?.field ? `(${window.field})` : ''\n      }`;\n    }\n    case CalculateFieldMode.UnaryOperation: {\n      const { unary } = options;\n      return `${unary?.operator ?? ''}${unary?.fieldName ? `(${unary.fieldName})` : ''}`;\n    }\n    case CalculateFieldMode.BinaryOperation: {\n      const { binary } = options;\n      const alias = `${binary?.left?.matcher?.options ?? binary?.left?.fixed ?? ''} ${binary?.operator ?? ''} ${binary?.right?.matcher?.options ?? binary?.right?.fixed ?? ''}`;\n\n      //Remove $ signs as they will be interpolated and cause issues. Variables can still be used\n      //in alias but shouldn't in the autogenerated name\n      return alias.replace(/\\$/g, '');\n    }\n    case CalculateFieldMode.ReduceRow:\n      {\n        const r = fieldReducers.getIfExists(options.reduce?.reducer);\n        if (r) {\n          return r.name;\n        }\n      }\n      break;\n    case CalculateFieldMode.Index:\n      return 'Row';\n  }\n\n  return 'math';\n}\n"],"names":["_a","_b","operator","outFrames","_c","_d","_e","_f","_g","right","v"],"mappings":"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"}