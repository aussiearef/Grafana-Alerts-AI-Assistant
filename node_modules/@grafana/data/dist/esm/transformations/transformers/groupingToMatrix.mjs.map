{"version":3,"file":"groupingToMatrix.mjs","sources":["../../../../src/transformations/transformers/groupingToMatrix.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { getFieldDisplayName } from '../../field/fieldState';\nimport { DataFrame, Field } from '../../types/dataFrame';\nimport {\n  SpecialValue,\n  DataTransformerInfo,\n  TransformationApplicabilityLevels,\n  DataTransformContext,\n} from '../../types/transformations';\nimport { fieldMatchers } from '../matchers';\nimport { FieldMatcherID } from '../matchers/ids';\n\nimport { DataTransformerID } from './ids';\n\nexport interface GroupingToMatrixTransformerOptions {\n  columnField?: string;\n  rowField?: string;\n  valueField?: string;\n  emptyValue?: SpecialValue;\n}\n\nconst DEFAULT_COLUMN_FIELD = 'Time';\nconst DEFAULT_ROW_FIELD = 'Time';\nconst DEFAULT_VALUE_FIELD = 'Value';\nconst DEFAULT_EMPTY_VALUE = SpecialValue.Empty;\n\n// grafana-data does not have access to runtime so we are accessing the window object\n// to get access to the feature toggle\n// eslint-disable-next-line\nconst supportDataplaneFallback = (window as any)?.grafanaBootData?.settings?.featureToggles?.dataplaneFrontendFallback;\n\nexport const groupingToMatrixTransformer: DataTransformerInfo<GroupingToMatrixTransformerOptions> = {\n  id: DataTransformerID.groupingToMatrix,\n  name: 'Grouping to Matrix',\n  description: 'Groups series by field and return a matrix visualisation',\n  defaultOptions: {\n    columnField: DEFAULT_COLUMN_FIELD,\n    rowField: DEFAULT_ROW_FIELD,\n    valueField: DEFAULT_VALUE_FIELD,\n  },\n  /**\n   * Grouping to matrix requires at least 3 fields to work.\n   */\n  isApplicable: (data: DataFrame[]) => {\n    let numFields = 0;\n\n    for (const frame of data) {\n      numFields += frame.fields.length;\n    }\n\n    return numFields >= 3\n      ? TransformationApplicabilityLevels.Applicable\n      : TransformationApplicabilityLevels.NotApplicable;\n  },\n  isApplicableDescription: (data: DataFrame[]) => {\n    let numFields = 0;\n\n    for (const frame of data) {\n      numFields += frame.fields.length;\n    }\n\n    return `Grouping to matrix requiers at least 3 fields to work. Currently there are ${numFields} fields.`;\n  },\n  operator: (options: GroupingToMatrixTransformerOptions, ctx: DataTransformContext) => (source) =>\n    source.pipe(\n      map((data) => {\n        const columnFieldMatch = options.columnField || DEFAULT_COLUMN_FIELD;\n        const rowFieldMatch = options.rowField || DEFAULT_ROW_FIELD;\n        const valueFieldMatch = options.valueField || DEFAULT_VALUE_FIELD;\n        const emptyValue = options.emptyValue || DEFAULT_EMPTY_VALUE;\n\n        // Accept only single queries\n        if (data.length !== 1) {\n          return data;\n        }\n\n        const frame = data[0];\n        const keyColumnField = findKeyField(frame, columnFieldMatch);\n        const keyRowField = findKeyField(frame, rowFieldMatch);\n        const valueField = findKeyField(frame, valueFieldMatch);\n        const rowColumnField = `${rowFieldMatch}\\\\${columnFieldMatch}`;\n\n        if (!keyColumnField || !keyRowField || !valueField) {\n          return data;\n        }\n\n        const columnValues = uniqueValues(keyColumnField.values);\n        const rowValues = uniqueValues(keyRowField.values);\n\n        const matrixValues: { [key: string]: { [key: string]: unknown } } = {};\n\n        for (let index = 0; index < valueField.values.length; index++) {\n          const columnName = keyColumnField.values[index];\n          const rowName = keyRowField.values[index];\n          const value = valueField.values[index];\n\n          if (!matrixValues[columnName]) {\n            matrixValues[columnName] = {};\n          }\n\n          matrixValues[columnName][rowName] = value;\n        }\n\n        const fields: Field[] = [\n          {\n            name: rowColumnField,\n            values: rowValues,\n            type: keyRowField.type,\n            config: {},\n          },\n        ];\n\n        for (const columnName of columnValues) {\n          let values = [];\n          for (const rowName of rowValues) {\n            const value = matrixValues[columnName][rowName] ?? getSpecialValue(emptyValue);\n            values.push(value);\n          }\n\n          // setting the displayNameFromDS in prometheus overrides\n          // the column name based on value fields that are numbers\n          // this prevents columns that should be named 1000190\n          // from becoming named {__name__: 'metricName'}\n          if (supportDataplaneFallback && typeof columnName === 'number') {\n            valueField.config = { ...valueField.config, displayNameFromDS: undefined };\n          }\n\n          fields.push({\n            name: columnName?.toString() ?? null,\n            values: values,\n            config: valueField.config,\n            type: valueField.type,\n          });\n        }\n\n        return [\n          {\n            fields,\n            length: rowValues.length,\n          },\n        ];\n      })\n    ),\n};\n\nfunction uniqueValues<T>(values: T[]): T[] {\n  const unique = new Set<T>(values);\n  return Array.from(unique);\n}\n\nfunction findKeyField(frame: DataFrame, matchTitle: string): Field | null {\n  for (let fieldIndex = 0; fieldIndex < frame.fields.length; fieldIndex++) {\n    const field = frame.fields[fieldIndex];\n\n    // support for dataplane contract with Prometheus and change in location of field name\n    let matches: boolean;\n    if (supportDataplaneFallback) {\n      const matcher = fieldMatchers.get(FieldMatcherID.byName).get(matchTitle);\n      matches = matcher(field, frame, [frame]);\n    } else {\n      matches = matchTitle === getFieldDisplayName(field);\n    }\n\n    if (matches) {\n      return field;\n    }\n  }\n\n  return null;\n}\n\nfunction getSpecialValue(specialValue: SpecialValue) {\n  switch (specialValue) {\n    case SpecialValue.False:\n      return false;\n    case SpecialValue.True:\n      return true;\n    case SpecialValue.Null:\n      return null;\n    case SpecialValue.Zero:\n      return 0;\n    case SpecialValue.Empty:\n    default:\n      return '';\n  }\n}\n"],"names":["_a","_b"],"mappings":"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"}