{"version":3,"file":"rename.mjs","sources":["../../../../src/transformations/transformers/rename.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { getFieldDisplayName } from '../../field/fieldState';\nimport { DataFrame, Field } from '../../types/dataFrame';\nimport { DataTransformerInfo } from '../../types/transformations';\n\nimport { DataTransformerID } from './ids';\n\nexport interface RenameFieldsTransformerOptions {\n  renameByName: Record<string, string>;\n}\n\nexport const renameFieldsTransformer: DataTransformerInfo<RenameFieldsTransformerOptions> = {\n  id: DataTransformerID.rename,\n  name: 'Rename fields by name',\n  description: 'Rename fields based on configuration given by user',\n  defaultOptions: {\n    renameByName: {},\n  },\n\n  /**\n   * Return a modified copy of the series. If the transform is not or should not\n   * be applied, just return the input series\n   */\n  operator: (options) => (source) =>\n    source.pipe(\n      map((data) => {\n        const renamer = createRenamer(options.renameByName);\n\n        if (!Array.isArray(data) || data.length === 0) {\n          return data;\n        }\n\n        return data.map((frame) => ({\n          ...frame,\n          fields: renamer(frame),\n        }));\n      })\n    ),\n};\n\nconst createRenamer =\n  (renameByName: Record<string, string>) =>\n  (frame: DataFrame): Field[] => {\n    if (!renameByName || Object.keys(renameByName).length === 0) {\n      return frame.fields;\n    }\n\n    return frame.fields.map((field) => {\n      const displayName = getFieldDisplayName(field, frame);\n      const renameTo = renameByName[displayName];\n\n      if (typeof renameTo !== 'string' || renameTo.length === 0) {\n        return field;\n      }\n\n      return {\n        ...field,\n        config: {\n          ...field.config,\n          displayName: renameTo,\n        },\n        state: {\n          ...field.state,\n          displayName: renameTo,\n        },\n      };\n    });\n  };\n"],"names":[],"mappings":";;;;AAYO,MAAM,uBAA+E,GAAA;AAAA,EAC1F,IAAI,iBAAkB,CAAA,MAAA;AAAA,EACtB,IAAM,EAAA,uBAAA;AAAA,EACN,WAAa,EAAA,oDAAA;AAAA,EACb,cAAgB,EAAA;AAAA,IACd,cAAc;AAAC,GACjB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAU,EAAA,CAAC,OAAY,KAAA,CAAC,WACtB,MAAO,CAAA,IAAA;AAAA,IACL,GAAA,CAAI,CAAC,IAAS,KAAA;AACZ,MAAM,MAAA,OAAA,GAAU,aAAc,CAAA,OAAA,CAAQ,YAAY,CAAA;AAElD,MAAA,IAAI,CAAC,KAAM,CAAA,OAAA,CAAQ,IAAI,CAAK,IAAA,IAAA,CAAK,WAAW,CAAG,EAAA;AAC7C,QAAO,OAAA,IAAA;AAAA;AAGT,MAAO,OAAA,IAAA,CAAK,GAAI,CAAA,CAAC,KAAW,MAAA;AAAA,QAC1B,GAAG,KAAA;AAAA,QACH,MAAA,EAAQ,QAAQ,KAAK;AAAA,OACrB,CAAA,CAAA;AAAA,KACH;AAAA;AAEP;AAEA,MAAM,aACJ,GAAA,CAAC,YACD,KAAA,CAAC,KAA8B,KAAA;AAC7B,EAAA,IAAI,CAAC,YAAgB,IAAA,MAAA,CAAO,KAAK,YAAY,CAAA,CAAE,WAAW,CAAG,EAAA;AAC3D,IAAA,OAAO,KAAM,CAAA,MAAA;AAAA;AAGf,EAAA,OAAO,KAAM,CAAA,MAAA,CAAO,GAAI,CAAA,CAAC,KAAU,KAAA;AACjC,IAAM,MAAA,WAAA,GAAc,mBAAoB,CAAA,KAAA,EAAO,KAAK,CAAA;AACpD,IAAM,MAAA,QAAA,GAAW,aAAa,WAAW,CAAA;AAEzC,IAAA,IAAI,OAAO,QAAA,KAAa,QAAY,IAAA,QAAA,CAAS,WAAW,CAAG,EAAA;AACzD,MAAO,OAAA,KAAA;AAAA;AAGT,IAAO,OAAA;AAAA,MACL,GAAG,KAAA;AAAA,MACH,MAAQ,EAAA;AAAA,QACN,GAAG,KAAM,CAAA,MAAA;AAAA,QACT,WAAa,EAAA;AAAA,OACf;AAAA,MACA,KAAO,EAAA;AAAA,QACL,GAAG,KAAM,CAAA,KAAA;AAAA,QACT,WAAa,EAAA;AAAA;AACf,KACF;AAAA,GACD,CAAA;AACH,CAAA;;;;"}