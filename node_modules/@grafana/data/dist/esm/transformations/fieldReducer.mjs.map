{"version":3,"file":"fieldReducer.mjs","sources":["../../../src/transformations/fieldReducer.ts"],"sourcesContent":["// Libraries\nimport { isNumber } from 'lodash';\n\nimport { NullValueMode } from '../types/data';\nimport { Field, FieldCalcs, FieldType } from '../types/dataFrame';\nimport { Registry, RegistryItem } from '../utils/Registry';\n\nexport enum ReducerID {\n  sum = 'sum',\n  max = 'max',\n  min = 'min',\n  logmin = 'logmin',\n  mean = 'mean',\n  variance = 'variance',\n  stdDev = 'stdDev',\n  last = 'last',\n  median = 'median',\n  first = 'first',\n  count = 'count',\n  range = 'range',\n  diff = 'diff',\n  diffperc = 'diffperc',\n  delta = 'delta',\n  step = 'step',\n  firstNotNull = 'firstNotNull',\n  lastNotNull = 'lastNotNull',\n  changeCount = 'changeCount',\n  distinctCount = 'distinctCount',\n  allIsZero = 'allIsZero',\n  allIsNull = 'allIsNull',\n  allValues = 'allValues',\n  uniqueValues = 'uniqueValues',\n  p1 = 'p1',\n  p2 = 'p2',\n  p3 = 'p3',\n  p4 = 'p4',\n  p5 = 'p5',\n  p6 = 'p6',\n  p7 = 'p7',\n  p8 = 'p8',\n  p9 = 'p9',\n  p10 = 'p10',\n  p11 = 'p11',\n  p12 = 'p12',\n  p13 = 'p13',\n  p14 = 'p14',\n  p15 = 'p15',\n  p16 = 'p16',\n  p17 = 'p17',\n  p18 = 'p18',\n  p19 = 'p19',\n  p20 = 'p20',\n  p21 = 'p21',\n  p22 = 'p22',\n  p23 = 'p23',\n  p24 = 'p24',\n  p25 = 'p25',\n  p26 = 'p26',\n  p27 = 'p27',\n  p28 = 'p28',\n  p29 = 'p29',\n  p30 = 'p30',\n  p31 = 'p31',\n  p32 = 'p32',\n  p33 = 'p33',\n  p34 = 'p34',\n  p35 = 'p35',\n  p36 = 'p36',\n  p37 = 'p37',\n  p38 = 'p38',\n  p39 = 'p39',\n  p40 = 'p40',\n  p41 = 'p41',\n  p42 = 'p42',\n  p43 = 'p43',\n  p44 = 'p44',\n  p45 = 'p45',\n  p46 = 'p46',\n  p47 = 'p47',\n  p48 = 'p48',\n  p49 = 'p49',\n  p50 = 'p50',\n  p51 = 'p51',\n  p52 = 'p52',\n  p53 = 'p53',\n  p54 = 'p54',\n  p55 = 'p55',\n  p56 = 'p56',\n  p57 = 'p57',\n  p58 = 'p58',\n  p59 = 'p59',\n  p60 = 'p60',\n  p61 = 'p61',\n  p62 = 'p62',\n  p63 = 'p63',\n  p64 = 'p64',\n  p65 = 'p65',\n  p66 = 'p66',\n  p67 = 'p67',\n  p68 = 'p68',\n  p69 = 'p69',\n  p70 = 'p70',\n  p71 = 'p71',\n  p72 = 'p72',\n  p73 = 'p73',\n  p74 = 'p74',\n  p75 = 'p75',\n  p76 = 'p76',\n  p77 = 'p77',\n  p78 = 'p78',\n  p79 = 'p79',\n  p80 = 'p80',\n  p81 = 'p81',\n  p82 = 'p82',\n  p83 = 'p83',\n  p84 = 'p84',\n  p85 = 'p85',\n  p86 = 'p86',\n  p87 = 'p87',\n  p88 = 'p88',\n  p89 = 'p89',\n  p90 = 'p90',\n  p91 = 'p91',\n  p92 = 'p92',\n  p93 = 'p93',\n  p94 = 'p94',\n  p95 = 'p95',\n  p96 = 'p96',\n  p97 = 'p97',\n  p98 = 'p98',\n  p99 = 'p99',\n}\n\nexport function getFieldTypeForReducer(id: ReducerID, fallback: FieldType): FieldType {\n  return id === ReducerID.count\n    ? FieldType.number\n    : id === ReducerID.allIsNull || id === ReducerID.allIsZero\n      ? FieldType.boolean\n      : fallback;\n}\n\nexport function isReducerID(id: string): id is ReducerID {\n  return Object.keys(ReducerID).includes(id);\n}\n\n// Internal function\ntype FieldReducer = (field: Field, ignoreNulls: boolean, nullAsZero: boolean) => FieldCalcs;\n\nexport interface FieldReducerInfo extends RegistryItem {\n  // Internal details\n  emptyInputResult?: unknown; // typically null, but some things like 'count' & 'sum' should be zero\n  standard: boolean; // The most common stats can all be calculated in a single pass\n  preservesUnits: boolean; // Whether this reducer preserves units, certain ones don't e.g. count, distinct count, etc,\n  reduce?: FieldReducer;\n}\n\ninterface ReduceFieldOptions {\n  field: Field;\n  reducers: string[]; // The stats to calculate\n}\n\n/**\n * @returns an object with a key for each selected stat\n * NOTE: This will also modify the 'field.state' object,\n * leaving values in a cache until cleared.\n */\nexport function reduceField(options: ReduceFieldOptions): FieldCalcs {\n  const { field, reducers } = options;\n\n  if (!field || !reducers || reducers.length < 1) {\n    return {};\n  }\n\n  if (field.state?.calcs) {\n    // Find the values we need to calculate\n    const missing: string[] = [];\n    for (const s of reducers) {\n      if (!field.state.calcs.hasOwnProperty(s)) {\n        missing.push(s);\n      }\n    }\n    if (missing.length < 1) {\n      return {\n        ...field.state.calcs,\n      };\n    }\n  }\n  if (!field.state) {\n    field.state = {};\n  }\n\n  const queue = fieldReducers.list(reducers);\n\n  // Return early for empty series\n  // This lets the concrete implementations assume at least one row\n  const data = field.values;\n  if (data && data.length < 1) {\n    const calcs: FieldCalcs = { ...field.state.calcs };\n    for (const reducer of queue) {\n      calcs[reducer.id] = reducer.emptyInputResult !== null ? reducer.emptyInputResult : null;\n    }\n    return (field.state.calcs = calcs);\n  }\n\n  // Default to Ignore for nullValueMode.\n  const { nullValueMode = NullValueMode.Ignore } = field.config;\n\n  const ignoreNulls = nullValueMode === NullValueMode.Ignore;\n  const nullAsZero = nullValueMode === NullValueMode.AsZero;\n\n  // Avoid calculating all the standard stats if possible\n  if (queue.length === 1 && queue[0].reduce) {\n    const values = queue[0].reduce(field, ignoreNulls, nullAsZero);\n    field.state.calcs = {\n      ...field.state.calcs,\n      ...values,\n    };\n    return values;\n  }\n\n  // For now everything can use the standard stats\n  let values = doStandardCalcs(field, ignoreNulls, nullAsZero);\n\n  for (const reducer of queue) {\n    if (!values.hasOwnProperty(reducer.id) && reducer.reduce) {\n      values = {\n        ...values,\n        ...reducer.reduce(field, ignoreNulls, nullAsZero),\n      };\n    }\n  }\n\n  field.state.calcs = {\n    ...field.state.calcs,\n    ...values,\n  };\n  return values;\n}\n\n// ------------------------------------------------------------------------------\n//\n//  No Exported symbols below here.\n//\n// ------------------------------------------------------------------------------\n\nexport const fieldReducers = new Registry<FieldReducerInfo>(() => [\n  {\n    id: ReducerID.lastNotNull,\n    name: 'Last *',\n    description: 'Last non-null value (also excludes NaNs)',\n    standard: true,\n    aliasIds: ['current'],\n    reduce: calculateLastNotNull,\n    preservesUnits: true,\n  },\n  {\n    id: ReducerID.last,\n    name: 'Last',\n    description: 'Last value',\n    standard: true,\n    reduce: calculateLast,\n    preservesUnits: true,\n  },\n  {\n    id: ReducerID.firstNotNull,\n    name: 'First *',\n    description: 'First non-null value (also excludes NaNs)',\n    standard: true,\n    reduce: calculateFirstNotNull,\n    preservesUnits: true,\n  },\n  {\n    id: ReducerID.first,\n    name: 'First',\n    description: 'First Value',\n    standard: true,\n    reduce: calculateFirst,\n    preservesUnits: true,\n  },\n  { id: ReducerID.min, name: 'Min', description: 'Minimum Value', standard: true, preservesUnits: true },\n  { id: ReducerID.max, name: 'Max', description: 'Maximum Value', standard: true, preservesUnits: true },\n  {\n    id: ReducerID.mean,\n    name: 'Mean',\n    description: 'Average Value',\n    standard: true,\n    aliasIds: ['avg'],\n    preservesUnits: true,\n  },\n  {\n    id: ReducerID.median,\n    name: 'Median',\n    description: 'Median Value',\n    standard: false,\n    reduce: calculateMedian,\n    aliasIds: ['median'],\n    preservesUnits: true,\n  },\n  {\n    id: ReducerID.variance,\n    name: 'Variance',\n    description: 'Variance of all values in a field',\n    standard: false,\n    reduce: calculateStdDev,\n    preservesUnits: true,\n  },\n  {\n    id: ReducerID.stdDev,\n    name: 'StdDev',\n    description: 'Standard deviation of all values in a field',\n    standard: false,\n    reduce: calculateStdDev,\n    preservesUnits: true,\n  },\n  {\n    id: ReducerID.sum,\n    name: 'Total',\n    description: 'The sum of all values',\n    emptyInputResult: 0,\n    standard: true,\n    aliasIds: ['total'],\n    preservesUnits: true,\n  },\n  {\n    id: ReducerID.count,\n    name: 'Count',\n    description: 'Number of values in response',\n    emptyInputResult: 0,\n    standard: true,\n    preservesUnits: false,\n  },\n  {\n    id: ReducerID.range,\n    name: 'Range',\n    description: 'Difference between minimum and maximum values',\n    standard: true,\n    preservesUnits: true,\n  },\n  {\n    id: ReducerID.delta,\n    name: 'Delta',\n    description: 'Cumulative change in value',\n    standard: true,\n    preservesUnits: true,\n  },\n  {\n    id: ReducerID.step,\n    name: 'Step',\n    description: 'Minimum interval between values',\n    standard: true,\n    preservesUnits: true,\n  },\n  {\n    id: ReducerID.diff,\n    name: 'Difference',\n    description: 'Difference between first and last values',\n    standard: true,\n    preservesUnits: true,\n  },\n  {\n    id: ReducerID.logmin,\n    name: 'Min (above zero)',\n    description: 'Used for log min scale',\n    standard: true,\n    preservesUnits: true,\n  },\n  {\n    id: ReducerID.allIsZero,\n    name: 'All Zeros',\n    description: 'All values are zero',\n    emptyInputResult: false,\n    standard: true,\n    preservesUnits: true,\n  },\n  {\n    id: ReducerID.allIsNull,\n    name: 'All Nulls',\n    description: 'All values are null',\n    emptyInputResult: true,\n    standard: true,\n    preservesUnits: false,\n  },\n  {\n    id: ReducerID.changeCount,\n    name: 'Change Count',\n    description: 'Number of times the value changes',\n    standard: false,\n    reduce: calculateChangeCount,\n    preservesUnits: false,\n  },\n  {\n    id: ReducerID.distinctCount,\n    name: 'Distinct Count',\n    description: 'Number of distinct values',\n    standard: false,\n    reduce: calculateDistinctCount,\n    preservesUnits: false,\n  },\n  {\n    id: ReducerID.diffperc,\n    name: 'Difference percent',\n    description: 'Percentage difference between first and last values',\n    standard: true,\n    preservesUnits: false,\n  },\n  {\n    id: ReducerID.allValues,\n    name: 'All values',\n    description: 'Returns an array with all values',\n    standard: false,\n    reduce: (field: Field) => ({ allValues: [...field.values] }),\n    preservesUnits: false,\n  },\n  {\n    id: ReducerID.uniqueValues,\n    name: 'All unique values',\n    description: 'Returns an array with all unique values',\n    standard: false,\n    reduce: (field: Field) => ({\n      uniqueValues: [...new Set(field.values)],\n    }),\n    preservesUnits: false,\n  },\n  ...buildPercentileReducers(),\n]);\n\n// This `Array.from` will build an array of elements from 1 to 99\nconst buildPercentileReducers = (percentiles = [...Array.from({ length: 99 }, (_, i) => i + 1)]) => {\n  const percentileReducers: FieldReducerInfo[] = [];\n  const nth = (n: number) =>\n    n > 3 && n < 21 ? 'th' : n % 10 === 1 ? 'st' : n % 10 === 2 ? 'nd' : n % 10 === 3 ? 'rd' : 'th';\n\n  percentiles.forEach((p) => {\n    const percentile = p / 100;\n    const id = `p${p}`;\n    const name = `${p}${nth(p)} %`;\n    const description = `${p}${nth(p)} percentile value`;\n\n    percentileReducers.push({\n      id: id,\n      name: name,\n      description: description,\n      standard: false,\n      reduce: (field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs => {\n        return { [id]: calculatePercentile(field, percentile, ignoreNulls, nullAsZero) };\n      },\n      preservesUnits: true,\n    });\n  });\n  return percentileReducers;\n};\n\n// Used for test cases\nexport const defaultCalcs: FieldCalcs = {\n  sum: 0,\n  max: -Number.MAX_VALUE,\n  min: Number.MAX_VALUE,\n  logmin: Number.MAX_VALUE,\n  mean: null,\n  last: null,\n  first: null,\n  lastNotNull: null,\n  firstNotNull: null,\n  count: 0,\n  nonNullCount: 0,\n  allIsNull: true,\n  allIsZero: true,\n  range: null,\n  diff: null,\n  delta: 0,\n  step: Number.MAX_VALUE,\n  diffperc: 0,\n  // Just used for calculations -- not exposed as a stat\n  previousDeltaUp: true,\n};\n\nexport function doStandardCalcs(field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  const calcs: FieldCalcs = { ...defaultCalcs };\n\n  const data = field.values;\n\n  // early return for undefined / empty series\n  if (!data) {\n    return calcs;\n  }\n\n  const isNumberField = field.type === FieldType.number || field.type === FieldType.time;\n\n  for (let i = 0; i < data.length; i++) {\n    let currentValue = data[i];\n\n    if (i === 0) {\n      calcs.first = currentValue;\n    }\n\n    calcs.last = currentValue;\n\n    if (currentValue == null) {\n      if (ignoreNulls) {\n        continue;\n      }\n      if (nullAsZero) {\n        currentValue = 0;\n      }\n    }\n\n    calcs.count++;\n\n    if (currentValue != null && !Number.isNaN(currentValue)) {\n      // null || undefined || NaN\n      const isFirst = calcs.firstNotNull === null;\n      if (isFirst) {\n        calcs.firstNotNull = currentValue;\n      }\n\n      if (isNumberField) {\n        calcs.sum += currentValue;\n        calcs.allIsNull = false;\n        calcs.nonNullCount++;\n\n        if (!isFirst) {\n          const step = currentValue - calcs.lastNotNull!;\n          if (calcs.step > step) {\n            calcs.step = step; // the minimum interval\n          }\n\n          if (calcs.lastNotNull! > currentValue) {\n            // counter reset\n            calcs.previousDeltaUp = false;\n            if (i === data.length - 1) {\n              // reset on last\n              calcs.delta += currentValue;\n            }\n          } else {\n            if (calcs.previousDeltaUp) {\n              calcs.delta += step; // normal increment\n            } else {\n              calcs.delta += currentValue; // account for counter reset\n            }\n            calcs.previousDeltaUp = true;\n          }\n        }\n\n        if (currentValue > calcs.max) {\n          calcs.max = currentValue;\n        }\n\n        if (currentValue < calcs.min) {\n          calcs.min = currentValue;\n        }\n\n        if (currentValue < calcs.logmin && currentValue > 0) {\n          calcs.logmin = currentValue;\n        }\n      }\n\n      if (currentValue !== 0) {\n        calcs.allIsZero = false;\n      }\n\n      calcs.lastNotNull = currentValue;\n    }\n  }\n\n  if (calcs.max === -Number.MAX_VALUE) {\n    calcs.max = null;\n  }\n\n  if (calcs.min === Number.MAX_VALUE) {\n    calcs.min = null;\n  }\n\n  if (calcs.step === Number.MAX_VALUE) {\n    calcs.step = null;\n  }\n\n  if (calcs.nonNullCount > 0) {\n    calcs.mean = calcs.sum! / calcs.nonNullCount;\n  }\n\n  if (calcs.allIsNull) {\n    calcs.allIsZero = false;\n  }\n\n  if (calcs.max !== null && calcs.min !== null) {\n    calcs.range = calcs.max - calcs.min;\n  }\n\n  if (isNumber(calcs.firstNotNull) && isNumber(calcs.lastNotNull)) {\n    calcs.diff = calcs.lastNotNull - calcs.firstNotNull;\n  }\n\n  if (isNumber(calcs.firstNotNull) && isNumber(calcs.diff)) {\n    calcs.diffperc = (calcs.diff / calcs.firstNotNull) * 100;\n  }\n\n  return calcs;\n}\n\nfunction calculateFirst(field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  return { first: field.values[0] };\n}\n\nfunction calculateFirstNotNull(field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  const data = field.values;\n  for (let idx = 0; idx < data.length; idx++) {\n    const v = data[idx];\n    if (v != null && !Number.isNaN(v)) {\n      return { firstNotNull: v };\n    }\n  }\n  return { firstNotNull: null };\n}\n\nfunction calculateLast(field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  const data = field.values;\n  return { last: data[data.length - 1] };\n}\n\nfunction calculateLastNotNull(field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  const data = field.values;\n  let idx = data.length - 1;\n  while (idx >= 0) {\n    const v = data[idx--];\n    if (v != null && !Number.isNaN(v)) {\n      return { lastNotNull: v };\n    }\n  }\n  return { lastNotNull: null };\n}\n\n/** Calculates standard deviation and variance */\nfunction calculateStdDev(field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  // Only support number fields\n  if (!(field.type === FieldType.number || field.type === FieldType.time)) {\n    return { variance: 0, stdDev: 0 };\n  }\n\n  let squareSum = 0;\n  let runningMean = 0;\n  let runningNonNullCount = 0;\n  const data = field.values;\n  for (let i = 0; i < data.length; i++) {\n    const currentValue = data[i];\n    if (currentValue != null) {\n      runningNonNullCount++;\n      let _oldMean = runningMean;\n      runningMean += (currentValue - _oldMean) / runningNonNullCount;\n      squareSum += (currentValue - _oldMean) * (currentValue - runningMean);\n    }\n  }\n  if (runningNonNullCount > 0) {\n    const variance = squareSum / runningNonNullCount;\n    return { variance, stdDev: Math.sqrt(variance) };\n  }\n  return { variance: 0, stdDev: 0 };\n}\n\nfunction calculateChangeCount(field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  const data = field.values;\n  let count = 0;\n  let first = true;\n  let last = null;\n  for (let i = 0; i < data.length; i++) {\n    let currentValue = data[i];\n    if (currentValue === null) {\n      if (ignoreNulls) {\n        continue;\n      }\n      if (nullAsZero) {\n        currentValue = 0;\n      }\n    }\n    if (!first && last !== currentValue) {\n      count++;\n    }\n    first = false;\n    last = currentValue;\n  }\n\n  return { changeCount: count };\n}\n\nfunction calculateDistinctCount(field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  const data = field.values;\n  const distinct = new Set();\n  for (let i = 0; i < data.length; i++) {\n    let currentValue = data[i];\n    if (currentValue === null) {\n      if (ignoreNulls) {\n        continue;\n      }\n      if (nullAsZero) {\n        currentValue = 0;\n      }\n    }\n    distinct.add(currentValue);\n  }\n  return { distinctCount: distinct.size };\n}\n\nfunction calculatePercentile(field: Field, percentile: number, ignoreNulls: boolean, nullAsZero: boolean): number {\n  let data = field.values;\n\n  if (ignoreNulls) {\n    data = data.filter((value) => value !== null);\n  }\n  if (nullAsZero) {\n    data = data.map((value) => (value === null ? 0 : value));\n  }\n\n  const sorted = data.slice().sort((a, b) => a - b);\n  const index = Math.round((sorted.length - 1) * percentile);\n  return sorted[index];\n}\n\nfunction calculateMedian(field: Field<number>, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  const numbers: number[] = [];\n\n  for (let i = 0; i < field.values.length; i++) {\n    let currentValue = field.values[i];\n\n    if (currentValue == null) {\n      if (ignoreNulls) {\n        continue;\n      }\n      if (nullAsZero) {\n        currentValue = 0;\n      }\n    }\n\n    numbers.push(currentValue);\n  }\n\n  numbers.sort((a, b) => a - b);\n\n  const mid = Math.floor(numbers.length / 2);\n\n  if (numbers.length % 2 === 0) {\n    return { median: (numbers[mid - 1] + numbers[mid]) / 2 };\n  } else {\n    return { median: numbers[mid] };\n  }\n}\n"],"names":["ReducerID","values"],"mappings":"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CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KAAA;AACN,EAAAA,WAAA,KAAM,CAAA,GAAA,KA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"}