{"version":3,"file":"usePluginLinks.mjs","sources":["../../../../src/services/pluginExtensions/usePluginLinks.ts"],"sourcesContent":["import { PluginExtensionLink } from '@grafana/data';\n\nexport type UsePluginLinksOptions = {\n  extensionPointId: string;\n  context?: object | Record<string | symbol, unknown>;\n  limitPerPlugin?: number;\n};\n\nexport type UsePluginLinksResult = {\n  isLoading: boolean;\n  links: PluginExtensionLink[];\n};\n\nexport type UsePluginLinks = (options: UsePluginLinksOptions) => UsePluginLinksResult;\n\nlet singleton: UsePluginLinks | undefined;\n\nexport function setPluginLinksHook(hook: UsePluginLinks): void {\n  // We allow overriding the registry in tests\n  if (singleton && process.env.NODE_ENV !== 'test') {\n    throw new Error('setPluginLinksHook() function should only be called once, when Grafana is starting.');\n  }\n  singleton = hook;\n}\n\nexport function usePluginLinks(options: UsePluginLinksOptions): UsePluginLinksResult {\n  if (!singleton) {\n    throw new Error('setPluginLinksHook(options) can only be used after the Grafana instance has started.');\n  }\n  return singleton(options);\n}\n"],"names":[],"mappings":"AAeA,IAAI,SAAA;AAEG,SAAS,mBAAmB,IAA4B,EAAA;AAE7D,EAAA,IAAI,SAAa,IAAA,OAAA,CAAQ,GAAI,CAAA,QAAA,KAAa,MAAQ,EAAA;AAChD,IAAM,MAAA,IAAI,MAAM,qFAAqF,CAAA;AAAA;AAEvG,EAAY,SAAA,GAAA,IAAA;AACd;AAEO,SAAS,eAAe,OAAsD,EAAA;AACnF,EAAA,IAAI,CAAC,SAAW,EAAA;AACd,IAAM,MAAA,IAAI,MAAM,sFAAsF,CAAA;AAAA;AAExG,EAAA,OAAO,UAAU,OAAO,CAAA;AAC1B;;;;"}