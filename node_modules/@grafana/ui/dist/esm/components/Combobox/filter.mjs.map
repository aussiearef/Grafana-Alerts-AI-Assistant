{"version":3,"file":"filter.mjs","sources":["../../../../src/components/Combobox/filter.ts"],"sourcesContent":["import uFuzzy from '@leeoniya/ufuzzy';\n\nimport { ALL_OPTION_VALUE, ComboboxOption } from './types';\n\n// https://catonmat.net/my-favorite-regex :)\nconst REGEXP_NON_ASCII = /[^ -~]/m;\n// https://www.asciitable.com/\n// matches only these: `~!@#$%^&*()_+-=[]\\{}|;':\",./<>?\nconst REGEXP_ONLY_SYMBOLS = /^[\\x21-\\x2F\\x3A-\\x40\\x5B-\\x60\\x7B-\\x7E]+$/m;\n// limit max terms in needle that qualify for re-ordering\nconst outOfOrderLimit = 5;\n// beyond 25 chars fall back to substring search\nconst maxNeedleLength = 25;\n// beyond 5 terms fall back to substring match\nconst maxFuzzyTerms = 5;\n// when number of matches <= 1e4, do ranking + sorting by quality\nconst rankThreshold = 1e4;\n\n// typo tolerance mode\nconst uf = new uFuzzy({ intraMode: 1 });\n\nexport function itemToString<T extends string | number>(item?: ComboboxOption<T> | null) {\n  if (item == null) {\n    return '';\n  }\n  return item.label ?? item.value.toString();\n}\n\n//TODO: Remove when MutliCombobox async has been merged\nexport function itemFilter<T extends string | number>(inputValue: string) {\n  const lowerCasedInputValue = inputValue.toLowerCase();\n\n  return (item: ComboboxOption<T>) => {\n    return (\n      !inputValue ||\n      item.label?.toLowerCase().includes(lowerCasedInputValue) ||\n      item.value?.toString().toLowerCase().includes(lowerCasedInputValue) ||\n      item.value.toString() === ALL_OPTION_VALUE\n    );\n  };\n}\n\nexport function fuzzyFind<T extends string | number>(\n  options: Array<ComboboxOption<T>>,\n  haystack: string[],\n  needle: string\n) {\n  let matches: Array<ComboboxOption<T>> = [];\n\n  if (needle === '') {\n    matches = options;\n  }\n  // fallback to substring matches to avoid badness\n  else if (\n    // contains non-ascii\n    REGEXP_NON_ASCII.test(needle) ||\n    // is only ascii symbols (operators)\n    REGEXP_ONLY_SYMBOLS.test(needle) ||\n    // too long (often copy-paste from somewhere)\n    needle.length > maxNeedleLength ||\n    uf.split(needle).length > maxFuzzyTerms\n  ) {\n    for (let i = 0; i < haystack.length; i++) {\n      let item = haystack[i];\n\n      if (item.includes(needle)) {\n        matches.push(options[i]);\n      }\n    }\n  }\n  // fuzzy search\n  else {\n    const [idxs, info, order] = uf.search(haystack, needle, outOfOrderLimit, rankThreshold);\n\n    if (idxs?.length) {\n      if (info && order) {\n        matches = order.map((idx) => options[info.idx[idx]]);\n      } else {\n        matches = idxs.map((idx) => options[idx]);\n      }\n    }\n  }\n\n  return matches;\n}\n"],"names":[],"mappings":";;AAKA,MAAM,gBAAmB,GAAA,SAAA;AAGzB,MAAM,mBAAsB,GAAA,4CAAA;AAE5B,MAAM,eAAkB,GAAA,CAAA;AAExB,MAAM,eAAkB,GAAA,EAAA;AAExB,MAAM,aAAgB,GAAA,CAAA;AAEtB,MAAM,aAAgB,GAAA,GAAA;AAGtB,MAAM,KAAK,IAAI,MAAA,CAAO,EAAE,SAAA,EAAW,GAAG,CAAA;AAE/B,SAAS,aAAwC,IAAiC,EAAA;AArBzF,EAAA,IAAA,EAAA;AAsBE,EAAA,IAAI,QAAQ,IAAM,EAAA;AAChB,IAAO,OAAA,EAAA;AAAA;AAET,EAAA,OAAA,CAAO,EAAK,GAAA,IAAA,CAAA,KAAA,KAAL,IAAc,GAAA,EAAA,GAAA,IAAA,CAAK,MAAM,QAAS,EAAA;AAC3C;AAgBgB,SAAA,SAAA,CACd,OACA,EAAA,QAAA,EACA,MACA,EAAA;AACA,EAAA,IAAI,UAAoC,EAAC;AAEzC,EAAA,IAAI,WAAW,EAAI,EAAA;AACjB,IAAU,OAAA,GAAA,OAAA;AAAA,GACZ,MAAA;AAAA;AAAA,IAIE,gBAAA,CAAiB,KAAK,MAAM,CAAA;AAAA,IAE5B,mBAAA,CAAoB,KAAK,MAAM,CAAA;AAAA,IAE/B,OAAO,MAAS,GAAA,eAAA,IAChB,GAAG,KAAM,CAAA,MAAM,EAAE,MAAS,GAAA;AAAA,IAC1B;AACA,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,QAAA,CAAS,QAAQ,CAAK,EAAA,EAAA;AACxC,MAAI,IAAA,IAAA,GAAO,SAAS,CAAC,CAAA;AAErB,MAAI,IAAA,IAAA,CAAK,QAAS,CAAA,MAAM,CAAG,EAAA;AACzB,QAAQ,OAAA,CAAA,IAAA,CAAK,OAAQ,CAAA,CAAC,CAAC,CAAA;AAAA;AACzB;AACF,GAGG,MAAA;AACH,IAAM,MAAA,CAAC,IAAM,EAAA,IAAA,EAAM,KAAK,CAAA,GAAI,GAAG,MAAO,CAAA,QAAA,EAAU,MAAQ,EAAA,eAAA,EAAiB,aAAa,CAAA;AAEtF,IAAA,IAAI,gCAAM,MAAQ,EAAA;AAChB,MAAA,IAAI,QAAQ,KAAO,EAAA;AACjB,QAAU,OAAA,GAAA,KAAA,CAAM,IAAI,CAAC,GAAA,KAAQ,QAAQ,IAAK,CAAA,GAAA,CAAI,GAAG,CAAC,CAAC,CAAA;AAAA,OAC9C,MAAA;AACL,QAAA,OAAA,GAAU,KAAK,GAAI,CAAA,CAAC,GAAQ,KAAA,OAAA,CAAQ,GAAG,CAAC,CAAA;AAAA;AAC1C;AACF;AAGF,EAAO,OAAA,OAAA;AACT;;;;"}