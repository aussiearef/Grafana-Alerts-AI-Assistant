{"version":3,"file":"Combobox.mjs","sources":["../../../../src/components/Combobox/Combobox.tsx"],"sourcesContent":["import { cx } from '@emotion/css';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport { useCombobox } from 'downshift';\nimport { useId, useMemo } from 'react';\n\nimport { useStyles2 } from '../../themes';\nimport { t } from '../../utils/i18n';\nimport { Icon } from '../Icon/Icon';\nimport { AutoSizeInput } from '../Input/AutoSizeInput';\nimport { Input, Props as InputProps } from '../Input/Input';\nimport { Portal } from '../Portal/Portal';\nimport { ScrollContainer } from '../ScrollContainer/ScrollContainer';\n\nimport { AsyncError, NotFoundError } from './MessageRows';\nimport { itemToString } from './filter';\nimport { getComboboxStyles, MENU_OPTION_HEIGHT, MENU_OPTION_HEIGHT_DESCRIPTION } from './getComboboxStyles';\nimport { ComboboxOption } from './types';\nimport { useComboboxFloat } from './useComboboxFloat';\nimport { useOptions } from './useOptions';\n\n// TODO: It would be great if ComboboxOption[\"label\"] was more generic so that if consumers do pass it in (for async),\n// then the onChange handler emits ComboboxOption with the label as non-undefined.\nexport interface ComboboxBaseProps<T extends string | number>\n  extends Pick<\n    InputProps,\n    'placeholder' | 'autoFocus' | 'id' | 'aria-labelledby' | 'disabled' | 'loading' | 'invalid'\n  > {\n  /**\n   * An `X` appears in the UI, which clears the input and sets the value to `null`. Do not use if you have no `null` case.\n   */\n  isClearable?: boolean;\n  /**\n   * Allows the user to set a value which is not in the list of options.\n   */\n  createCustomValue?: boolean;\n\n  /**\n   * An array of options, or a function that returns a promise resolving to an array of options.\n   * If a function, it will be called when the menu is opened and on keypress with the current search query.\n   */\n  options: Array<ComboboxOption<T>> | ((inputValue: string) => Promise<Array<ComboboxOption<T>>>);\n\n  /**\n   * onChange handler is called with the newly selected option.\n   */\n  onChange: (option: ComboboxOption<T>) => void;\n\n  /**\n   * Current selected value. Most consumers should pass a scalar value (string | number). However, sometimes with Async\n   * it may be better to pass in an Option with a label to display.\n   */\n  value?: T | ComboboxOption<T> | null;\n\n  /**\n   * Defaults to full width of container. Number is a multiple of the spacing unit. 'auto' will size the input to the content.\n   * */\n  width?: number | 'auto';\n\n  /**\n   * Called when the input loses focus.\n   */\n  onBlur?: () => void;\n}\n\ntype ClearableConditionals<T extends number | string> =\n  | {\n      /**\n       * Allow the user to clear the selected value. `null` is emitted from the onChange handler\n       */\n      isClearable: true;\n      /**\n       * The onChange handler is called with `null` when clearing the Combobox.\n       */\n      onChange: (option: ComboboxOption<T> | null) => void;\n    }\n  | { isClearable?: false; onChange: (option: ComboboxOption<T>) => void };\n\nexport type AutoSizeConditionals =\n  | {\n      width: 'auto';\n      /**\n       * Needs to be set when width is 'auto' to prevent the input from shrinking too much\n       */\n      minWidth: number;\n      /**\n       * Recommended to set when width is 'auto' to prevent the input from growing too much.\n       */\n      maxWidth?: number;\n    }\n  | {\n      width?: number;\n      minWidth?: never;\n      maxWidth?: never;\n    };\n\nexport type ComboboxProps<T extends string | number> = ComboboxBaseProps<T> &\n  AutoSizeConditionals &\n  ClearableConditionals<T>;\n\nconst noop = () => {};\n\nexport const VIRTUAL_OVERSCAN_ITEMS = 4;\n\n/**\n * A performant Select replacement.\n *\n * @alpha\n */\nexport const Combobox = <T extends string | number>(props: ComboboxProps<T>) => {\n  const {\n    options: allOptions,\n    onChange,\n    value: valueProp,\n    placeholder: placeholderProp,\n    isClearable = false,\n    createCustomValue = false,\n    id,\n    width,\n    minWidth,\n    maxWidth,\n    'aria-labelledby': ariaLabelledBy,\n    autoFocus,\n    onBlur,\n    disabled,\n    loading,\n    invalid,\n  } = props;\n\n  // Value can be an actual scalar Value (string or number), or an Option (value + label), so\n  // get a consistent Value from it\n  const value = typeof valueProp === 'object' ? valueProp?.value : valueProp;\n\n  const {\n    options: filteredOptions,\n    updateOptions,\n    asyncLoading,\n    asyncError,\n  } = useOptions(props.options, createCustomValue);\n  const isAsync = typeof allOptions === 'function';\n\n  const selectedItemIndex = useMemo(() => {\n    if (isAsync) {\n      return null;\n    }\n\n    if (valueProp === undefined || valueProp === null) {\n      return null;\n    }\n\n    const index = allOptions.findIndex((option) => option.value === value);\n    if (index === -1) {\n      return null;\n    }\n\n    return index;\n  }, [valueProp, allOptions, value, isAsync]);\n\n  const selectedItem = useMemo(() => {\n    if (valueProp === undefined || valueProp === null) {\n      return null;\n    }\n\n    if (selectedItemIndex !== null && !isAsync) {\n      return allOptions[selectedItemIndex];\n    }\n\n    return typeof valueProp === 'object' ? valueProp : { value: valueProp, label: valueProp.toString() };\n  }, [selectedItemIndex, isAsync, valueProp, allOptions]);\n\n  const menuId = `downshift-${useId().replace(/:/g, '--')}-menu`;\n  const labelId = `downshift-${useId().replace(/:/g, '--')}-label`;\n\n  const styles = useStyles2(getComboboxStyles);\n\n  const virtualizerOptions = {\n    count: filteredOptions.length,\n    getScrollElement: () => scrollRef.current,\n    estimateSize: (index: number) =>\n      filteredOptions[index].description ? MENU_OPTION_HEIGHT_DESCRIPTION : MENU_OPTION_HEIGHT,\n    overscan: VIRTUAL_OVERSCAN_ITEMS,\n  };\n\n  const rowVirtualizer = useVirtualizer(virtualizerOptions);\n\n  const {\n    isOpen,\n    highlightedIndex,\n\n    getInputProps,\n    getMenuProps,\n    getItemProps,\n\n    selectItem,\n  } = useCombobox({\n    menuId,\n    labelId,\n    inputId: id,\n    items: filteredOptions,\n    itemToString,\n    selectedItem,\n\n    // Don't change downshift state in the onBlahChange handlers. Instead, use the stateReducer to make changes.\n    // Downshift calls change handlers on the render after so you can get sync/flickering issues if you change its state\n    // in them.\n    // Instead, stateReducer is called in the same tick as state changes, before that state is committed and rendered.\n\n    onSelectedItemChange: ({ selectedItem }) => {\n      onChange(selectedItem);\n    },\n\n    defaultHighlightedIndex: selectedItemIndex ?? 0,\n\n    scrollIntoView: () => {},\n\n    onIsOpenChange: ({ isOpen, inputValue }) => {\n      if (isOpen && inputValue === '') {\n        updateOptions(inputValue);\n      }\n    },\n\n    onHighlightedIndexChange: ({ highlightedIndex, type }) => {\n      if (type !== useCombobox.stateChangeTypes.MenuMouseLeave) {\n        rowVirtualizer.scrollToIndex(highlightedIndex);\n      }\n    },\n    onStateChange: ({ inputValue: newInputValue, type, selectedItem: newSelectedItem }) => {\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputChange:\n          updateOptions(newInputValue ?? '');\n\n          break;\n        default:\n          break;\n      }\n    },\n    stateReducer(state, actionAndChanges) {\n      let { changes } = actionAndChanges;\n      const menuBeingOpened = state.isOpen === false && changes.isOpen === true;\n      const menuBeingClosed = state.isOpen === true && changes.isOpen === false;\n\n      // Reset the input value when the menu is opened. If the menu is opened due to an input change\n      // then make sure we keep that.\n      // This will trigger onInputValueChange to load async options\n      if (menuBeingOpened && changes.inputValue === state.inputValue) {\n        changes = {\n          ...changes,\n          inputValue: '',\n        };\n      }\n\n      if (menuBeingClosed) {\n        // Flush the selected item to the input when the menu is closed\n        if (changes.selectedItem) {\n          changes = {\n            ...changes,\n            inputValue: itemToString(changes.selectedItem),\n          };\n        } else if (changes.inputValue !== '') {\n          // Otherwise if no selected value, clear any search from the input\n          changes = {\n            ...changes,\n            inputValue: '',\n          };\n        }\n      }\n\n      return changes;\n    },\n  });\n\n  const { inputRef, floatingRef, floatStyles, scrollRef } = useComboboxFloat(filteredOptions, isOpen);\n\n  const isAutoSize = width === 'auto';\n\n  const InputComponent = isAutoSize ? AutoSizeInput : Input;\n\n  const suffixIcon = asyncLoading\n    ? 'spinner'\n    : // If it's loading, show loading icon. Otherwise, icon indicating menu state\n      isOpen\n      ? 'search'\n      : 'angle-down';\n\n  const placeholder = (isOpen ? itemToString(selectedItem) : null) || placeholderProp;\n\n  return (\n    <div className={isAutoSize ? styles.addaptToParent : undefined}>\n      <InputComponent\n        width={isAutoSize ? undefined : width}\n        {...(isAutoSize ? { minWidth, maxWidth } : {})}\n        autoFocus={autoFocus}\n        onBlur={onBlur}\n        disabled={disabled}\n        loading={loading}\n        invalid={invalid}\n        className={styles.input}\n        suffix={\n          <>\n            {!!value && value === selectedItem?.value && isClearable && (\n              <Icon\n                name=\"times\"\n                className={styles.clear}\n                title={t('combobox.clear.title', 'Clear value')}\n                tabIndex={0}\n                role=\"button\"\n                onClick={() => {\n                  selectItem(null);\n                }}\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter' || e.key === ' ') {\n                    selectItem(null);\n                  }\n                }}\n              />\n            )}\n\n            <Icon name={suffixIcon} />\n          </>\n        }\n        {...getInputProps({\n          ref: inputRef,\n          /*  Empty onCall to avoid TS error\n           *  See issue here: https://github.com/downshift-js/downshift/issues/718\n           *  Downshift repo: https://github.com/downshift-js/downshift/tree/master\n           */\n          onChange: noop,\n          'aria-labelledby': ariaLabelledBy, // Label should be handled with the Field component\n          placeholder,\n        })}\n      />\n      <Portal>\n        <div\n          className={cx(styles.menu, !isOpen && styles.menuClosed)}\n          style={{\n            ...floatStyles,\n          }}\n          {...getMenuProps({\n            ref: floatingRef,\n            'aria-labelledby': ariaLabelledBy,\n          })}\n        >\n          {isOpen && (\n            <ScrollContainer showScrollIndicators maxHeight=\"inherit\" ref={scrollRef} padding={0.5}>\n              {!asyncError && (\n                <ul style={{ height: rowVirtualizer.getTotalSize() }} className={styles.menuUlContainer}>\n                  {rowVirtualizer.getVirtualItems().map((virtualRow) => {\n                    const item = filteredOptions[virtualRow.index];\n\n                    return (\n                      <li\n                        key={`${item.value}-${virtualRow.index}`}\n                        data-index={virtualRow.index}\n                        className={cx(\n                          styles.optionBasic,\n                          styles.option,\n                          selectedItem && item.value === selectedItem.value && styles.optionSelected,\n                          highlightedIndex === virtualRow.index && styles.optionFocused\n                        )}\n                        style={{\n                          height: virtualRow.size,\n                          transform: `translateY(${virtualRow.start}px)`,\n                        }}\n                        {...getItemProps({\n                          item: item,\n                          index: virtualRow.index,\n                        })}\n                      >\n                        <div className={styles.optionBody}>\n                          <span className={styles.optionLabel}>{item.label ?? item.value}</span>\n                          {item.description && <span className={styles.optionDescription}>{item.description}</span>}\n                        </div>\n                      </li>\n                    );\n                  })}\n                </ul>\n              )}\n              <div aria-live=\"polite\">\n                {asyncError && <AsyncError />}\n                {filteredOptions.length === 0 && !asyncError && <NotFoundError />}\n              </div>\n            </ScrollContainer>\n          )}\n        </div>\n      </Portal>\n    </div>\n  );\n};\n"],"names":["selectedItem","isOpen","highlightedIndex"],"mappings":"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"}