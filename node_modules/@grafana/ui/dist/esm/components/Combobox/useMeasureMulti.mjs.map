{"version":3,"file":"useMeasureMulti.mjs","sources":["../../../../src/components/Combobox/useMeasureMulti.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useMeasure } from 'react-use';\n\nimport { measureText } from '../../utils';\n\nimport { ComboboxOption } from './types';\n\nconst FONT_SIZE = 12;\nconst EXTRA_PILL_SIZE = 50;\nconst EXTRA_PILL_DISABLED_SIZE = 10;\nexport const MAX_SHOWN_ITEMS = 15;\n\n/**\n * Updates the number of shown items in the multi combobox based on the available width.\n */\nexport function useMeasureMulti<T extends string | number>(\n  selectedItems: Array<ComboboxOption<T>>,\n  width?: number | 'auto',\n  disabled?: boolean\n) {\n  const [shownItems, setShownItems] = useState<number>(selectedItems.length);\n  const [measureRef, { width: containerWidth }] = useMeasure<HTMLDivElement>();\n  const [counterMeasureRef, { width: counterWidth }] = useMeasure<HTMLDivElement>();\n  const [suffixMeasureRef, { width: suffixWidth }] = useMeasure<HTMLDivElement>();\n\n  const finalWidth = width && width !== 'auto' ? width : containerWidth;\n\n  useEffect(() => {\n    const maxWidth = finalWidth - counterWidth - suffixWidth;\n    let currWidth = 0;\n    for (let i = 0; i < selectedItems.length; i++) {\n      // Measure text width and add size of padding, separator and close button\n      currWidth +=\n        measureText(selectedItems[i].label || '', FONT_SIZE).width +\n        (disabled ? EXTRA_PILL_DISABLED_SIZE : EXTRA_PILL_SIZE);\n      if (currWidth > maxWidth) {\n        // If there is no space for that item, show the current number of items,\n        // but always show at least 1 item. Cap at maximum number of items.\n        setShownItems(Math.min(i, MAX_SHOWN_ITEMS) || 1);\n        break;\n      }\n      if (i === selectedItems.length - 1) {\n        // If it is the last item, show all items\n        setShownItems(selectedItems.length);\n      }\n    }\n  }, [finalWidth, counterWidth, suffixWidth, selectedItems, setShownItems, disabled]);\n\n  return { measureRef, counterMeasureRef, suffixMeasureRef, shownItems };\n}\n"],"names":[],"mappings":";;;;;;;;;AAOA,MAAM,SAAY,GAAA,EAAA;AAClB,MAAM,eAAkB,GAAA,EAAA;AACxB,MAAM,wBAA2B,GAAA,EAAA;AAC1B,MAAM,eAAkB,GAAA;AAKf,SAAA,eAAA,CACd,aACA,EAAA,KAAA,EACA,QACA,EAAA;AACA,EAAA,MAAM,CAAC,UAAY,EAAA,aAAa,CAAI,GAAA,QAAA,CAAiB,cAAc,MAAM,CAAA;AACzE,EAAA,MAAM,CAAC,UAAY,EAAA,EAAE,OAAO,cAAe,EAAC,IAAI,UAA2B,EAAA;AAC3E,EAAA,MAAM,CAAC,iBAAmB,EAAA,EAAE,OAAO,YAAa,EAAC,IAAI,UAA2B,EAAA;AAChF,EAAA,MAAM,CAAC,gBAAkB,EAAA,EAAE,OAAO,WAAY,EAAC,IAAI,UAA2B,EAAA;AAE9E,EAAA,MAAM,UAAa,GAAA,KAAA,IAAS,KAAU,KAAA,MAAA,GAAS,KAAQ,GAAA,cAAA;AAEvD,EAAA,SAAA,CAAU,MAAM;AACd,IAAM,MAAA,QAAA,GAAW,aAAa,YAAe,GAAA,WAAA;AAC7C,IAAA,IAAI,SAAY,GAAA,CAAA;AAChB,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,aAAA,CAAc,QAAQ,CAAK,EAAA,EAAA;AAE7C,MACE,SAAA,IAAA,WAAA,CAAY,aAAc,CAAA,CAAC,CAAE,CAAA,KAAA,IAAS,IAAI,SAAS,CAAA,CAAE,KACpD,IAAA,QAAA,GAAW,wBAA2B,GAAA,eAAA,CAAA;AACzC,MAAA,IAAI,YAAY,QAAU,EAAA;AAGxB,QAAA,aAAA,CAAc,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,eAAe,KAAK,CAAC,CAAA;AAC/C,QAAA;AAAA;AAEF,MAAI,IAAA,CAAA,KAAM,aAAc,CAAA,MAAA,GAAS,CAAG,EAAA;AAElC,QAAA,aAAA,CAAc,cAAc,MAAM,CAAA;AAAA;AACpC;AACF,GACF,EAAG,CAAC,UAAY,EAAA,YAAA,EAAc,aAAa,aAAe,EAAA,aAAA,EAAe,QAAQ,CAAC,CAAA;AAElF,EAAA,OAAO,EAAE,UAAA,EAAY,iBAAmB,EAAA,gBAAA,EAAkB,UAAW,EAAA;AACvE;;;;"}