{"version":3,"file":"DateTimePicker.mjs","sources":["../../../../../src/components/DateTimePickers/DateTimePicker/DateTimePicker.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { autoUpdate, flip, shift, useFloating } from '@floating-ui/react';\nimport { useDialog } from '@react-aria/dialog';\nimport { FocusScope } from '@react-aria/focus';\nimport { useOverlay } from '@react-aria/overlays';\nimport { FormEvent, ReactNode, useCallback, useEffect, useRef, useState } from 'react';\nimport * as React from 'react';\nimport Calendar from 'react-calendar';\nimport { useMedia } from 'react-use';\n\nimport {\n  dateTimeFormat,\n  DateTime,\n  dateTime,\n  GrafanaTheme2,\n  isDateTime,\n  dateTimeForTimeZone,\n  getTimeZone,\n  TimeZone,\n} from '@grafana/data';\nimport { Components } from '@grafana/e2e-selectors';\n\nimport { useStyles2, useTheme2 } from '../../../themes';\nimport { t, Trans } from '../../../utils/i18n';\nimport { Button } from '../../Button/Button';\nimport { InlineField } from '../../Forms/InlineField';\nimport { Icon } from '../../Icon/Icon';\nimport { Input } from '../../Input/Input';\nimport { Stack } from '../../Layout/Stack/Stack';\nimport { getModalStyles } from '../../Modal/getModalStyles';\nimport { Portal } from '../../Portal/Portal';\nimport { TimeOfDayPicker, POPUP_CLASS_NAME } from '../TimeOfDayPicker';\nimport { getBodyStyles } from '../TimeRangePicker/CalendarBody';\nimport { isValid } from '../utils';\nimport { adjustDateForReactCalendar } from '../utils/adjustDateForReactCalendar';\n\nexport interface Props {\n  /** Input date for the component */\n  date?: DateTime;\n  /** Callback for returning the selected date */\n  onChange: (date?: DateTime) => void;\n  /** label for the input field */\n  label?: ReactNode;\n  /** Set the latest selectable date */\n  maxDate?: Date;\n  /** Set the minimum selectable date */\n  minDate?: Date;\n  /** Display seconds on the time picker */\n  showSeconds?: boolean;\n  /** Set the hours that can't be selected */\n  disabledHours?: () => number[];\n  /** Set the minutes that can't be selected */\n  disabledMinutes?: () => number[];\n  /** Set the seconds that can't be selected */\n  disabledSeconds?: () => number[];\n  /** Can input be cleared/have empty values */\n  clearable?: boolean;\n  /** Custom timezone for the date/time display */\n  timeZone?: TimeZone;\n}\n\nexport const DateTimePicker = ({\n  date,\n  maxDate,\n  minDate,\n  label,\n  onChange,\n  disabledHours,\n  disabledMinutes,\n  disabledSeconds,\n  timeZone,\n  showSeconds = true,\n  clearable = false,\n}: Props) => {\n  const [isOpen, setOpen] = useState(false);\n\n  const ref = useRef<HTMLDivElement>(null);\n  const { overlayProps, underlayProps } = useOverlay(\n    {\n      onClose: () => setOpen(false),\n      isDismissable: true,\n      isOpen,\n      shouldCloseOnInteractOutside: (element) => {\n        const popupElement = document.getElementsByClassName(POPUP_CLASS_NAME)[0];\n        return !(popupElement && popupElement.contains(element));\n      },\n    },\n    ref\n  );\n  const { dialogProps } = useDialog({}, ref);\n\n  const theme = useTheme2();\n  const { modalBackdrop } = useStyles2(getModalStyles);\n  const isFullscreen = useMedia(`(min-width: ${theme.breakpoints.values.lg}px)`);\n  const styles = useStyles2(getStyles);\n\n  // the order of middleware is important!\n  // see https://floating-ui.com/docs/arrow#order\n  const middleware = [\n    flip({\n      // see https://floating-ui.com/docs/flip#combining-with-shift\n      crossAxis: false,\n      boundary: document.body,\n    }),\n    shift(),\n  ];\n\n  const { refs, floatingStyles } = useFloating({\n    open: isOpen,\n    placement: 'bottom-start',\n    onOpenChange: setOpen,\n    middleware,\n    whileElementsMounted: autoUpdate,\n    strategy: 'fixed',\n  });\n\n  const onApply = useCallback(\n    (date: DateTime) => {\n      setOpen(false);\n      onChange(date);\n    },\n    [onChange]\n  );\n\n  const onOpen = useCallback(\n    (event: FormEvent<HTMLElement>) => {\n      event.preventDefault();\n      setOpen(true);\n    },\n    [setOpen]\n  );\n\n  return (\n    <div data-testid=\"date-time-picker\" style={{ position: 'relative' }}>\n      <DateTimeInput\n        date={date}\n        onChange={onChange}\n        isFullscreen={isFullscreen}\n        onOpen={onOpen}\n        label={label}\n        ref={refs.setReference}\n        showSeconds={showSeconds}\n        clearable={clearable}\n        timeZone={timeZone}\n      />\n      {isOpen ? (\n        isFullscreen ? (\n          <Portal>\n            <FocusScope contain autoFocus restoreFocus>\n              <div ref={ref} {...overlayProps} {...dialogProps}>\n                <DateTimeCalendar\n                  date={date}\n                  onChange={onApply}\n                  isFullscreen={true}\n                  onClose={() => setOpen(false)}\n                  maxDate={maxDate}\n                  minDate={minDate}\n                  ref={refs.setFloating}\n                  style={floatingStyles}\n                  showSeconds={showSeconds}\n                  disabledHours={disabledHours}\n                  disabledMinutes={disabledMinutes}\n                  disabledSeconds={disabledSeconds}\n                  timeZone={timeZone}\n                />\n              </div>\n            </FocusScope>\n          </Portal>\n        ) : (\n          <Portal>\n            <div className={modalBackdrop} {...underlayProps} />\n            <FocusScope contain autoFocus restoreFocus>\n              <div ref={ref} {...overlayProps} {...dialogProps}>\n                <div className={styles.modal}>\n                  <DateTimeCalendar\n                    date={date}\n                    maxDate={maxDate}\n                    minDate={minDate}\n                    onChange={onApply}\n                    isFullscreen={false}\n                    onClose={() => setOpen(false)}\n                    showSeconds={showSeconds}\n                    disabledHours={disabledHours}\n                    disabledMinutes={disabledMinutes}\n                    disabledSeconds={disabledSeconds}\n                    timeZone={timeZone}\n                  />\n                </div>\n              </div>\n            </FocusScope>\n          </Portal>\n        )\n      ) : null}\n    </div>\n  );\n};\n\ninterface DateTimeCalendarProps extends Omit<Props, 'label' | 'clearable' | 'onChange'> {\n  onChange: (date: DateTime) => void;\n  onClose: () => void;\n  isFullscreen: boolean;\n  style?: React.CSSProperties;\n}\n\ntype InputProps = Pick<Props, 'onChange' | 'label' | 'date' | 'showSeconds' | 'clearable' | 'timeZone'> & {\n  isFullscreen: boolean;\n  onOpen: (event: FormEvent<HTMLElement>) => void;\n};\n\ntype InputState = {\n  value: string;\n  invalid: boolean;\n};\n\nconst DateTimeInput = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ date, label, onChange, onOpen, timeZone, showSeconds = true, clearable = false }, ref) => {\n    const styles = useStyles2(getStyles);\n    const format = showSeconds ? 'YYYY-MM-DD HH:mm:ss' : 'YYYY-MM-DD HH:mm';\n    const [internalDate, setInternalDate] = useState<InputState>(() => {\n      return {\n        value: date ? dateTimeFormat(date, { timeZone }) : !clearable ? dateTimeFormat(dateTime(), { timeZone }) : '',\n        invalid: false,\n      };\n    });\n\n    useEffect(() => {\n      if (date) {\n        const formattedDate = dateTimeFormat(date, { format, timeZone });\n        setInternalDate({\n          invalid: !isValid(formattedDate),\n          value: isDateTime(date) ? formattedDate : date,\n        });\n      }\n    }, [date, format, timeZone]);\n\n    const onChangeDate = useCallback((event: FormEvent<HTMLInputElement>) => {\n      const isInvalid = !isValid(event.currentTarget.value);\n      setInternalDate({\n        value: event.currentTarget.value,\n        invalid: isInvalid,\n      });\n    }, []);\n\n    const onBlur = useCallback(() => {\n      if (!internalDate.invalid && internalDate.value) {\n        const date = dateTimeForTimeZone(getTimeZone({ timeZone }), internalDate.value);\n        onChange(date);\n      }\n    }, [internalDate, onChange, timeZone]);\n\n    const clearInternalDate = useCallback(() => {\n      setInternalDate({ value: '', invalid: false });\n      onChange();\n    }, [onChange]);\n\n    const icon = (\n      <Button\n        aria-label={t('grafana-ui.date-time-picker.calendar-icon-label', 'Time picker')}\n        icon=\"calendar-alt\"\n        variant=\"secondary\"\n        onClick={onOpen}\n      />\n    );\n    return (\n      <InlineField label={label} invalid={!!(internalDate.value && internalDate.invalid)} className={styles.field}>\n        <Input\n          onChange={onChangeDate}\n          addonAfter={icon}\n          value={internalDate.value}\n          onBlur={onBlur}\n          data-testid={Components.DateTimePicker.input}\n          placeholder={t('grafana-ui.date-time-picker.select-placeholder', 'Select date/time')}\n          ref={ref}\n          suffix={\n            clearable &&\n            internalDate.value && <Icon name=\"times\" className={styles.clearIcon} onClick={clearInternalDate} />\n          }\n        />\n      </InlineField>\n    );\n  }\n);\n\nDateTimeInput.displayName = 'DateTimeInput';\n\nconst DateTimeCalendar = React.forwardRef<HTMLDivElement, DateTimeCalendarProps>(\n  (\n    {\n      date,\n      onClose,\n      onChange,\n      isFullscreen,\n      maxDate,\n      minDate,\n      style,\n      showSeconds = true,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n      timeZone,\n    },\n    ref\n  ) => {\n    const calendarStyles = useStyles2(getBodyStyles);\n    const styles = useStyles2(getStyles);\n\n    // need to keep these 2 separate in state since react-calendar doesn't support different timezones\n    const [timeOfDayDateTime, setTimeOfDayDateTime] = useState(() => {\n      if (date && date.isValid()) {\n        return dateTimeForTimeZone(getTimeZone({ timeZone }), date);\n      }\n\n      return dateTimeForTimeZone(getTimeZone({ timeZone }), new Date());\n    });\n    const [reactCalendarDate, setReactCalendarDate] = useState<Date>(() => {\n      if (date && date.isValid()) {\n        return adjustDateForReactCalendar(date.toDate(), getTimeZone({ timeZone }));\n      }\n\n      return adjustDateForReactCalendar(new Date(), getTimeZone({ timeZone }));\n    });\n\n    const onChangeDate = useCallback<NonNullable<React.ComponentProps<typeof Calendar>['onChange']>>((date) => {\n      if (date && !Array.isArray(date)) {\n        setReactCalendarDate(date);\n      }\n    }, []);\n\n    const onChangeTime = useCallback((date: DateTime) => {\n      setTimeOfDayDateTime(date);\n    }, []);\n\n    // here we need to stitch the 2 date objects back together\n    const handleApply = () => {\n      // we take the date that's set by TimeOfDayPicker\n      const newDate = dateTime(timeOfDayDateTime);\n\n      // and apply the date/month/year set by react-calendar\n      newDate.set('date', reactCalendarDate.getDate());\n      newDate.set('month', reactCalendarDate.getMonth());\n      newDate.set('year', reactCalendarDate.getFullYear());\n\n      onChange(newDate);\n    };\n\n    return (\n      <div className={cx(styles.container, { [styles.fullScreen]: isFullscreen })} style={style} ref={ref}>\n        <Calendar\n          next2Label={null}\n          prev2Label={null}\n          value={reactCalendarDate}\n          nextLabel={<Icon name=\"angle-right\" />}\n          nextAriaLabel={t('grafana-ui.date-time-picker.next-label', 'Next month')}\n          prevLabel={<Icon name=\"angle-left\" />}\n          prevAriaLabel={t('grafana-ui.date-time-picker.previous-label', 'Previous month')}\n          onChange={onChangeDate}\n          locale=\"en\"\n          className={calendarStyles.body}\n          tileClassName={calendarStyles.title}\n          maxDate={maxDate}\n          minDate={minDate}\n        />\n        <div className={styles.time}>\n          <TimeOfDayPicker\n            showSeconds={showSeconds}\n            onChange={onChangeTime}\n            value={timeOfDayDateTime}\n            disabledHours={disabledHours}\n            disabledMinutes={disabledMinutes}\n            disabledSeconds={disabledSeconds}\n          />\n        </div>\n        <Stack>\n          <Button type=\"button\" onClick={handleApply}>\n            <Trans i18nKey=\"grafana-ui.date-time-picker.apply\">Apply</Trans>\n          </Button>\n          <Button variant=\"secondary\" type=\"button\" onClick={onClose}>\n            <Trans i18nKey=\"grafana-ui.date-time-picker.cancel\">Cancel</Trans>\n          </Button>\n        </Stack>\n      </div>\n    );\n  }\n);\n\nDateTimeCalendar.displayName = 'DateTimeCalendar';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    padding: theme.spacing(1),\n    border: `1px ${theme.colors.border.weak} solid`,\n    borderRadius: theme.shape.radius.default,\n    backgroundColor: theme.colors.background.primary,\n    zIndex: theme.zIndex.modal,\n  }),\n  fullScreen: css({\n    position: 'absolute',\n  }),\n  time: css({\n    marginBottom: theme.spacing(2),\n  }),\n  modal: css({\n    position: 'fixed',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    zIndex: theme.zIndex.modal,\n    maxWidth: '280px',\n  }),\n  clearIcon: css({\n    cursor: 'pointer',\n  }),\n  field: css({\n    marginBottom: 0,\n    width: '100%',\n  }),\n});\n"],"names":["date"],"mappings":"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"}