{"version":3,"file":"SecretTextArea.mjs","sources":["../../../../src/components/SecretTextArea/SecretTextArea.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes/ThemeContext';\nimport { Button } from '../Button';\nimport { Box } from '../Layout/Box/Box';\nimport { Stack } from '../Layout/Stack/Stack';\nimport { TextArea } from '../TextArea/TextArea';\n\nexport type Props = React.ComponentProps<typeof TextArea> & {\n  /** TRUE if the secret was already configured. (It is needed as often the backend doesn't send back the actual secret, only the information that it was configured) */\n  isConfigured: boolean;\n  /** Called when the user clicks on the \"Reset\" button in order to clear the secret */\n  onReset: () => void;\n};\n\nexport const CONFIGURED_TEXT = 'configured';\nexport const RESET_BUTTON_TEXT = 'Reset';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    configuredStyle: css({\n      minHeight: theme.spacing(theme.components.height.md),\n      paddingTop: theme.spacing(0.5) /** Needed to mimic vertically centered text in an input box */,\n      resize: 'none',\n    }),\n  };\n};\n\n/**\n * Text area that does not disclose an already configured value but lets the user reset the current value and enter a new one.\n * Typically useful for asymmetric cryptography keys.\n */\nexport const SecretTextArea = ({ isConfigured, onReset, ...props }: Props) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Stack>\n      <Box>\n        {!isConfigured && <TextArea {...props} />}\n        {isConfigured && (\n          <TextArea\n            {...props}\n            rows={1}\n            disabled={true}\n            value={CONFIGURED_TEXT}\n            className={cx(styles.configuredStyle)}\n          />\n        )}\n      </Box>\n      {isConfigured && (\n        <Button onClick={onReset} variant=\"secondary\">\n          {RESET_BUTTON_TEXT}\n        </Button>\n      )}\n    </Stack>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;;AAkBO,MAAM,eAAkB,GAAA;AACxB,MAAM,iBAAoB,GAAA;AAEjC,MAAM,SAAA,GAAY,CAAC,KAAyB,KAAA;AAC1C,EAAO,OAAA;AAAA,IACL,iBAAiB,GAAI,CAAA;AAAA,MACnB,WAAW,KAAM,CAAA,OAAA,CAAQ,KAAM,CAAA,UAAA,CAAW,OAAO,EAAE,CAAA;AAAA,MACnD,UAAA,EAAY,KAAM,CAAA,OAAA,CAAQ,GAAG,CAAA;AAAA,MAC7B,MAAQ,EAAA;AAAA,KACT;AAAA,GACH;AACF,CAAA;AAMO,MAAM,iBAAiB,CAAC,EAAE,cAAc,OAAS,EAAA,GAAG,OAAmB,KAAA;AAC5E,EAAM,MAAA,MAAA,GAAS,WAAW,SAAS,CAAA;AACnC,EAAA,4BACG,KACC,EAAA,EAAA,QAAA,EAAA;AAAA,oBAAA,IAAA,CAAC,GACE,EAAA,EAAA,QAAA,EAAA;AAAA,MAAA,CAAC,YAAgB,oBAAA,GAAA,CAAC,QAAU,EAAA,EAAA,GAAG,KAAO,EAAA,CAAA;AAAA,MACtC,YACC,oBAAA,GAAA;AAAA,QAAC,QAAA;AAAA,QAAA;AAAA,UACE,GAAG,KAAA;AAAA,UACJ,IAAM,EAAA,CAAA;AAAA,UACN,QAAU,EAAA,IAAA;AAAA,UACV,KAAO,EAAA,eAAA;AAAA,UACP,SAAA,EAAW,EAAG,CAAA,MAAA,CAAO,eAAe;AAAA;AAAA;AACtC,KAEJ,EAAA,CAAA;AAAA,IACC,gCACE,GAAA,CAAA,MAAA,EAAA,EAAO,SAAS,OAAS,EAAA,OAAA,EAAQ,aAC/B,QACH,EAAA,iBAAA,EAAA;AAAA,GAEJ,EAAA,CAAA;AAEJ;;;;"}