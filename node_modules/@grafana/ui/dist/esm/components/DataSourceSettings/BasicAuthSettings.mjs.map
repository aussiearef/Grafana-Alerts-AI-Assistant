{"version":3,"file":"BasicAuthSettings.mjs","sources":["../../../../src/components/DataSourceSettings/BasicAuthSettings.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { InlineField } from '../../components/Forms/InlineField';\nimport { t } from '../../utils/i18n';\nimport { FormField } from '../FormField/FormField';\nimport { SecretFormField } from '../SecretFormField/SecretFormField';\n\nimport { HttpSettingsProps } from './types';\n\nexport const BasicAuthSettings = ({ dataSourceConfig, onChange }: HttpSettingsProps) => {\n  const password = dataSourceConfig.secureJsonData ? dataSourceConfig.secureJsonData.basicAuthPassword : '';\n\n  const onPasswordReset = () => {\n    onChange({\n      ...dataSourceConfig,\n      secureJsonData: {\n        ...dataSourceConfig.secureJsonData,\n        basicAuthPassword: '',\n      },\n      secureJsonFields: {\n        ...dataSourceConfig.secureJsonFields,\n        basicAuthPassword: false,\n      },\n    });\n  };\n\n  const onPasswordChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    onChange({\n      ...dataSourceConfig,\n      secureJsonData: {\n        ...dataSourceConfig.secureJsonData,\n        basicAuthPassword: event.currentTarget.value,\n      },\n    });\n  };\n\n  return (\n    <>\n      <InlineField disabled={dataSourceConfig.readOnly}>\n        <FormField\n          label={t('grafana-ui.data-source-basic-auth-settings.user-label', 'User')}\n          labelWidth={10}\n          inputWidth={18}\n          placeholder={t('grafana-ui.data-source-basic-auth-settings.user-placeholder', 'user')}\n          value={dataSourceConfig.basicAuthUser}\n          onChange={(event) => onChange({ ...dataSourceConfig, basicAuthUser: event.currentTarget.value })}\n        />\n      </InlineField>\n      <InlineField disabled={dataSourceConfig.readOnly}>\n        <SecretFormField\n          isConfigured={!!(dataSourceConfig.secureJsonFields && dataSourceConfig.secureJsonFields.basicAuthPassword)}\n          value={password || ''}\n          inputWidth={18}\n          labelWidth={10}\n          onReset={onPasswordReset}\n          onChange={onPasswordChange}\n        />\n      </InlineField>\n    </>\n  );\n};\n"],"names":[],"mappings":";;;;;;AASO,MAAM,iBAAoB,GAAA,CAAC,EAAE,gBAAA,EAAkB,UAAkC,KAAA;AACtF,EAAA,MAAM,QAAW,GAAA,gBAAA,CAAiB,cAAiB,GAAA,gBAAA,CAAiB,eAAe,iBAAoB,GAAA,EAAA;AAEvG,EAAA,MAAM,kBAAkB,MAAM;AAC5B,IAAS,QAAA,CAAA;AAAA,MACP,GAAG,gBAAA;AAAA,MACH,cAAgB,EAAA;AAAA,QACd,GAAG,gBAAiB,CAAA,cAAA;AAAA,QACpB,iBAAmB,EAAA;AAAA,OACrB;AAAA,MACA,gBAAkB,EAAA;AAAA,QAChB,GAAG,gBAAiB,CAAA,gBAAA;AAAA,QACpB,iBAAmB,EAAA;AAAA;AACrB,KACD,CAAA;AAAA,GACH;AAEA,EAAM,MAAA,gBAAA,GAAmB,CAAC,KAAkD,KAAA;AAC1E,IAAS,QAAA,CAAA;AAAA,MACP,GAAG,gBAAA;AAAA,MACH,cAAgB,EAAA;AAAA,QACd,GAAG,gBAAiB,CAAA,cAAA;AAAA,QACpB,iBAAA,EAAmB,MAAM,aAAc,CAAA;AAAA;AACzC,KACD,CAAA;AAAA,GACH;AAEA,EAAA,uBAEI,IAAA,CAAA,QAAA,EAAA,EAAA,QAAA,EAAA;AAAA,oBAAC,GAAA,CAAA,WAAA,EAAA,EAAY,QAAU,EAAA,gBAAA,CAAiB,QACtC,EAAA,QAAA,kBAAA,GAAA;AAAA,MAAC,SAAA;AAAA,MAAA;AAAA,QACC,KAAA,EAAO,CAAE,CAAA,uDAAA,EAAyD,MAAM,CAAA;AAAA,QACxE,UAAY,EAAA,EAAA;AAAA,QACZ,UAAY,EAAA,EAAA;AAAA,QACZ,WAAA,EAAa,CAAE,CAAA,6DAAA,EAA+D,MAAM,CAAA;AAAA,QACpF,OAAO,gBAAiB,CAAA,aAAA;AAAA,QACxB,QAAA,EAAU,CAAC,KAAA,KAAU,QAAS,CAAA,EAAE,GAAG,gBAAA,EAAkB,aAAe,EAAA,KAAA,CAAM,aAAc,CAAA,KAAA,EAAO;AAAA;AAAA,KAEnG,EAAA,CAAA;AAAA,oBACC,GAAA,CAAA,WAAA,EAAA,EAAY,QAAU,EAAA,gBAAA,CAAiB,QACtC,EAAA,QAAA,kBAAA,GAAA;AAAA,MAAC,eAAA;AAAA,MAAA;AAAA,QACC,cAAc,CAAC,EAAE,gBAAiB,CAAA,gBAAA,IAAoB,iBAAiB,gBAAiB,CAAA,iBAAA,CAAA;AAAA,QACxF,OAAO,QAAY,IAAA,EAAA;AAAA,QACnB,UAAY,EAAA,EAAA;AAAA,QACZ,UAAY,EAAA,EAAA;AAAA,QACZ,OAAS,EAAA,eAAA;AAAA,QACT,QAAU,EAAA;AAAA;AAAA,KAEd,EAAA;AAAA,GACF,EAAA,CAAA;AAEJ;;;;"}