import { jsxs, jsx } from 'react/jsx-runtime';
import { cx, css } from '@emotion/css';
import { memo, forwardRef } from 'react';
import '@grafana/data';
import { useTheme2, useStyles2 } from '../../themes/ThemeContext.mjs';
import 'micro-memoize';
import '@emotion/react';
import 'tinycolor2';
import { attachSkeleton } from '../../utils/skeleton.mjs';
import { Tag } from './Tag.mjs';

const TagListComponent = memo(
  forwardRef(
    ({ displayMax, tags, icon, onClick, className, getAriaLabel, getColorIndex }, ref) => {
      const theme = useTheme2();
      const styles = getStyles(theme, Boolean(displayMax && displayMax > 0));
      const numTags = tags.length;
      const tagsToDisplay = displayMax ? tags.slice(0, displayMax) : tags;
      return /* @__PURE__ */ jsxs("ul", { className: cx(styles.wrapper, className), "aria-label": "Tags", ref, children: [
        tagsToDisplay.map((tag, i) => /* @__PURE__ */ jsx("li", { className: styles.li, children: /* @__PURE__ */ jsx(
          Tag,
          {
            name: tag,
            icon,
            onClick,
            "aria-label": getAriaLabel == null ? undefined : getAriaLabel(tag, i),
            "data-tag-id": i,
            colorIndex: getColorIndex == null ? undefined : getColorIndex(tag, i)
          }
        ) }, tag)),
        displayMax && displayMax > 0 && numTags - displayMax > 0 && /* @__PURE__ */ jsxs("span", { className: styles.moreTagsLabel, children: [
          "+ ",
          numTags - displayMax
        ] })
      ] });
    }
  )
);
TagListComponent.displayName = "TagList";
const TagListSkeleton = ({ rootProps }) => {
  const styles = useStyles2(getSkeletonStyles);
  return /* @__PURE__ */ jsxs("div", { className: styles.container, ...rootProps, children: [
    /* @__PURE__ */ jsx(Tag.Skeleton, {}),
    /* @__PURE__ */ jsx(Tag.Skeleton, {})
  ] });
};
const TagList = attachSkeleton(TagListComponent, TagListSkeleton);
const getSkeletonStyles = (theme) => ({
  container: css({
    display: "flex",
    gap: theme.spacing(1)
  })
});
const getStyles = (theme, isTruncated) => {
  return {
    wrapper: css({
      position: "relative",
      alignItems: isTruncated ? "center" : "unset",
      display: "flex",
      flex: "1 1 auto",
      flexWrap: "wrap",
      flexShrink: isTruncated ? 0 : 1,
      justifyContent: "flex-end",
      gap: "6px"
    }),
    moreTagsLabel: css({
      color: theme.colors.text.secondary,
      fontSize: theme.typography.size.sm
    }),
    li: css({
      listStyle: "none"
    })
  };
};

export { TagList };
//# sourceMappingURL=TagList.mjs.map
