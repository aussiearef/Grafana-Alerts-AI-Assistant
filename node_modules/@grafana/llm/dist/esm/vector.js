import { getBackendSrv, logDebug } from '@grafana/runtime';
import { LLM_PLUGIN_ROUTE, setLLMPluginVersion } from './constants.js';

async function search(request) {
  const response = await getBackendSrv().post(
    "/api/plugins/grafana-llm-app/resources/vector/search",
    request,
    {
      headers: { "Content-Type": "application/json" }
    }
  );
  return response.results;
}
let loggedWarning = false;
const health = async () => {
  try {
    const settings = await getBackendSrv().get(`${LLM_PLUGIN_ROUTE}/settings`, void 0, void 0, {
      showSuccessAlert: false,
      showErrorAlert: false
    });
    if (!settings.enabled) {
      return { enabled: false, ok: false, error: "The Grafana LLM plugin is not enabled." };
    }
  } catch (e) {
    logDebug(String(e));
    logDebug(
      "Failed to check if the vector service is enabled. This is expected if the Grafana LLM plugin is not installed, and the above error can be ignored."
    );
    loggedWarning = true;
    return { enabled: false, ok: false, error: "The Grafana LLM plugin is not installed." };
  }
  let response;
  try {
    response = await getBackendSrv().get(`${LLM_PLUGIN_ROUTE}/health`, void 0, void 0, {
      showSuccessAlert: false,
      showErrorAlert: false
    });
  } catch (e) {
    if (!loggedWarning) {
      logDebug(String(e));
      logDebug(
        "Failed to check if vector service is enabled. This is expected if the Grafana LLM plugin is not installed, and the above error can be ignored."
      );
      loggedWarning = true;
    }
    return { enabled: false, ok: false, error: "The Grafana LLM plugin is not installed." };
  }
  const { details } = response;
  if (details?.version !== undefined) {
    setLLMPluginVersion(details.version);
  }
  if (details?.vector === undefined) {
    return { enabled: false, ok: false, error: "The Grafana LLM plugin is outdated; please update it." };
  }
  return typeof details.vector === "boolean" ? { enabled: details.vector, ok: details.vector } : details.vector;
};
const enabled = async () => {
  const healthDetails = await health();
  return healthDetails.enabled && healthDetails.ok;
};

export { enabled, health, search };
//# sourceMappingURL=vector.js.map
