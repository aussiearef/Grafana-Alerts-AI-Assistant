{"version":3,"file":"vector.js","sources":["../../src/vector.ts"],"sourcesContent":["/**\n * Vector search API.\n *\n * This module can be used to interact with the vector database configured\n * in the Grafana LLM app plugin. That plugin must be installed, enabled and configured\n * in order for these functions to work.\n *\n * The {@link enabled} function can be used to check if the plugin is enabled and configured.\n */\n\nimport { getBackendSrv, logDebug } from '@grafana/runtime';\nimport { LLM_PLUGIN_ROUTE, setLLMPluginVersion } from './constants';\nimport { HealthCheckResponse, VectorHealthDetails } from './types';\n\ninterface SearchResultPayload extends Record<string, any> {}\n\n/**\n * A request to search for resources in the vector database.\n **/\nexport interface SearchRequest {\n  /**\n   * The name of the collection to search in.\n   **/\n  collection: string;\n\n  /** The query to search for. */\n  query: string;\n\n  /**\n   * Limit the number of results returned to the top `topK` results.\n   *\n   * Defaults to 10.\n   **/\n  topK?: number;\n\n  /** Metadata filters to apply to the vector search. */\n  /* example: filter: { metric_type: { $eq: 'histogram' } } */\n  filter?: Record<string, any>;\n}\n\n/**\n * The results of a vector search.\n *\n * Results will be ordered by score, descending.\n */\nexport interface SearchResult<T extends SearchResultPayload> {\n  /**\n   * The payload of the result.\n   *\n   * The type of this payload depends on the collection that was searched in.\n   * Grafana core types will be added to the same module as this type as they\n   * are implemented.\n   **/\n  payload: T;\n\n  /**\n   * The score of the result.\n   *\n   * This is a number between 0 and 1, where 1 is the best possible match.\n   */\n  score: number;\n}\n\ninterface SearchResultResponse<T extends SearchResultPayload> {\n  results: Array<SearchResult<T>>;\n}\n\n/**\n * Search for resources in the configured vector database.\n */\nexport async function search<T extends SearchResultPayload>(request: SearchRequest): Promise<Array<SearchResult<T>>> {\n  const response = await getBackendSrv().post<SearchResultResponse<T>>(\n    '/api/plugins/grafana-llm-app/resources/vector/search',\n    request,\n    {\n      headers: { 'Content-Type': 'application/json' },\n    }\n  );\n  return response.results;\n}\n\nlet loggedWarning = false;\n\n/** Check if the vector API is enabled and configured via the LLM plugin. */\nexport const health = async (): Promise<VectorHealthDetails> => {\n  // First check if the plugin is enabled.\n  try {\n    const settings = await getBackendSrv().get(`${LLM_PLUGIN_ROUTE}/settings`, undefined, undefined, {\n      showSuccessAlert: false,\n      showErrorAlert: false,\n    });\n    if (!settings.enabled) {\n      return { enabled: false, ok: false, error: 'The Grafana LLM plugin is not enabled.' };\n    }\n  } catch (e) {\n    logDebug(String(e));\n    logDebug(\n      'Failed to check if the vector service is enabled. This is expected if the Grafana LLM plugin is not installed, and the above error can be ignored.'\n    );\n    loggedWarning = true;\n    return { enabled: false, ok: false, error: 'The Grafana LLM plugin is not installed.' };\n  }\n\n  // Run a health check to see if the vector service is configured on the plugin.\n  let response: HealthCheckResponse;\n  try {\n    response = await getBackendSrv().get(`${LLM_PLUGIN_ROUTE}/health`, undefined, undefined, {\n      showSuccessAlert: false,\n      showErrorAlert: false,\n    });\n  } catch (e) {\n    // We shouldn't really get here if we managed to get the plugin's settings above,\n    // but catch this just in case.\n    if (!loggedWarning) {\n      logDebug(String(e));\n      logDebug(\n        'Failed to check if vector service is enabled. This is expected if the Grafana LLM plugin is not installed, and the above error can be ignored.'\n      );\n      loggedWarning = true;\n    }\n    return { enabled: false, ok: false, error: 'The Grafana LLM plugin is not installed.' };\n  }\n\n  const { details } = response;\n  // Update the version if it's present on the response.\n  if (details?.version !== undefined) {\n    setLLMPluginVersion(details.version);\n  }\n  if (details?.vector === undefined) {\n    return { enabled: false, ok: false, error: 'The Grafana LLM plugin is outdated; please update it.' };\n  }\n  return typeof details.vector === 'boolean' ? { enabled: details.vector, ok: details.vector } : details.vector;\n};\n\nexport const enabled = async (): Promise<boolean> => {\n  const healthDetails = await health();\n  return healthDetails.enabled && healthDetails.ok;\n};\n"],"names":[],"mappings":";;;AAsEA,eAAsB,OAAsC,OAAyD,EAAA;AACnH,EAAM,MAAA,QAAA,GAAW,MAAM,aAAA,EAAgB,CAAA,IAAA;AAAA,IACrC,sDAAA;AAAA,IACA,OAAA;AAAA,IACA;AAAA,MACE,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAmB;AAAA;AAChD,GACF;AACA,EAAA,OAAO,QAAS,CAAA,OAAA;AAClB;AAEA,IAAI,aAAgB,GAAA,KAAA;AAGb,MAAM,SAAS,YAA0C;AAE9D,EAAI,IAAA;AACF,IAAM,MAAA,QAAA,GAAW,MAAM,aAAc,EAAA,CAAE,IAAI,CAAG,EAAA,gBAAgB,CAAa,SAAA,CAAA,EAAA,KAAA,CAAA,EAAW,KAAW,CAAA,EAAA;AAAA,MAC/F,gBAAkB,EAAA,KAAA;AAAA,MAClB,cAAgB,EAAA;AAAA,KACjB,CAAA;AACD,IAAI,IAAA,CAAC,SAAS,OAAS,EAAA;AACrB,MAAA,OAAO,EAAE,OAAS,EAAA,KAAA,EAAO,EAAI,EAAA,KAAA,EAAO,OAAO,wCAAyC,EAAA;AAAA;AACtF,WACO,CAAG,EAAA;AACV,IAAS,QAAA,CAAA,MAAA,CAAO,CAAC,CAAC,CAAA;AAClB,IAAA,QAAA;AAAA,MACE;AAAA,KACF;AACA,IAAgB,aAAA,GAAA,IAAA;AAChB,IAAA,OAAO,EAAE,OAAS,EAAA,KAAA,EAAO,EAAI,EAAA,KAAA,EAAO,OAAO,0CAA2C,EAAA;AAAA;AAIxF,EAAI,IAAA,QAAA;AACJ,EAAI,IAAA;AACF,IAAW,QAAA,GAAA,MAAM,eAAgB,CAAA,GAAA,CAAI,GAAG,gBAAgB,CAAA,OAAA,CAAA,EAAW,QAAW,KAAW,CAAA,EAAA;AAAA,MACvF,gBAAkB,EAAA,KAAA;AAAA,MAClB,cAAgB,EAAA;AAAA,KACjB,CAAA;AAAA,WACM,CAAG,EAAA;AAGV,IAAA,IAAI,CAAC,aAAe,EAAA;AAClB,MAAS,QAAA,CAAA,MAAA,CAAO,CAAC,CAAC,CAAA;AAClB,MAAA,QAAA;AAAA,QACE;AAAA,OACF;AACA,MAAgB,aAAA,GAAA,IAAA;AAAA;AAElB,IAAA,OAAO,EAAE,OAAS,EAAA,KAAA,EAAO,EAAI,EAAA,KAAA,EAAO,OAAO,0CAA2C,EAAA;AAAA;AAGxF,EAAM,MAAA,EAAE,SAAY,GAAA,QAAA;AAEpB,EAAI,IAAA,OAAA,EAAS,YAAY,SAAW,EAAA;AAClC,IAAA,mBAAA,CAAoB,QAAQ,OAAO,CAAA;AAAA;AAErC,EAAI,IAAA,OAAA,EAAS,WAAW,SAAW,EAAA;AACjC,IAAA,OAAO,EAAE,OAAS,EAAA,KAAA,EAAO,EAAI,EAAA,KAAA,EAAO,OAAO,uDAAwD,EAAA;AAAA;AAErG,EAAA,OAAO,OAAO,OAAA,CAAQ,MAAW,KAAA,SAAA,GAAY,EAAE,OAAA,EAAS,OAAQ,CAAA,MAAA,EAAQ,EAAI,EAAA,OAAA,CAAQ,MAAO,EAAA,GAAI,OAAQ,CAAA,MAAA;AACzG;AAEO,MAAM,UAAU,YAA8B;AACnD,EAAM,MAAA,aAAA,GAAgB,MAAM,MAAO,EAAA;AACnC,EAAO,OAAA,aAAA,CAAc,WAAW,aAAc,CAAA,EAAA;AAChD;;;;"}