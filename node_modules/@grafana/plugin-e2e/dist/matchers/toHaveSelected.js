'use strict';

var test = require('@playwright/test');
var utils = require('./utils.js');
var Select = require('../models/components/Select.js');
var MultiSelect = require('../models/components/MultiSelect.js');
var UnitPicker = require('../models/components/UnitPicker.js');

async function toHaveSelected(target, value, options) {
  if (target instanceof MultiSelect.MultiSelect) {
    if (Array.isArray(value)) {
      return expectMultiSelectToBe(target, value);
    }
    return expectMultiSelectToBe(target, [value]);
  }
  if (target instanceof Select.Select) {
    if (Array.isArray(value)) {
      throw new Error(
        `Select only support a single value to be selected. You are asserting that multiple values have been selected: "${value}"`
      );
    }
    return expectSelectToBe(target, value, options);
  }
  if (target instanceof UnitPicker.UnitPicker) {
    if (Array.isArray(value)) {
      throw new Error(
        `UnitPicker only support a single value to be selected. You are asserting that multiple values have been selected: "${value}"`
      );
    }
    return expectUnitPickerToBe(target, value, options);
  }
  throw Error('Unsupported parameters passed to "toBeSelected"');
}
async function expectSelectToBe(select, value, options) {
  let actual = "";
  try {
    actual = await select.locator(select.ctx.selectors.constants.Select.singleValueContainer("")).innerText(options);
    test.expect(actual).toMatch(value);
    return {
      pass: true,
      actual,
      expected: value,
      message: () => `Value successfully selected`
    };
  } catch (err) {
    return {
      message: () => utils.getMessage(value.toString(), err instanceof Error ? err.toString() : "Unknown error"),
      pass: false,
      actual
    };
  }
}
async function expectMultiSelectToBe(select, values) {
  let actual = "";
  try {
    const actual2 = await select.locator(select.ctx.selectors.constants.Select.multiValueContainer("")).allInnerTexts();
    test.expect(actual2).toMatchObject(values);
    return {
      pass: true,
      actual: actual2,
      expected: values,
      message: () => `Values successfully selected`
    };
  } catch (err) {
    return {
      message: () => utils.getMessage(values.join(", "), err instanceof Error ? err.toString() : "Unknown error"),
      pass: false,
      actual,
      expected: values
    };
  }
}
async function expectUnitPickerToBe(unitPicker, value, options) {
  let actual = "";
  try {
    const input = unitPicker.locator().getByRole("textbox");
    actual = await input.inputValue(options);
    await test.expect(input).toHaveValue(value);
    return {
      pass: true,
      actual,
      expected: value,
      message: () => `Value successfully selected`
    };
  } catch (err) {
    return {
      message: () => utils.getMessage(value.toString(), err instanceof Error ? err.toString() : "Unknown error"),
      pass: false,
      actual
    };
  }
}

exports.toHaveSelected = toHaveSelected;
