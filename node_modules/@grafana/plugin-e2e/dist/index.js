'use strict';

var test$1 = require('@playwright/test');
var annotationEditPage = require('./fixtures/annotationEditPage.js');
var grafanaAPIClient = require('./fixtures/grafanaAPIClient.js');
var createDataSource = require('./fixtures/commands/createDataSource.js');
var createDataSourceConfigPage = require('./fixtures/commands/createDataSourceConfigPage.js');
var createUser = require('./fixtures/commands/createUser.js');
var gotoAnnotationEditPage = require('./fixtures/commands/gotoAnnotationEditPage.js');
var gotoAppConfigPage = require('./fixtures/commands/gotoAppConfigPage.js');
var gotoAppPage = require('./fixtures/commands/gotoAppPage.js');
var gotoDashboardPage = require('./fixtures/commands/gotoDashboardPage.js');
var gotoDataSourceConfigPage = require('./fixtures/commands/gotoDataSourceConfigPage.js');
var gotoPanelEditPage = require('./fixtures/commands/gotoPanelEditPage.js');
var gotoAlertRuleEditPage = require('./fixtures/commands/gotoAlertRuleEditPage.js');
var gotoVariableEditPage = require('./fixtures/commands/gotoVariableEditPage.js');
var login = require('./fixtures/commands/login.js');
var readProvisionedDashboard = require('./fixtures/commands/readProvisionedDashboard.js');
var readProvisionedDataSource = require('./fixtures/commands/readProvisionedDataSource.js');
var readProvisionedAlertRule = require('./fixtures/commands/readProvisionedAlertRule.js');
var dashboardPage = require('./fixtures/dashboardPage.js');
var explorePage = require('./fixtures/explorePage.js');
var grafanaVersion = require('./fixtures/grafanaVersion.js');
var isFeatureToggleEnabled = require('./fixtures/isFeatureToggleEnabled.js');
var page = require('./fixtures/page.js');
var panelEditPage = require('./fixtures/panelEditPage.js');
var selectors = require('./fixtures/selectors.js');
var variableEditPage = require('./fixtures/variableEditPage.js');
var alertRuleEditPage = require('./fixtures/alertRuleEditPage.js');
var options = require('./options.js');
var toHaveAlert = require('./matchers/toHaveAlert.js');
var toDisplayPreviews = require('./matchers/toDisplayPreviews.js');
var toBeOK = require('./matchers/toBeOK.js');
var variablePage = require('./fixtures/variablePage.js');
var gotoVariablePage = require('./fixtures/commands/gotoVariablePage.js');
var toHaveSelected = require('./matchers/toHaveSelected.js');
var toBeChecked = require('./matchers/toBeChecked.js');
var toHaveChecked = require('./matchers/toHaveChecked.js');
var toHaveColor = require('./matchers/toHaveColor.js');
var DataSourcePicker = require('./models/components/DataSourcePicker.js');
var Panel = require('./models/components/Panel.js');
var TimeRange = require('./models/components/TimeRange.js');
var AnnotationEditPage = require('./models/pages/AnnotationEditPage.js');
var AnnotationPage = require('./models/pages/AnnotationPage.js');
var DashboardPage = require('./models/pages/DashboardPage.js');
var DataSourceConfigPage = require('./models/pages/DataSourceConfigPage.js');
var ExplorePage = require('./models/pages/ExplorePage.js');
var GrafanaPage = require('./models/pages/GrafanaPage.js');
var PanelEditPage = require('./models/pages/PanelEditPage.js');
var VariableEditPage = require('./models/pages/VariableEditPage.js');
var VariablePage = require('./models/pages/VariablePage.js');
var AppConfigPage = require('./models/pages/AppConfigPage.js');
var PluginConfigPage = require('./models/pages/PluginConfigPage.js');
var AppPage = require('./models/pages/AppPage.js');

const test = test$1.test.extend({
  selectors: selectors.selectors,
  grafanaVersion: grafanaVersion.grafanaVersion,
  login: login.login,
  grafanaAPIClient: grafanaAPIClient.grafanaAPIClient,
  createDataSourceConfigPage: createDataSourceConfigPage.createDataSourceConfigPage,
  page: page.page,
  dashboardPage: dashboardPage.dashboardPage,
  panelEditPage: panelEditPage.panelEditPage,
  variableEditPage: variableEditPage.variableEditPage,
  variablePage: variablePage.variablePage,
  annotationEditPage: annotationEditPage.annotationEditPage,
  alertRuleEditPage: alertRuleEditPage.alertRuleEditPage,
  explorePage: explorePage.explorePage,
  createDataSource: createDataSource.createDataSource,
  readProvisionedDataSource: readProvisionedDataSource.readProvisionedDataSource,
  readProvisionedAlertRule: readProvisionedAlertRule.readProvisionedAlertRule,
  readProvisionedDashboard: readProvisionedDashboard.readProvisionedDashboard,
  isFeatureToggleEnabled: isFeatureToggleEnabled.isFeatureToggleEnabled,
  createUser: createUser.createUser,
  gotoDashboardPage: gotoDashboardPage.gotoDashboardPage,
  gotoPanelEditPage: gotoPanelEditPage.gotoPanelEditPage,
  gotoVariableEditPage: gotoVariableEditPage.gotoVariableEditPage,
  gotoVariablePage: gotoVariablePage.gotoVariablePage,
  gotoAnnotationEditPage: gotoAnnotationEditPage.gotoAnnotationEditPage,
  gotoAlertRuleEditPage: gotoAlertRuleEditPage.gotoAlertRuleEditPage,
  gotoDataSourceConfigPage: gotoDataSourceConfigPage.gotoDataSourceConfigPage,
  gotoAppConfigPage: gotoAppConfigPage.gotoAppConfigPage,
  gotoAppPage: gotoAppPage.gotoAppPage,
  ...options.options
});
const expect = test$1.expect.extend({
  toHaveAlert: toHaveAlert.toHaveAlert,
  toDisplayPreviews: toDisplayPreviews.toDisplayPreviews,
  toBeOK: toBeOK.toBeOK,
  toHaveSelected: toHaveSelected.toHaveSelected,
  toBeChecked: toBeChecked.toBeChecked,
  toHaveChecked: toHaveChecked.toHaveChecked,
  toHaveColor: toHaveColor.toHaveColor
});

Object.defineProperty(exports, "selectors", {
  enumerable: true,
  get: function () { return test$1.selectors; }
});
exports.DataSourcePicker = DataSourcePicker.DataSourcePicker;
exports.Panel = Panel.Panel;
exports.TimeRange = TimeRange.TimeRange;
exports.AnnotationEditPage = AnnotationEditPage.AnnotationEditPage;
exports.AnnotationPage = AnnotationPage.AnnotationPage;
exports.DashboardPage = DashboardPage.DashboardPage;
exports.DataSourceConfigPage = DataSourceConfigPage.DataSourceConfigPage;
exports.ExplorePage = ExplorePage.ExplorePage;
exports.GrafanaPage = GrafanaPage.GrafanaPage;
exports.PanelEditPage = PanelEditPage.PanelEditPage;
exports.VariableEditPage = VariableEditPage.VariableEditPage;
exports.VariablePage = VariablePage.VariablePage;
exports.AppConfigPage = AppConfigPage.AppConfigPage;
exports.PluginConfigPage = PluginConfigPage.PluginConfigPage;
exports.AppPage = AppPage.AppPage;
exports.expect = expect;
exports.test = test;
