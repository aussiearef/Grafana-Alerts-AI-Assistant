'use strict';

var semver = require('semver');
var GrafanaPage = require('../pages/GrafanaPage.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var semver__namespace = /*#__PURE__*/_interopNamespaceDefault(semver);

const ERROR_STATUS = "error";
class Panel extends GrafanaPage.GrafanaPage {
  constructor(ctx, locator) {
    super(ctx);
    this.ctx = ctx;
    this.locator = locator;
  }
  /**
   * Returns a locator that resolves element(s) that contain the field name(s) that are currently displayed in the panel.
   *
   * Can be used to assert the field names displayed in the panel visualization. e.g
   * await expect(panelEditPage.panel.fieldNames).toHaveValues(['Month', 'Stockholm', 'Berlin', 'Log Angeles']);
   */
  get fieldNames() {
    const panel = this.locator;
    return panel.locator('[role="columnheader"]');
  }
  /**
   * Returns a locator that resolves element(s) that contain the value(s) that are currently displayed in the panel.
   *
   * Can be used to assert the values displayed in the panel visualization. e.g
   * await expect(panelEditPage.panel.data).toContainText(['1', '4', '14']);
   */
  get data() {
    const panel = this.locator;
    return panel.locator('[role="cell"]');
  }
  /**
   * Click on a menu item in the panel menu.
   *
   * Pass options.parentItem to specify the parent item of the menu item to click.
   */
  async clickOnMenuItem(item, options) {
    let panelMenu = this.getByGrafanaSelector(this.ctx.selectors.components.Panels.Panel.menu(""), {
      startsWith: true,
      root: this.locator
    });
    let parentMenuItem = this.getByGrafanaSelector(
      this.ctx.selectors.components.Panels.Panel.menuItems(options?.parentItem ?? "")
    );
    let menuItem = this.getByGrafanaSelector(this.ctx.selectors.components.Panels.Panel.menuItems(item));
    if (semver__namespace.lt(this.ctx.grafanaVersion, "9.5.0")) {
      panelMenu = this.locator.getByRole("heading");
      parentMenuItem = this.ctx.page.getByText(options?.parentItem ?? "");
      menuItem = this.ctx.page.getByRole("menu").getByText(item);
    }
    await panelMenu.click({ force: true });
    options?.parentItem && await parentMenuItem.hover();
    await menuItem.click();
  }
  /**
   * Returns the locator for the panel error (if any)
   */
  getErrorIcon() {
    let selector = this.ctx.selectors.components.Panels.Panel.status(ERROR_STATUS);
    if (semver__namespace.lt(this.ctx.grafanaVersion, "9.5.0")) {
      selector = this.ctx.selectors.components.Panels.Panel.headerCornerInfo(ERROR_STATUS);
    }
    return this.getByGrafanaSelector(selector, {
      root: this.locator
    });
  }
}

exports.Panel = Panel;
