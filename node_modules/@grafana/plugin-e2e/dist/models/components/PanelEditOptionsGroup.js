'use strict';

var ColorPicker = require('./ColorPicker.js');
var UnitPicker = require('./UnitPicker.js');
var Select = require('./Select.js');
var MultiSelect = require('./MultiSelect.js');
var Switch = require('./Switch.js');
var semver = require('semver');
var RadioGroup = require('./RadioGroup.js');
var utils = require('../utils.js');

class PanelEditOptionsGroup {
  constructor(ctx, element, groupLabel) {
    this.ctx = ctx;
    this.element = element;
    this.groupLabel = groupLabel;
  }
  async isExpanded() {
    const expanded = await this.getOptionsGroupToggle().getAttribute("aria-expanded");
    return expanded === "true";
  }
  async collapse() {
    const expanded = await this.isExpanded();
    if (!expanded) {
      return;
    }
    await this.getOptionsGroupToggle().click();
  }
  async expand() {
    const expanded = await this.isExpanded();
    if (expanded) {
      return;
    }
    await this.getOptionsGroupToggle().click();
  }
  getRadioGroup(label) {
    if (semver.gte(this.ctx.grafanaVersion, "10.2.0")) {
      return new RadioGroup.RadioGroup(this.ctx, this.getByLabel(label).getByRole("radiogroup"));
    }
    return new RadioGroup.RadioGroup(this.ctx, this.getByLabel(label));
  }
  getSwitch(label) {
    return new Switch.Switch(this.ctx, this.getByLabel(label));
  }
  getTextInput(label) {
    return this.getByLabel(label).getByRole("textbox");
  }
  getNumberInput(label) {
    return this.getByLabel(label).getByRole("spinbutton");
  }
  getSliderInput(label) {
    if (semver.gte(this.ctx.grafanaVersion, "9.1.0")) {
      return this.getNumberInput(label);
    }
    return this.getByLabel(label).getByRole("textbox");
  }
  getSelect(label) {
    return new Select.Select(this.ctx, this.getByLabel(label));
  }
  getMultiSelect(label) {
    return new MultiSelect.MultiSelect(this.ctx, this.getByLabel(label));
  }
  getColorPicker(label) {
    return new ColorPicker.ColorPicker(this.ctx, this.getByLabel(label));
  }
  getUnitPicker(label) {
    return new UnitPicker.UnitPicker(this.ctx, this.getByLabel(label));
  }
  getByLabel(optionLabel) {
    return this.element.getByLabel(`${this.groupLabel} ${optionLabel} field property editor`);
  }
  getOptionsGroupToggle() {
    const selector = utils.resolveGrafanaSelector(this.ctx.selectors.components.OptionsGroup.toggle(this.groupLabel));
    if (semver.gte(this.ctx.grafanaVersion, "10.0.0")) {
      return this.element.locator(selector);
    }
    return this.element.locator(selector).getByRole("button");
  }
}

exports.PanelEditOptionsGroup = PanelEditOptionsGroup;
