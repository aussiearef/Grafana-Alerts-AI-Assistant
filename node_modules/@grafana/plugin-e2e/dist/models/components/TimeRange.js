'use strict';

var semver = require('semver');
var GrafanaPage = require('../pages/GrafanaPage.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var semver__namespace = /*#__PURE__*/_interopNamespaceDefault(semver);

class TimeRange extends GrafanaPage.GrafanaPage {
  constructor(ctx) {
    super(ctx);
  }
  /**
   * Opens the time picker and sets the time range to the provided values
   */
  async set({ from, to, zone }) {
    const { TimeZonePicker, TimePicker, Select } = this.ctx.selectors.components;
    try {
      await this.getByGrafanaSelector(TimePicker.openButton).click();
    } catch (e) {
      await this.ctx.page.locator('[aria-controls="TimePickerContent"]').last().click();
    }
    if (zone) {
      const changeTimeSettingsButton = semver__namespace.gte(this.ctx.grafanaVersion, "11.0.0") ? this.getByGrafanaSelector(TimeZonePicker.changeTimeSettingsButton) : this.ctx.page.getByRole("button", { name: "Change time settings" });
      await changeTimeSettingsButton.click();
      await this.getByGrafanaSelector(TimeZonePicker.containerV2).click();
      await this.getByGrafanaSelector(Select.option).filter({ hasText: zone }).click();
    }
    await this.getByGrafanaSelector(TimePicker.absoluteTimeRangeTitle).click();
    const fromField = await this.getByGrafanaSelector(TimePicker.fromField);
    await fromField.clear();
    await fromField.fill(from);
    const toField = await this.getByGrafanaSelector(TimePicker.toField);
    await toField.clear();
    await toField.fill(to);
    await this.getByGrafanaSelector(TimePicker.applyTimeRange).click();
  }
}

exports.TimeRange = TimeRange;
