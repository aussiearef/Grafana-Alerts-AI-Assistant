'use strict';

var ComponentBase = require('./ComponentBase.js');
var semver = require('semver');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, key + "" , value);
class Switch extends ComponentBase.ComponentBase {
  constructor(ctx, group) {
    super(ctx, Switch.getElement(ctx, group));
    __publicField(this, "group");
    this.group = group;
  }
  static getElement(ctx, group) {
    if (semver.gte(ctx.grafanaVersion, "11.5.0")) {
      return group.getByRole("switch");
    } else {
      return group.getByRole("checkbox");
    }
  }
  async check(options) {
    const target = await this.getSwitch(options);
    return target.check({ force: true, ...options });
  }
  async uncheck(options) {
    const target = await this.getSwitch(options);
    return target.uncheck({ force: true, ...options });
  }
  async getSwitch(options) {
    if (semver.lt(this.ctx.grafanaVersion, "11.3.0")) {
      const id = await this.element.getAttribute("id", options);
      return this.group.locator(`label[for='${id}']`);
    }
    return this.element;
  }
}

exports.Switch = Switch;
