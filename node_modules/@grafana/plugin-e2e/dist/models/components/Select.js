'use strict';

var ComponentBase = require('./ComponentBase.js');
var semver = require('semver');
var utils = require('../utils.js');

class Select extends ComponentBase.ComponentBase {
  constructor(ctx, element) {
    super(ctx, element);
  }
  async selectOption(values, options) {
    const menu = await openSelect(this, options);
    return selectByValueOrLabel(values, menu, this.ctx, options);
  }
}
async function openSelect(component, options) {
  const element = component.locator();
  const selectors = component.ctx.selectors;
  await element.getByRole("combobox").click(options);
  return element.page().locator(utils.resolveGrafanaSelector(selectors.components.Select.menu));
}
async function selectByValueOrLabel(labelOrValue, menu, ctx, options) {
  const option = getOption(menu, ctx).getByText(labelOrValue, { exact: true });
  const value = await option.textContent(options);
  await option.click(options);
  if (!value) {
    throw new Error(`Could not select option: "${labelOrValue}"`);
  }
  return value;
}
function getOption(menu, ctx) {
  if (semver.gte(ctx.grafanaVersion, "11.0.0")) {
    return menu.getByRole("option");
  }
  return menu.getByLabel("Select option");
}

exports.Select = Select;
exports.openSelect = openSelect;
exports.selectByValueOrLabel = selectByValueOrLabel;
