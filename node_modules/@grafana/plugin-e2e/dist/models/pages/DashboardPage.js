'use strict';

var semver = require('semver');
var DataSourcePicker = require('../components/DataSourcePicker.js');
var GrafanaPage = require('./GrafanaPage.js');
var PanelEditPage = require('./PanelEditPage.js');
var TimeRange = require('../components/TimeRange.js');
var Panel = require('../components/Panel.js');
var isFeatureToggleEnabled = require('../../fixtures/isFeatureToggleEnabled.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var semver__namespace = /*#__PURE__*/_interopNamespaceDefault(semver);

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
class DashboardPage extends GrafanaPage.GrafanaPage {
  constructor(ctx, dashboard) {
    super(ctx, dashboard);
    this.ctx = ctx;
    this.dashboard = dashboard;
    __publicField(this, "dataSourcePicker");
    __publicField(this, "timeRange");
    this.dataSourcePicker = new DataSourcePicker.DataSourcePicker(ctx);
    this.timeRange = new TimeRange.TimeRange(ctx);
  }
  /**
   * Navigates to the dashboard page. If a dashboard uid was not provided, it's assumed that it's a new dashboard.
   */
  async goto(options = {}) {
    let url = this.dashboard?.uid ? this.ctx.selectors.pages.Dashboard.url(this.dashboard.uid) : this.ctx.selectors.pages.AddDashboard.url;
    if (this.dashboard?.timeRange) {
      options.queryParams = options?.queryParams ?? new URLSearchParams();
      options.queryParams.append("from", this.dashboard.timeRange.from);
      options.queryParams.append("to", this.dashboard.timeRange.to);
    }
    return super.navigate(url, options);
  }
  /**
   * Navigates to the panel edit page for the given panel id
   *
   * If the panel id does not exist in the dashboard, Grafana will redirect to the dashboard page
   */
  async gotoPanelEditPage(panelId) {
    const panelEditPage = new PanelEditPage.PanelEditPage(this.ctx, { dashboard: this.dashboard, id: panelId });
    await panelEditPage.goto();
    return panelEditPage;
  }
  /**
   * Returns a Panel object for the panel with the given title. Only works for panels that currently are in the viewport.
   *
   * Note that this won't navigate to the panel edit page, it will only return the Panel object, which
   * points to the locator for the panel in the dashboard page. Can be used to assert on the panel data, eg.
   * const panel = await dashboardPage.getPanelByTitle('Table panel');
   * await expect(panel.fieldNames).toContainText(['time', 'temperature']);
   */
  getPanelByTitle(title) {
    let locator = this.getByGrafanaSelector(this.ctx.selectors.components.Panels.Panel.title(title));
    if (semver__namespace.lt(this.ctx.grafanaVersion, "9.5.0")) {
      locator = locator.locator("..").locator("..");
    }
    return new Panel.Panel(this.ctx, locator);
  }
  /**
   * Returns a Panel object for the panel with the given id. Only works for panels that currently are in the viewport.
   *
   * Note that this won't navigate to the panel edit page, it will only return the Panel object, which
   * points to the locator for the panel in the dashboard page. Can be used to assert on the panel data, eg.
   * const panel = await dashboardPage.getPanelByTitle('2');
   * await expect(panel.fieldNames()).toContainText(['time', 'temperature']);
   */
  getPanelById(panelId) {
    if (semver__namespace.lt(this.ctx.grafanaVersion, "11.3.0")) {
      return new Panel.Panel(this.ctx, this.ctx.page.locator(`[data-panelid="${panelId}"]`));
    }
    return new Panel.Panel(this.ctx, this.ctx.page.locator(`[data-viz-panel-key="panel-${panelId}"]`));
  }
  /**
   * Clicks the buttons to add a new panel and returns the panel edit page for the new panel
   */
  async addPanel() {
    const { components, pages, constants } = this.ctx.selectors;
    const scenesEnabled = await isFeatureToggleEnabled.isFeatureEnabled(this.ctx.page, "dashboardScene");
    if (scenesEnabled && this.dashboard?.uid) {
      await this.getByGrafanaSelector(components.NavToolbar.editDashboard.editButton).click();
    }
    const toolbarButtonsHidden = !scenesEnabled && !!await this.ctx.page.getByLabel("Show more items").count();
    if (toolbarButtonsHidden) {
      await this.ctx.page.getByLabel("Show more items").click();
    }
    if (semver__namespace.gte(this.ctx.grafanaVersion, "9.5.0")) {
      let addButton = this.getByGrafanaSelector(
        components.PageToolbar.itemButton(constants.PageToolBar.itemButtonTitle)
      );
      toolbarButtonsHidden ? await addButton.last().click() : await addButton.click();
      await this.getByGrafanaSelector(pages.AddDashboard.itemButton(pages.AddDashboard.itemButtonAddViz)).click();
    } else {
      if (this.dashboard?.uid) {
        const addPanelButton = this.getByGrafanaSelector(components.PageToolbar.item("Add panel"));
        toolbarButtonsHidden ? await addPanelButton.last().click() : await addPanelButton.click();
      }
      await this.getByGrafanaSelector(pages.AddDashboard.addNewPanel).click();
    }
    const panelId = await this.ctx.page.evaluate(() => {
      const urlParams = new URLSearchParams(window.location.search);
      return urlParams.get("editPanel");
    });
    return new PanelEditPage.PanelEditPage(this.ctx, { dashboard: this.dashboard, id: panelId ?? "1" });
  }
  /**
   * Deletes the dashboard
   */
  async deleteDashboard() {
    if (this.dashboard?.uid) {
      await this.ctx.request.delete(this.ctx.selectors.apis.Dashboard.delete(this.dashboard.uid));
    }
  }
  /**
   * Clicks the run button in the refresh picker to refresh the dashboard
   */
  async refreshDashboard() {
    await this.ctx.page.getByTestId(this.ctx.selectors.components.RefreshPicker.runButtonV2).click();
  }
}

exports.DashboardPage = DashboardPage;
