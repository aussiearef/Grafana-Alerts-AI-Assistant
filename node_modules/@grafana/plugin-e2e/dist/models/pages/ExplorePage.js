'use strict';

var semver = require('semver');
var DataSourcePicker = require('../components/DataSourcePicker.js');
var GrafanaPage = require('./GrafanaPage.js');
var TimeRange = require('../components/TimeRange.js');
var Panel = require('../components/Panel.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var semver__namespace = /*#__PURE__*/_interopNamespaceDefault(semver);

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
const TIME_SERIES_PANEL_SELECTOR_SUFFIX = "Graph";
const TABLE_PANEL_SELECTOR_SUFFIX = "Table";
const TIME_SERIES_PANEL_TEXT = "Graph Lines Bars Points";
const TABLE_PANEL_TEXT = "Table";
class ExplorePage extends GrafanaPage.GrafanaPage {
  constructor(ctx, args) {
    super(ctx, args);
    this.args = args;
    __publicField(this, "datasource");
    __publicField(this, "timeRange");
    __publicField(this, "timeSeriesPanel");
    __publicField(this, "tablePanel");
    this.datasource = new DataSourcePicker.DataSourcePicker(ctx);
    this.timeRange = new TimeRange.TimeRange(ctx);
    this.timeSeriesPanel = new Panel.Panel(
      this.ctx,
      this.getPanelLocators(TIME_SERIES_PANEL_SELECTOR_SUFFIX, TIME_SERIES_PANEL_TEXT)
    );
    this.tablePanel = new Panel.Panel(this.ctx, this.getPanelLocators(TABLE_PANEL_SELECTOR_SUFFIX, TABLE_PANEL_TEXT));
  }
  getPanelLocators(suffix, text) {
    const page = this.ctx.page;
    let locator = this.getByGrafanaSelector(this.ctx.selectors.components.Panels.Panel.title(suffix), {
      startsWith: true
    });
    if (semver__namespace.lt(this.ctx.grafanaVersion, "9.3.0")) {
      locator = page.getByText(suffix).locator("..").locator("..").locator("..");
    } else if (semver__namespace.lt(this.ctx.grafanaVersion, "10.0.0")) {
      locator = page.getByRole("button", { name: text }).locator("..");
    }
    return locator;
  }
  /**
   * Navigates to the explore page.
   */
  async goto(options) {
    await super.navigate(this.ctx.selectors.pages.Explore.url, options);
  }
  /**
   * Returns the locator for the query editor row with the given refId
   */
  getQueryEditorRow(refId) {
    return this.getByGrafanaSelector(this.ctx.selectors.components.QueryEditorRows.rows).filter({
      has: this.getByGrafanaSelector(this.ctx.selectors.components.QueryEditorRow.title(refId))
    });
  }
  /**
   * Clicks the "Run Query" button in the refresh picker to run the query. Returns the response promise for the data query
   */
  async runQuery(options) {
    const components = this.ctx.selectors.components;
    const responsePromise = this.ctx.page.waitForResponse(
      (resp) => resp.url().includes(this.ctx.selectors.apis.DataSource.query),
      options
    );
    try {
      await this.getByGrafanaSelector(components.RefreshPicker.runButtonV2).click({
        timeout: 1e3
      });
    } catch (_) {
      const toolbarText = "Show more items";
      await this.getByGrafanaSelector(components.PageToolbar.item(toolbarText)).click();
      await this.getByGrafanaSelector(components.RefreshPicker.runButtonV2).last().click();
    }
    return responsePromise;
  }
}

exports.ExplorePage = ExplorePage;
