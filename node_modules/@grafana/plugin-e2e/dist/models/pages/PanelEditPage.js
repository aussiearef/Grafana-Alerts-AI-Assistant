'use strict';

var semver = require('semver');
var test = require('@playwright/test');
var DataSourcePicker = require('../components/DataSourcePicker.js');
var GrafanaPage = require('./GrafanaPage.js');
var TimeRange = require('../components/TimeRange.js');
var Panel = require('../components/Panel.js');
var utils = require('../utils.js');
var DashboardPage = require('./DashboardPage.js');
var PanelEditOptionsGroup = require('../components/PanelEditOptionsGroup.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var semver__namespace = /*#__PURE__*/_interopNamespaceDefault(semver);

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
class PanelEditPage extends GrafanaPage.GrafanaPage {
  constructor(ctx, args) {
    super(ctx, args);
    this.ctx = ctx;
    this.args = args;
    __publicField(this, "datasource");
    __publicField(this, "timeRange");
    __publicField(this, "panel");
    this.datasource = new DataSourcePicker.DataSourcePicker(ctx);
    this.timeRange = new TimeRange.TimeRange(ctx);
    this.panel = new Panel.Panel(ctx, this.getPanelLocator());
  }
  getPanelLocator() {
    const locator = this.getByGrafanaSelector(this.ctx.selectors.components.Panels.Panel.title(""), {
      startsWith: true
    });
    if (semver__namespace.lt(this.ctx.grafanaVersion, "9.5.0")) {
      return locator.locator("..").locator("..");
    }
    return locator;
  }
  /**
   * Navigates to the panel edit page. If a dashboard uid was not provided, it's assumed that it's a new dashboard.
   */
  async goto(options) {
    const url = this.args.dashboard?.uid ? this.ctx.selectors.pages.Dashboard.url(this.args.dashboard.uid) : this.ctx.selectors.pages.AddDashboard.url;
    options ?? (options = {});
    options.queryParams ?? (options.queryParams = new URLSearchParams());
    options.queryParams.append("editPanel", this.args.id);
    await super.navigate(url, options);
  }
  async toggleTableView() {
    await utils.radioButtonSetChecked(this.ctx.page, "Table view", true);
    let locator = this.getByGrafanaSelector(this.ctx.selectors.components.Panels.Panel.title(""));
    if (semver__namespace.lt(this.ctx.grafanaVersion, "10.4.0")) {
      locator = this.ctx.page.getByRole("table");
    }
    this.panel = new Panel.Panel(this.ctx, locator);
  }
  async untoggleTableView() {
    await utils.radioButtonSetChecked(this.ctx.page, "Table view", false);
    this.panel = new Panel.Panel(
      this.ctx,
      this.getByGrafanaSelector(this.ctx.selectors.components.Panels.Panel.title(""), { startsWith: true })
    );
  }
  /**
   * Sets the title of the panel. This method will open the panel options, set the title and close the panel options.
   */
  async setPanelTitle(titleText) {
    const TITLE = "Title";
    const { OptionsGroup, PanelEditor } = this.ctx.selectors.components;
    const sectionGroupTitle = "Panel options";
    await this.collapseSection(sectionGroupTitle);
    const vizInput = semver__namespace.gte(this.ctx.grafanaVersion, "11.0.0") ? this.getByGrafanaSelector(PanelEditor.OptionsPane.fieldInput(TITLE)) : this.getByGrafanaSelector(OptionsGroup.group(sectionGroupTitle)).locator("input").first();
    await vizInput.fill(titleText);
    await this.ctx.page.keyboard.press("Tab");
  }
  /**
   * Sets the visualization for the panel. This method will open the visualization picker, select the given visualization
   */
  async setVisualization(visualization) {
    const showPanelEditElement = this.getByGrafanaSelector("Show options pane");
    const showPanelEditElementCount = await showPanelEditElement.count();
    if (showPanelEditElementCount > 0) {
      await showPanelEditElement.click();
    }
    await this.getByGrafanaSelector(this.ctx.selectors.components.PanelEditor.toggleVizPicker).click();
    await this.getByGrafanaSelector(this.ctx.selectors.components.PluginVisualization.item(visualization)).click();
    await test.expect(
      this.getByGrafanaSelector(this.ctx.selectors.components.PanelEditor.toggleVizPicker),
      `Could not set visualization to ${visualization}. Ensure the panel is installed.`
    ).toHaveText(visualization);
  }
  /**
   * Expands the section for the given category name. If the section is already expanded, this method does nothing.
   * @deprecated use {@link PanelEditOptionsGroup.expand} method instead.
   */
  async collapseSection(categoryName) {
    const section = this.getByGrafanaSelector(this.ctx.selectors.components.OptionsGroup.group(categoryName));
    await test.expect(section, `Could not find any section for category: ${categoryName}`).toBeVisible();
    const sectionToggle = this.getByGrafanaSelector(this.ctx.selectors.components.OptionsGroup.toggle(categoryName));
    const expandedAttr = await sectionToggle.getAttribute("aria-expanded") ?? "";
    if (/false/.test(expandedAttr)) {
      await section.click();
    }
  }
  /**
   * Returns the name of the visualization currently selected in the panel editor
   */
  getVisualizationName() {
    return this.getByGrafanaSelector(this.ctx.selectors.components.PanelEditor.toggleVizPicker);
  }
  /**
   * Clicks the "Back to dashboard" button in the panel editor
   * In versions prior to 11.3.0, this method clicks the "Apply" button instead
   */
  async backToDashboard() {
    if (semver__namespace.gte(this.ctx.grafanaVersion, "11.3.0")) {
      await this.getByGrafanaSelector(
        this.ctx.selectors.components.NavToolbar.editDashboard.backToDashboardButton
      ).click();
    } else {
      await this.getByGrafanaSelector(this.ctx.selectors.components.PanelEditor.applyButton).click();
    }
    return new DashboardPage.DashboardPage(this.ctx, this.args);
  }
  /**
   * Clicks the "Apply" button in the panel editor
   *
   * @deprecated use {@link PanelEditPage.backToDashboard} method instead.
   */
  async apply() {
    return this.backToDashboard();
  }
  /**
   * Returns the locator for the query editor row with the given refId
   */
  getQueryEditorRow(refId) {
    return this.getByGrafanaSelector(this.ctx.selectors.components.QueryEditorRows.rows).filter({
      has: this.getByGrafanaSelector(this.ctx.selectors.components.QueryEditorRow.title(refId))
    });
  }
  /**
   * Clicks the "Refresh" button in the panel editor. Returns the response promise for the data query
   * 
   * By default, this method will wait for any response that has the url '/api/ds/query'. 
   * If you need to wait for a specific response, you can pass a callback to the `waitForResponsePredicateCallback` option.
   * e.g
   * panelEditPage.refreshPanel({
      waitForResponsePredicateCallback: (r) =>
        r.url().includes(selectors.apis.DataSource.query) &&
        r.body().then((body) => body.includes(`"status":"finished"`)),
    })
   */
  async refreshPanel(options) {
    const defaultPredicate = (resp) => resp.url().includes(this.ctx.selectors.apis.DataSource.query);
    const responsePromise = this.ctx.page.waitForResponse(
      options?.waitForResponsePredicateCallback ?? defaultPredicate,
      options
    );
    const refreshPanelButton = this.getByGrafanaSelector(this.ctx.selectors.components.RefreshPicker.runButtonV2, {
      root: this.getByGrafanaSelector(this.ctx.selectors.components.PanelEditor.General.content)
    });
    try {
      await refreshPanelButton.click({ timeout: 2e3 });
    } catch (error) {
      await this.getByGrafanaSelector(this.ctx.selectors.components.PanelEditor.toggleVizOptions).click();
      await refreshPanelButton.click();
      await this.getByGrafanaSelector(this.ctx.selectors.components.PanelEditor.toggleVizOptions).click();
    }
    return responsePromise;
  }
  /** Return page object for the panel edit options group with the given label */
  getCustomOptions(label) {
    const locator = this.getOptionsGroupLocator(label);
    return new PanelEditOptionsGroup.PanelEditOptionsGroup(this.ctx, locator, label);
  }
  getPanelOptions() {
    return this.getCustomOptions("Panel options");
  }
  getStandardOptions() {
    return this.getCustomOptions("Standard options");
  }
  getValueMappingOptions() {
    return this.getCustomOptions("Value mappings");
  }
  getDataLinksOptions() {
    return this.getCustomOptions("Data links");
  }
  getThresholdsOptions() {
    return this.getCustomOptions("Thresholds");
  }
  getOptionsGroupLocator(label) {
    const { selectors } = this.ctx;
    return this.getByGrafanaSelector(selectors.components.OptionsGroup.group(label));
  }
}

exports.PanelEditPage = PanelEditPage;
