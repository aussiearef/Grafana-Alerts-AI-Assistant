'use strict';

var semver = require('semver');
var DataSourcePicker = require('../components/DataSourcePicker.js');
var GrafanaPage = require('./GrafanaPage.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var semver__namespace = /*#__PURE__*/_interopNamespaceDefault(semver);

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, key + "" , value);
class VariableEditPage extends GrafanaPage.GrafanaPage {
  constructor(ctx, args) {
    super(ctx, args);
    this.ctx = ctx;
    this.args = args;
    __publicField(this, "datasource");
    this.datasource = new DataSourcePicker.DataSourcePicker(ctx);
  }
  /**
   * Navigates to the variable edit page. If a dashboard uid was not provided, it's assumed that it's a new dashboard.
   */
  async goto(options) {
    const { Dashboard, AddDashboard } = this.ctx.selectors.pages;
    const url = this.args.dashboard?.uid ? `${Dashboard.url(this.args.dashboard.uid)}?${Dashboard.Settings.Variables.Edit.urlParams(this.args.id)}` : AddDashboard.Settings.Variables.Edit.url(this.args.id);
    await super.navigate(url, options);
    if (semver__namespace.lt(this.ctx.grafanaVersion, "9.2.0") && this.args.id) {
      const list = this.getByGrafanaSelector(this.ctx.selectors.pages.Dashboard.Settings.Variables.List.table).locator(
        "tbody tr"
      );
      const variables = await list.all();
      await variables[Number(this.args.id)].click();
    }
  }
  /**
   * Sets the type of variable in the 'Variable type' dropdown to the given type
   */
  async setVariableType(type) {
    await this.getByGrafanaSelector(
      this.ctx.selectors.pages.Dashboard.Settings.Variables.Edit.General.generalTypeSelectV2
    ).locator("input").fill(type);
    await this.ctx.page.keyboard.press("ArrowDown");
    await this.ctx.page.keyboard.press("Enter");
    await this.getByGrafanaSelector(
      this.ctx.selectors.pages.Dashboard.Settings.Variables.Edit.General.generalTypeSelectV2
    ).scrollIntoViewIfNeeded();
  }
  /**
   * Triggers the variable query to run. Note that unlike {@link PanelEditPage.refreshPanel}, this method doesn't
   * return a request promise. This is because there's no canonical way of querying variables - data sources may
   * call any endpoint or resolve variables in the frontend. If you need to wait for a specific request, you can
   * do that in your test.
   * @example await this.ctx.page.waitForResponse((resp) => resp.url().includes('<url>')
   */
  async runQuery() {
    if (semver__namespace.gte(this.ctx.grafanaVersion, "9.2.0")) {
      await this.getByGrafanaSelector(
        this.ctx.selectors.pages.Dashboard.Settings.Variables.Edit.General.submitButton
      ).click();
    } else {
      const queryDataRequest = this.waitForQueryDataRequest();
      const includeAllSwitch = this.getByGrafanaSelector(
        this.ctx.selectors.pages.Dashboard.Settings.Variables.Edit.General.selectionOptionsIncludeAllSwitch
      ).locator("..");
      await includeAllSwitch.click();
      await queryDataRequest;
      await includeAllSwitch.click();
    }
  }
}

exports.VariableEditPage = VariableEditPage;
