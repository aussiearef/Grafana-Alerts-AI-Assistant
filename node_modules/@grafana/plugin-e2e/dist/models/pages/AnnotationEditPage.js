'use strict';

var semver = require('semver');
var DataSourcePicker = require('../components/DataSourcePicker.js');
var GrafanaPage = require('./GrafanaPage.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var semver__namespace = /*#__PURE__*/_interopNamespaceDefault(semver);

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, key + "" , value);
class AnnotationEditPage extends GrafanaPage.GrafanaPage {
  constructor(ctx, args) {
    super(ctx, args);
    this.ctx = ctx;
    this.args = args;
    __publicField(this, "datasource");
    this.datasource = new DataSourcePicker.DataSourcePicker(ctx);
  }
  /**
   * Navigates to the annotation edit page. If a dashboard uid was not provided, it's assumed that it's a new dashboard.
   */
  async goto(options) {
    const { Dashboard, AddDashboard } = this.ctx.selectors.pages;
    const url = this.args.dashboard?.uid ? `${Dashboard.url(this.args.dashboard.uid)}?${Dashboard.Settings.Annotations.Edit.urlParams(this.args.id)}` : AddDashboard.Settings.Annotations.Edit.url(this.args.id);
    await super.navigate(url, options);
    if (semver__namespace.lt(this.ctx.grafanaVersion, "9.2.0") && this.args.id) {
      const list = this.ctx.page.locator("tbody tr");
      const variables = await list.all();
      await variables[Number(this.args.id)].click();
    }
  }
  /**
   * Executes the annotation query defined in the annotation page and returns the response promise
   * @param options - Optional. RequestOptions to pass to waitForResponse
   */
  async runQuery(options) {
    const responsePromise = this.ctx.page.waitForResponse(
      (resp) => resp.url().includes(this.ctx.selectors.apis.DataSource.query),
      options
    );
    const testButton = semver__namespace.gte(this.ctx.grafanaVersion, "11.0.0") ? this.getByGrafanaSelector(this.ctx.selectors.components.Annotations.editor.testButton) : this.ctx.page.getByRole("button", { name: "TEST" });
    await testButton.click();
    return responsePromise;
  }
}

exports.AnnotationEditPage = AnnotationEditPage;
