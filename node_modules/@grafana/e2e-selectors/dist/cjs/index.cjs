'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var semver = require('semver');

function resolveSelectors(versionedSelectors, grafanaVersion = "latest") {
  const version = grafanaVersion.replace(/\-.*/, "");
  return resolveSelectorGroup(versionedSelectors, version);
}
function resolveSelectorGroup(group, grafanaVersion) {
  const result = {};
  for (const [key, value] of Object.entries(group)) {
    if (isVersionedSelectorGroup(value)) {
      result[key] = resolveSelectorGroup(value, grafanaVersion);
    } else {
      assertIsSemverValid(value, key);
      result[key] = resolveSelector(value, grafanaVersion);
    }
  }
  return result;
}
function isVersionedSelectorGroup(target) {
  if (typeof target === "object") {
    const [first] = Object.keys(target);
    return !semver.valid(first);
  }
  return false;
}
function resolveSelector(versionedSelector, grafanaVersion) {
  let versionToUse;
  let versions = Object.keys(versionedSelector).sort(semver.compare);
  if (grafanaVersion === "latest") {
    return versionedSelector[versions[versions.length - 1]];
  }
  for (const version of versions) {
    if (semver.gte(grafanaVersion, version)) {
      versionToUse = version;
    }
  }
  if (!versionToUse) {
    versionToUse = versions[versions.length - 1];
  }
  return versionedSelector[versionToUse];
}
function assertIsSemverValid(versionedSelector, selectorName) {
  if (!Object.keys(versionedSelector).every((version) => semver.valid(version))) {
    throw new Error(`Invalid semver version: '${selectorName}'`);
  }
}

const MIN_GRAFANA_VERSION = "8.5.0";

const versionedComponents = {
  RadioButton: {
    container: {
      "10.2.3": "data-testid radio-button"
    }
  },
  Breadcrumbs: {
    breadcrumb: {
      "9.4.0": (title) => `data-testid ${title} breadcrumb`
    }
  },
  TimePicker: {
    openButton: {
      [MIN_GRAFANA_VERSION]: "data-testid TimePicker Open Button"
    },
    overlayContent: {
      "10.2.3": "data-testid TimePicker Overlay Content"
    },
    fromField: {
      "10.2.3": "data-testid Time Range from field",
      [MIN_GRAFANA_VERSION]: "Time Range from field"
    },
    toField: {
      "10.2.3": "data-testid Time Range to field",
      [MIN_GRAFANA_VERSION]: "Time Range to field"
    },
    applyTimeRange: {
      [MIN_GRAFANA_VERSION]: "data-testid TimePicker submit button"
    },
    copyTimeRange: {
      "10.4.0": "data-testid TimePicker copy button"
    },
    pasteTimeRange: {
      "10.4.0": "data-testid TimePicker paste button"
    },
    calendar: {
      label: {
        "10.2.3": "data-testid Time Range calendar",
        [MIN_GRAFANA_VERSION]: "Time Range calendar"
      },
      openButton: {
        "10.2.3": "data-testid Open time range calendar",
        [MIN_GRAFANA_VERSION]: "Open time range calendar"
      },
      closeButton: {
        "10.2.3": "data-testid Close time range Calendar",
        [MIN_GRAFANA_VERSION]: "Close time range Calendar"
      }
    },
    absoluteTimeRangeTitle: {
      [MIN_GRAFANA_VERSION]: "data-testid-absolute-time-range-narrow"
    }
  },
  DataSourcePermissions: {
    form: { "9.5.0": () => 'form[name="addPermission"]' },
    roleType: {
      "9.5.0": "Role to add new permission to"
    },
    rolePicker: {
      "9.5.0": "Built-in role picker"
    },
    permissionLevel: {
      "12.0.0": "Permission level",
      "9.5.0": "Permission Level"
    }
  },
  DateTimePicker: {
    input: {
      "10.2.3": "data-testid date-time-input"
    }
  },
  DataSource: {
    TestData: {
      QueryTab: {
        scenarioSelectContainer: {
          [MIN_GRAFANA_VERSION]: "Test Data Query scenario select container"
        },
        scenarioSelect: {
          [MIN_GRAFANA_VERSION]: "Test Data Query scenario select"
        },
        max: {
          [MIN_GRAFANA_VERSION]: "TestData max"
        },
        min: {
          [MIN_GRAFANA_VERSION]: "TestData min"
        },
        noise: {
          [MIN_GRAFANA_VERSION]: "TestData noise"
        },
        seriesCount: {
          [MIN_GRAFANA_VERSION]: "TestData series count"
        },
        spread: {
          [MIN_GRAFANA_VERSION]: "TestData spread"
        },
        startValue: {
          [MIN_GRAFANA_VERSION]: "TestData start value"
        },
        drop: {
          [MIN_GRAFANA_VERSION]: "TestData drop values"
        }
      }
    },
    DataSourceHttpSettings: {
      urlInput: {
        "10.4.0": "data-testid Datasource HTTP settings url",
        [MIN_GRAFANA_VERSION]: "Datasource HTTP settings url"
      }
    },
    Jaeger: {
      traceIDInput: {
        [MIN_GRAFANA_VERSION]: "Trace ID"
      }
    },
    Prometheus: {
      configPage: {
        connectionSettings: {
          [MIN_GRAFANA_VERSION]: "Data source connection URL"
          // aria-label in grafana experimental
        },
        manageAlerts: {
          "10.4.0": "prometheus-alerts-manager"
          // id for switch component
        },
        scrapeInterval: {
          "10.4.0": "data-testid scrape interval"
        },
        queryTimeout: {
          "10.4.0": "data-testid query timeout"
        },
        defaultEditor: {
          "10.4.0": "data-testid default editor"
        },
        disableMetricLookup: {
          "10.4.0": "disable-metric-lookup"
          // id for switch component
        },
        prometheusType: {
          "10.4.0": "data-testid prometheus type"
        },
        prometheusVersion: {
          "10.4.0": "data-testid prometheus version"
        },
        cacheLevel: {
          "10.4.0": "data-testid cache level"
        },
        incrementalQuerying: {
          "10.4.0": "prometheus-incremental-querying"
          // id for switch component
        },
        queryOverlapWindow: {
          "10.4.0": "data-testid query overlap window"
        },
        disableRecordingRules: {
          "10.4.0": "disable-recording-rules"
          // id for switch component
        },
        customQueryParameters: {
          "10.4.0": "data-testid custom query parameters"
        },
        httpMethod: {
          "10.4.0": "data-testid http method"
        },
        exemplarsAddButton: {
          "10.3.0": "data-testid Add exemplar config button",
          [MIN_GRAFANA_VERSION]: "Add exemplar config button"
        },
        internalLinkSwitch: {
          "10.3.0": "data-testid Internal link switch",
          [MIN_GRAFANA_VERSION]: "Internal link switch"
        },
        codeModeMetricNamesSuggestionLimit: {
          "11.1.0": "data-testid code mode metric names suggestion limit"
        }
      },
      queryEditor: {
        explain: {
          "10.4.0": "data-testid prometheus explain switch wrapper"
        },
        editorToggle: {
          "10.4.0": "data-testid QueryEditorModeToggle"
          // wrapper for toggle
        },
        options: {
          "10.4.0": "data-testid prometheus options"
          // wrapper for options group
        },
        legend: {
          "10.4.0": "data-testid prometheus legend wrapper"
          // wrapper for multiple compomnents
        },
        format: {
          "10.4.0": "data-testid prometheus format"
        },
        step: {
          "10.4.0": "prometheus-step"
          // id for autosize component
        },
        type: {
          "10.4.0": "data-testid prometheus type"
          //wrapper for radio button group
        },
        exemplars: {
          "10.4.0": "prometheus-exemplars"
          // id for editor switch component
        },
        builder: {
          // see QueryBuilder below for commented selectors
          metricSelect: {
            "10.4.0": "data-testid metric select"
          },
          hints: {
            "10.4.0": "data-testid prometheus hints"
            // wrapper for hints component
          },
          metricsExplorer: {
            "10.4.0": "data-testid metrics explorer"
          },
          queryAdvisor: {
            "10.4.0": "data-testid query advisor"
          }
        },
        code: {
          queryField: {
            "10.4.0": "data-testid prometheus query field"
          },
          metricsCountInfo: {
            "11.1.0": "data-testid metrics count disclaimer"
          },
          metricsBrowser: {
            openButton: {
              "10.4.0": "data-testid open metrics browser"
            },
            selectMetric: {
              "10.4.0": "data-testid select a metric"
            },
            seriesLimit: {
              "10.3.1": "data-testid series limit"
            },
            metricList: {
              "10.4.0": "data-testid metric list"
            },
            labelNamesFilter: {
              "10.4.0": "data-testid label names filter"
            },
            labelValuesFilter: {
              "10.4.0": "data-testid label values filter"
            },
            useQuery: {
              "10.4.0": "data-testid use query"
            },
            useAsRateQuery: {
              "10.4.0": "data-testid use as rate query"
            },
            validateSelector: {
              "10.4.0": "data-testid validate selector"
            },
            clear: {
              "10.4.0": "data-testid clear"
            }
          }
        }
      },
      exemplarMarker: {
        "10.3.0": "data-testid Exemplar marker",
        [MIN_GRAFANA_VERSION]: "Exemplar marker"
      },
      variableQueryEditor: {
        queryType: {
          "10.4.0": "data-testid query type"
        },
        labelnames: {
          metricRegex: {
            "10.4.0": "data-testid label names metric regex"
          }
        },
        labelValues: {
          labelSelect: {
            "10.4.0": "data-testid label values label select"
          }
        },
        metricNames: {
          metricRegex: {
            "10.4.0": "data-testid metric names metric regex"
          }
        },
        varQueryResult: {
          "10.4.0": "data-testid variable query result"
        },
        seriesQuery: {
          "10.4.0": "data-testid prometheus series query"
        },
        classicQuery: {
          "10.4.0": "data-testid prometheus classic query"
        }
      },
      annotations: {
        minStep: {
          "10.4.0": "prometheus-annotation-min-step"
          // id for autosize input
        },
        title: {
          "10.4.0": "data-testid prometheus annotation title"
        },
        tags: {
          "10.4.0": "data-testid prometheus annotation tags"
        },
        text: {
          "10.4.0": "data-testid prometheus annotation text"
        },
        seriesValueAsTimestamp: {
          "10.4.0": "data-testid prometheus annotation series value as timestamp"
        }
      }
    }
  },
  Menu: {
    MenuComponent: {
      [MIN_GRAFANA_VERSION]: (title) => `${title} menu`
    },
    MenuGroup: {
      [MIN_GRAFANA_VERSION]: (title) => `${title} menu group`
    },
    MenuItem: {
      [MIN_GRAFANA_VERSION]: (title) => `${title} menu item`
    },
    SubMenu: {
      container: {
        "10.3.0": "data-testid SubMenu container",
        [MIN_GRAFANA_VERSION]: "SubMenu container"
      },
      icon: {
        "10.3.0": "data-testid SubMenu icon",
        [MIN_GRAFANA_VERSION]: "SubMenu icon"
      }
    }
  },
  Panels: {
    Panel: {
      title: {
        [MIN_GRAFANA_VERSION]: (title) => `data-testid Panel header ${title}`
      },
      content: {
        "11.1.0": "data-testid panel content"
      },
      headerItems: {
        "10.2.0": (item) => `data-testid Panel header item ${item}`
      },
      menuItems: {
        "9.5.0": (item) => `data-testid Panel menu item ${item}`
      },
      menu: {
        "9.5.0": (title) => `data-testid Panel menu ${title}`
      },
      containerByTitle: {
        [MIN_GRAFANA_VERSION]: (title) => `${title} panel`
      },
      headerCornerInfo: {
        [MIN_GRAFANA_VERSION]: (mode) => `Panel header ${mode}`
      },
      status: {
        "10.2.0": (status) => `data-testid Panel status ${status}`,
        [MIN_GRAFANA_VERSION]: (_) => "Panel status"
      },
      loadingBar: {
        "10.0.0": () => `Panel loading bar`
      },
      HoverWidget: {
        container: {
          "10.1.0": "data-testid hover-header-container",
          [MIN_GRAFANA_VERSION]: "hover-header-container"
        },
        dragIcon: {
          "10.0.0": "data-testid drag-icon"
        }
      },
      PanelDataErrorMessage: {
        "10.4.0": "data-testid Panel data error message"
      }
    },
    Visualization: {
      Graph: {
        container: {
          "9.5.0": "Graph container"
        },
        VisualizationTab: {
          legendSection: {
            [MIN_GRAFANA_VERSION]: "Legend section"
          }
        },
        Legend: {
          legendItemAlias: {
            [MIN_GRAFANA_VERSION]: (name) => `gpl alias ${name}`
          },
          showLegendSwitch: {
            [MIN_GRAFANA_VERSION]: "gpl show legend"
          }
        },
        xAxis: {
          labels: {
            [MIN_GRAFANA_VERSION]: () => "div.flot-x-axis > div.flot-tick-label"
          }
        }
      },
      BarGauge: {
        valueV2: {
          [MIN_GRAFANA_VERSION]: "data-testid Bar gauge value"
        }
      },
      PieChart: {
        svgSlice: {
          "10.3.0": "data testid Pie Chart Slice"
        }
      },
      Text: {
        container: { [MIN_GRAFANA_VERSION]: () => ".markdown-html" }
      },
      Table: {
        header: {
          [MIN_GRAFANA_VERSION]: "table header"
        },
        footer: {
          [MIN_GRAFANA_VERSION]: "table-footer"
        },
        body: {
          "10.2.0": "data-testid table body"
        }
      }
    }
  },
  VizLegend: {
    seriesName: {
      "10.3.0": (name) => `data-testid VizLegend series ${name}`
    }
  },
  Drawer: {
    General: {
      title: {
        [MIN_GRAFANA_VERSION]: (title) => `Drawer title ${title}`
      },
      expand: {
        [MIN_GRAFANA_VERSION]: "Drawer expand"
      },
      contract: {
        [MIN_GRAFANA_VERSION]: "Drawer contract"
      },
      close: {
        "10.3.0": "data-testid Drawer close",
        [MIN_GRAFANA_VERSION]: "Drawer close"
      },
      rcContentWrapper: { "9.4.0": () => ".rc-drawer-content-wrapper" },
      subtitle: {
        "10.4.0": "data-testid drawer subtitle"
      }
    },
    DashboardSaveDrawer: {
      saveButton: {
        "11.1.0": "data-testid Save dashboard drawer button"
      },
      saveAsButton: {
        "11.1.0": "data-testid Save as dashboard drawer button"
      },
      saveAsTitleInput: {
        "11.1.0": "Save dashboard title field"
      }
    }
  },
  PanelEditor: {
    General: {
      content: {
        "11.1.0": "data-testid Panel editor content",
        "8.0.0": "Panel editor content"
      }
    },
    OptionsPane: {
      content: {
        "11.1.0": "data-testid Panel editor option pane content",
        [MIN_GRAFANA_VERSION]: "Panel editor option pane content"
      },
      select: {
        [MIN_GRAFANA_VERSION]: "Panel editor option pane select"
      },
      fieldLabel: {
        [MIN_GRAFANA_VERSION]: (type) => `${type} field property editor`
      },
      fieldInput: {
        "11.0.0": (title) => `data-testid Panel editor option pane field input ${title}`
      }
    },
    DataPane: {
      content: {
        "11.1.0": "data-testid Panel editor data pane content",
        [MIN_GRAFANA_VERSION]: "Panel editor data pane content"
      }
    },
    applyButton: {
      "9.2.0": "data-testid Apply changes and go back to dashboard",
      "9.1.0": "Apply changes and go back to dashboard",
      "8.0.0": "panel editor apply"
    },
    toggleVizPicker: {
      "10.0.0": "data-testid toggle-viz-picker",
      "8.0.0": "toggle-viz-picker"
    },
    toggleVizOptions: {
      "10.1.0": "data-testid toggle-viz-options",
      [MIN_GRAFANA_VERSION]: "toggle-viz-options"
    },
    toggleTableView: {
      "11.1.0": "data-testid toggle-table-view",
      [MIN_GRAFANA_VERSION]: "toggle-table-view"
    },
    // [Geomap] Map controls
    showZoomField: {
      "10.2.0": "Map controls Show zoom control field property editor"
    },
    showAttributionField: {
      "10.2.0": "Map controls Show attribution field property editor"
    },
    showScaleField: {
      "10.2.0": "Map controls Show scale field property editor"
    },
    showMeasureField: {
      "10.2.0": "Map controls Show measure tools field property editor"
    },
    showDebugField: {
      "10.2.0": "Map controls Show debug field property editor"
    },
    measureButton: {
      "9.2.0": "show measure tools"
    }
  },
  PanelInspector: {
    Data: {
      content: {
        [MIN_GRAFANA_VERSION]: "Panel inspector Data content"
      }
    },
    Stats: {
      content: {
        [MIN_GRAFANA_VERSION]: "Panel inspector Stats content"
      }
    },
    Json: {
      content: {
        "11.1.0": "data-testid Panel inspector Json content",
        [MIN_GRAFANA_VERSION]: "Panel inspector Json content"
      }
    },
    Query: {
      content: {
        [MIN_GRAFANA_VERSION]: "Panel inspector Query content"
      },
      refreshButton: {
        [MIN_GRAFANA_VERSION]: "Panel inspector Query refresh button"
      },
      jsonObjectKeys: {
        [MIN_GRAFANA_VERSION]: () => ".json-formatter-key"
      }
    }
  },
  Tab: {
    title: {
      "11.2.0": (title) => `data-testid Tab ${title}`
    },
    active: { [MIN_GRAFANA_VERSION]: () => '[class*="-activeTabStyle"]' }
  },
  RefreshPicker: {
    runButtonV2: {
      [MIN_GRAFANA_VERSION]: "data-testid RefreshPicker run button"
    },
    intervalButtonV2: {
      [MIN_GRAFANA_VERSION]: "data-testid RefreshPicker interval button"
    }
  },
  QueryTab: {
    content: {
      [MIN_GRAFANA_VERSION]: "Query editor tab content"
    },
    queryInspectorButton: {
      [MIN_GRAFANA_VERSION]: "Query inspector button"
    },
    queryHistoryButton: {
      "10.2.0": "data-testid query-history-button",
      [MIN_GRAFANA_VERSION]: "query-history-button"
    },
    addQuery: {
      "10.2.0": "data-testid query-tab-add-query",
      [MIN_GRAFANA_VERSION]: "Query editor add query button"
    },
    addQueryFromLibrary: {
      "11.5.0": "data-testid query-tab-add-query-from-library"
    },
    queryGroupTopSection: {
      "11.2.0": "data-testid query group top section"
    },
    addExpression: {
      "11.2.0": "data-testid query-tab-add-expression"
    }
  },
  QueryHistory: {
    queryText: {
      "9.0.0": "Query text"
    }
  },
  QueryEditorRows: {
    rows: {
      [MIN_GRAFANA_VERSION]: "Query editor row"
    }
  },
  QueryEditorRow: {
    actionButton: {
      "10.4.0": (title) => `data-testid ${title}`
    },
    title: {
      [MIN_GRAFANA_VERSION]: (refId) => `Query editor row title ${refId}`
    },
    container: {
      [MIN_GRAFANA_VERSION]: (refId) => `Query editor row ${refId}`
    }
  },
  AlertTab: {
    content: {
      "10.2.3": "data-testid Alert editor tab content",
      [MIN_GRAFANA_VERSION]: "Alert editor tab content"
    }
  },
  AlertRules: {
    groupToggle: {
      "11.0.0": "data-testid group-collapse-toggle"
    },
    toggle: {
      "11.0.0": "data-testid collapse-toggle"
    },
    expandedContent: {
      "11.0.0": "data-testid expanded-content"
    },
    previewButton: {
      "11.1.0": "data-testid alert-rule preview-button"
    },
    ruleNameField: {
      "11.1.0": "data-testid alert-rule name-field"
    },
    newFolderButton: {
      "11.1.0": "data-testid alert-rule new-folder-button"
    },
    newFolderNameField: {
      "11.1.0": "data-testid alert-rule name-folder-name-field"
    },
    newFolderNameCreateButton: {
      "11.1.0": "data-testid alert-rule name-folder-name-create-button"
    },
    newEvaluationGroupButton: {
      "11.1.0": "data-testid alert-rule new-evaluation-group-button"
    },
    newEvaluationGroupName: {
      "11.1.0": "data-testid alert-rule new-evaluation-group-name"
    },
    newEvaluationGroupInterval: {
      "11.1.0": "data-testid alert-rule new-evaluation-group-interval"
    },
    newEvaluationGroupCreate: {
      "11.1.0": "data-testid alert-rule new-evaluation-group-create-button"
    },
    step: {
      "11.5.0": (stepNo) => `data-testid alert-rule step-${stepNo}`
    },
    stepAdvancedModeSwitch: {
      "11.5.0": (stepNo) => `data-testid advanced-mode-switch step-${stepNo}`
    }
  },
  Alert: {
    alertV2: {
      [MIN_GRAFANA_VERSION]: (severity) => `data-testid Alert ${severity}`
    }
  },
  TransformTab: {
    content: {
      "10.1.0": "data-testid Transform editor tab content",
      [MIN_GRAFANA_VERSION]: "Transform editor tab content"
    },
    newTransform: {
      "10.1.0": (name) => `data-testid New transform ${name}`
    },
    transformationEditor: {
      "10.1.0": (name) => `data-testid Transformation editor ${name}`
    },
    transformationEditorDebugger: {
      "10.1.0": (name) => `data-testid Transformation editor debugger ${name}`
    }
  },
  Transforms: {
    card: {
      "10.1.0": (name) => `data-testid New transform ${name}`
    },
    disableTransformationButton: {
      "10.4.0": "data-testid Disable transformation button"
    },
    Reduce: {
      modeLabel: {
        "10.2.3": "data-testid Transform mode label",
        [MIN_GRAFANA_VERSION]: "Transform mode label"
      },
      calculationsLabel: {
        "10.2.3": "data-testid Transform calculations label",
        [MIN_GRAFANA_VERSION]: "Transform calculations label"
      }
    },
    SpatialOperations: {
      actionLabel: {
        "9.1.2": "root Action field property editor"
      },
      locationLabel: {
        "10.2.0": "root Location Mode field property editor"
      },
      location: {
        autoOption: {
          "9.1.2": "Auto location option"
        },
        coords: {
          option: {
            "9.1.2": "Coords location option"
          },
          latitudeFieldLabel: {
            "9.1.2": "root Latitude field field property editor"
          },
          longitudeFieldLabel: {
            "9.1.2": "root Longitude field field property editor"
          }
        },
        geohash: {
          option: {
            "9.1.2": "Geohash location option"
          },
          geohashFieldLabel: {
            "9.1.2": "root Geohash field field property editor"
          }
        },
        lookup: {
          option: {
            "9.1.2": "Lookup location option"
          },
          lookupFieldLabel: {
            "9.1.2": "root Lookup field field property editor"
          },
          gazetteerFieldLabel: {
            "9.1.2": "root Gazetteer field property editor"
          }
        }
      }
    },
    searchInput: {
      "10.2.3": "data-testid search transformations",
      [MIN_GRAFANA_VERSION]: "search transformations"
    },
    noTransformationsMessage: {
      "10.2.3": "data-testid no transformations message"
    },
    addTransformationButton: {
      "10.1.0": "data-testid add transformation button",
      [MIN_GRAFANA_VERSION]: "add transformation button"
    },
    removeAllTransformationsButton: {
      "10.4.0": "data-testid remove all transformations button"
    }
  },
  NavBar: {
    Configuration: {
      button: {
        "9.5.0": "Configuration"
      }
    },
    Toggle: {
      button: {
        "10.2.3": "data-testid Toggle menu",
        [MIN_GRAFANA_VERSION]: "Toggle menu"
      }
    },
    Reporting: {
      button: {
        "9.5.0": "Reporting"
      }
    }
  },
  NavMenu: {
    Menu: {
      "10.2.3": "data-testid navigation mega-menu"
    },
    item: {
      "9.5.0": "data-testid Nav menu item"
    }
  },
  NavToolbar: {
    container: {
      "9.4.0": "data-testid Nav toolbar"
    },
    commandPaletteTrigger: {
      "11.5.0": "data-testid Command palette trigger"
    },
    shareDashboard: {
      "11.1.0": "data-testid Share dashboard"
    },
    markAsFavorite: {
      "11.1.0": "data-testid Mark as favorite"
    },
    editDashboard: {
      editButton: {
        "11.1.0": "data-testid Edit dashboard button"
      },
      saveButton: {
        "11.1.0": "data-testid Save dashboard button"
      },
      exitButton: {
        "11.1.0": "data-testid Exit edit mode button"
      },
      settingsButton: {
        "11.1.0": "data-testid Dashboard settings"
      },
      addRowButton: {
        "11.1.0": "data-testid Add row button"
      },
      addLibraryPanelButton: {
        "11.1.0": "data-testid Add a panel from the panel library button"
      },
      addVisualizationButton: {
        "11.1.0": "data-testid Add new visualization menu item"
      },
      pastePanelButton: {
        "11.1.0": "data-testid Paste panel button"
      },
      discardChangesButton: {
        "11.1.0": "data-testid Discard changes button"
      },
      discardLibraryPanelButton: {
        "11.1.0": "data-testid Discard library panel button"
      },
      unlinkLibraryPanelButton: {
        "11.1.0": "data-testid Unlink library panel button"
      },
      saveLibraryPanelButton: {
        "11.1.0": "data-testid Save library panel button"
      },
      backToDashboardButton: {
        "11.1.0": "data-testid Back to dashboard button"
      }
    }
  },
  PageToolbar: {
    container: { [MIN_GRAFANA_VERSION]: () => ".page-toolbar" },
    item: {
      [MIN_GRAFANA_VERSION]: (tooltip) => `${tooltip}`
    },
    itemButton: {
      "9.5.0": (title) => `data-testid ${title}`
    }
  },
  QueryEditorToolbarItem: {
    button: {
      [MIN_GRAFANA_VERSION]: (title) => `QueryEditor toolbar item button ${title}`
    }
  },
  BackButton: {
    backArrow: {
      "10.3.0": "data-testid Go Back",
      [MIN_GRAFANA_VERSION]: "Go Back"
    }
  },
  OptionsGroup: {
    group: {
      "11.1.0": (title) => title ? `data-testid Options group ${title}` : "data-testid Options group",
      [MIN_GRAFANA_VERSION]: (title) => title ? `Options group ${title}` : "Options group"
    },
    toggle: {
      "11.1.0": (title) => title ? `data-testid Options group ${title} toggle` : "data-testid Options group toggle",
      [MIN_GRAFANA_VERSION]: (title) => title ? `Options group ${title} toggle` : "Options group toggle"
    }
  },
  PluginVisualization: {
    item: {
      [MIN_GRAFANA_VERSION]: (title) => `Plugin visualization item ${title}`
    },
    current: {
      [MIN_GRAFANA_VERSION]: () => '[class*="-currentVisualizationItem"]'
    }
  },
  Select: {
    menu: {
      "11.5.0": "data-testid Select menu",
      [MIN_GRAFANA_VERSION]: "Select options menu"
    },
    option: {
      "11.1.0": "data-testid Select option",
      [MIN_GRAFANA_VERSION]: "Select option"
    },
    toggleAllOptions: {
      "11.3.0": "data-testid toggle all options"
    },
    input: {
      [MIN_GRAFANA_VERSION]: () => 'input[id*="time-options-input"]'
    },
    singleValue: {
      [MIN_GRAFANA_VERSION]: () => 'div[class*="-singleValue"]'
    }
  },
  FieldConfigEditor: {
    content: {
      [MIN_GRAFANA_VERSION]: "Field config editor content"
    }
  },
  OverridesConfigEditor: {
    content: {
      [MIN_GRAFANA_VERSION]: "Field overrides editor content"
    }
  },
  FolderPicker: {
    containerV2: {
      [MIN_GRAFANA_VERSION]: "data-testid Folder picker select container"
    },
    input: {
      "10.4.0": "data-testid folder-picker-input"
    }
  },
  ReadonlyFolderPicker: {
    container: {
      [MIN_GRAFANA_VERSION]: "data-testid Readonly folder picker select container"
    }
  },
  DataSourcePicker: {
    container: {
      "10.0.0": "data-testid Data source picker select container",
      "8.0.0": "Data source picker select container"
    },
    inputV2: {
      "10.1.0": "data-testid Select a data source",
      [MIN_GRAFANA_VERSION]: "Select a data source"
    },
    dataSourceList: {
      "10.4.0": "data-testid Data source list dropdown"
    },
    advancedModal: {
      dataSourceList: {
        "10.4.0": "data-testid Data source list"
      },
      builtInDataSourceList: {
        "10.4.0": "data-testid Built in data source list"
      }
    }
  },
  TimeZonePicker: {
    containerV2: {
      [MIN_GRAFANA_VERSION]: "data-testid Time zone picker select container"
    },
    changeTimeSettingsButton: {
      "11.0.0": "data-testid Time zone picker Change time settings button"
    }
  },
  WeekStartPicker: {
    containerV2: {
      [MIN_GRAFANA_VERSION]: "data-testid Choose starting day of the week"
    },
    placeholder: {
      [MIN_GRAFANA_VERSION]: "Choose starting day of the week"
    }
  },
  TraceViewer: {
    spanBar: {
      "9.0.0": "data-testid SpanBar--wrapper"
    }
  },
  QueryField: {
    container: {
      "10.3.0": "data-testid Query field",
      [MIN_GRAFANA_VERSION]: "Query field"
    }
  },
  QueryBuilder: {
    queryPatterns: {
      "10.3.0": "data-testid Query patterns",
      [MIN_GRAFANA_VERSION]: "Query patterns"
    },
    labelSelect: {
      "10.3.0": "data-testid Select label",
      [MIN_GRAFANA_VERSION]: "Select label"
    },
    inputSelect: {
      "11.1.0": "data-testid Select label-input"
    },
    valueSelect: {
      "10.3.0": "data-testid Select value",
      [MIN_GRAFANA_VERSION]: "Select value"
    },
    matchOperatorSelect: {
      "10.3.0": "data-testid Select match operator",
      [MIN_GRAFANA_VERSION]: "Select match operator"
    }
  },
  ValuePicker: {
    button: {
      "10.3.0": (name) => `data-testid Value picker button ${name}`
    },
    select: {
      "10.3.0": (name) => `data-testid Value picker select ${name}`
    }
  },
  Search: {
    sectionV2: {
      [MIN_GRAFANA_VERSION]: "data-testid Search section"
    },
    itemsV2: {
      [MIN_GRAFANA_VERSION]: "data-testid Search items"
    },
    cards: {
      [MIN_GRAFANA_VERSION]: "data-testid Search cards"
    },
    collapseFolder: {
      [MIN_GRAFANA_VERSION]: (sectionId) => `data-testid Collapse folder ${sectionId}`
    },
    expandFolder: {
      [MIN_GRAFANA_VERSION]: (sectionId) => `data-testid Expand folder ${sectionId}`
    },
    dashboardItem: {
      [MIN_GRAFANA_VERSION]: (item) => `data-testid Dashboard search item ${item}`
    },
    dashboardCard: {
      [MIN_GRAFANA_VERSION]: (item) => `data-testid Search card ${item}`
    },
    folderHeader: {
      "9.3.0": (folderName) => `data-testid Folder header ${folderName}`
    },
    folderContent: {
      "9.3.0": (folderName) => `data-testid Folder content ${folderName}`
    },
    dashboardItems: {
      [MIN_GRAFANA_VERSION]: "data-testid Dashboard search item"
    }
  },
  DashboardLinks: {
    container: {
      [MIN_GRAFANA_VERSION]: "data-testid Dashboard link container"
    },
    dropDown: {
      [MIN_GRAFANA_VERSION]: "data-testid Dashboard link dropdown"
    },
    link: {
      [MIN_GRAFANA_VERSION]: "data-testid Dashboard link"
    }
  },
  LoadingIndicator: {
    icon: {
      "10.4.0": "data-testid Loading indicator",
      [MIN_GRAFANA_VERSION]: "Loading indicator"
    }
  },
  CallToActionCard: {
    buttonV2: {
      [MIN_GRAFANA_VERSION]: (name) => `data-testid Call to action button ${name}`
    }
  },
  DataLinksContextMenu: {
    singleLink: {
      "10.3.0": "data-testid Data link",
      [MIN_GRAFANA_VERSION]: "Data link"
    }
  },
  CodeEditor: {
    container: {
      "10.2.3": "data-testid Code editor container",
      [MIN_GRAFANA_VERSION]: "Code editor container"
    }
  },
  ReactMonacoEditor: {
    editorLazy: {
      "11.1.0": "data-testid ReactMonacoEditor editorLazy"
    }
  },
  DashboardImportPage: {
    textarea: {
      [MIN_GRAFANA_VERSION]: "data-testid-import-dashboard-textarea"
    },
    submit: {
      [MIN_GRAFANA_VERSION]: "data-testid-load-dashboard"
    }
  },
  ImportDashboardForm: {
    name: {
      [MIN_GRAFANA_VERSION]: "data-testid-import-dashboard-title"
    },
    submit: {
      [MIN_GRAFANA_VERSION]: "data-testid-import-dashboard-submit"
    }
  },
  PanelAlertTabContent: {
    content: {
      "10.2.3": "data-testid Unified alert editor tab content",
      [MIN_GRAFANA_VERSION]: "Unified alert editor tab content"
    }
  },
  VisualizationPreview: {
    card: {
      [MIN_GRAFANA_VERSION]: (name) => `data-testid suggestion-${name}`
    }
  },
  ColorSwatch: {
    name: {
      [MIN_GRAFANA_VERSION]: "data-testid-colorswatch"
    }
  },
  DashboardRow: {
    title: {
      [MIN_GRAFANA_VERSION]: (title) => `data-testid dashboard-row-title-${title}`
    }
  },
  UserProfile: {
    profileSaveButton: {
      [MIN_GRAFANA_VERSION]: "data-testid-user-profile-save"
    },
    preferencesSaveButton: {
      [MIN_GRAFANA_VERSION]: "data-testid-shared-prefs-save"
    },
    orgsTable: {
      [MIN_GRAFANA_VERSION]: "data-testid-user-orgs-table"
    },
    sessionsTable: {
      [MIN_GRAFANA_VERSION]: "data-testid-user-sessions-table"
    },
    extensionPointTabs: {
      "10.2.3": "data-testid-extension-point-tabs"
    },
    extensionPointTab: {
      "10.2.3": (tabId) => `data-testid-extension-point-tab-${tabId}`
    }
  },
  FileUpload: {
    inputField: {
      "9.0.0": "data-testid-file-upload-input-field"
    },
    fileNameSpan: {
      "9.0.0": "data-testid-file-upload-file-name"
    }
  },
  DebugOverlay: {
    wrapper: {
      "9.2.0": "debug-overlay"
    }
  },
  OrgRolePicker: {
    input: {
      "9.5.0": "Role"
    }
  },
  AnalyticsToolbarButton: {
    button: {
      "9.5.0": "Dashboard insights"
    }
  },
  Variables: {
    variableOption: {
      "9.5.0": "data-testid variable-option"
    },
    variableLinkWrapper: {
      "11.1.1": "data-testid variable-link-wrapper"
    }
  },
  Annotations: {
    annotationsTypeInput: {
      "11.1.0": "data-testid annotations-type-input",
      [MIN_GRAFANA_VERSION]: "annotations-type-input"
    },
    annotationsChoosePanelInput: {
      "11.1.0": "data-testid choose-panels-input",
      [MIN_GRAFANA_VERSION]: "choose-panels-input"
    },
    editor: {
      testButton: {
        "11.0.0": "data-testid annotations-test-button"
      },
      resultContainer: {
        "11.0.0": "data-testid annotations-query-result-container"
      }
    }
  },
  Tooltip: {
    container: {
      "10.2.0": "data-testid tooltip"
    }
  },
  ReturnToPrevious: {
    buttonGroup: {
      "11.0.0": "data-testid dismissable button group"
    },
    backButton: {
      "11.0.0": "data-testid back"
    },
    dismissButton: {
      "11.0.0": "data-testid dismiss"
    }
  },
  SQLQueryEditor: {
    selectColumn: {
      "11.0.0": "data-testid select-column"
    },
    selectColumnInput: { "11.0.0": "data-testid select-column-input" },
    selectFunctionParameter: { "11.0.0": (name) => `data-testid select-function-parameter-${name}` },
    selectAggregation: {
      "11.0.0": "data-testid select-aggregation"
    },
    selectAggregationInput: { "11.0.0": "data-testid select-aggregation-input" },
    selectAlias: {
      "11.0.0": "data-testid select-alias"
    },
    selectAliasInput: { "11.0.0": "data-testid select-alias-input" },
    selectInputParameter: { "11.0.0": "data-testid select-input-parameter" },
    filterConjunction: {
      "11.0.0": "data-testid filter-conjunction"
    },
    filterField: {
      "11.0.0": "data-testid filter-field"
    },
    filterOperator: {
      "11.0.0": "data-testid filter-operator"
    },
    headerTableSelector: {
      "11.0.0": "data-testid header-table-selector"
    },
    headerFilterSwitch: {
      "11.0.0": "data-testid header-filter-switch"
    },
    headerGroupSwitch: {
      "11.0.0": "data-testid header-group-switch"
    },
    headerOrderSwitch: {
      "11.0.0": "data-testid header-order-switch"
    },
    headerPreviewSwitch: {
      "11.0.0": "data-testid header-preview-switch"
    }
  },
  EntityNotFound: {
    container: {
      "11.2.0": "data-testid entity-not-found"
    }
  },
  Portal: {
    container: {
      "11.5.0": "data-testid portal-container"
    }
  }
};

const versionedPages = {
  Alerting: {
    AddAlertRule: {
      url: {
        "10.1.0": "/alerting/new/alerting",
        [MIN_GRAFANA_VERSION]: "/alerting/new"
      }
    },
    EditAlertRule: {
      url: {
        [MIN_GRAFANA_VERSION]: (alertRuleUid) => `alerting/${alertRuleUid}/edit`
      }
    }
  },
  Login: {
    url: {
      [MIN_GRAFANA_VERSION]: "/login"
    },
    username: {
      "10.2.3": "data-testid Username input field",
      [MIN_GRAFANA_VERSION]: "Username input field"
    },
    password: {
      "10.2.3": "data-testid Password input field",
      [MIN_GRAFANA_VERSION]: "Password input field"
    },
    submit: {
      "10.2.3": "data-testid Login button",
      [MIN_GRAFANA_VERSION]: "Login button"
    },
    skip: {
      "10.2.3": "data-testid Skip change password button"
    }
  },
  PasswordlessLogin: {
    url: {
      [MIN_GRAFANA_VERSION]: "/login/passwordless/authenticate"
    },
    email: {
      "10.2.3": "data-testid Email input field",
      [MIN_GRAFANA_VERSION]: "Email input field"
    },
    submit: {
      "10.2.3": "data-testid PasswordlessLogin button",
      [MIN_GRAFANA_VERSION]: "PasswordlessLogin button"
    }
  },
  Home: {
    url: {
      [MIN_GRAFANA_VERSION]: "/"
    }
  },
  DataSource: {
    name: {
      "10.3.0": "data-testid Data source settings page name input field",
      [MIN_GRAFANA_VERSION]: "Data source settings page name input field"
    },
    delete: {
      [MIN_GRAFANA_VERSION]: "Data source settings page Delete button"
    },
    readOnly: {
      "10.3.0": "data-testid Data source settings page read only message",
      [MIN_GRAFANA_VERSION]: "Data source settings page read only message"
    },
    saveAndTest: {
      "10.0.0": "data-testid Data source settings page Save and Test button",
      [MIN_GRAFANA_VERSION]: "Data source settings page Save and Test button"
    },
    alert: {
      "10.3.0": "data-testid Data source settings page Alert",
      [MIN_GRAFANA_VERSION]: "Data source settings page Alert"
    }
  },
  DataSources: {
    url: {
      [MIN_GRAFANA_VERSION]: "/datasources"
    },
    dataSources: {
      [MIN_GRAFANA_VERSION]: (dataSourceName) => `Data source list item ${dataSourceName}`
    }
  },
  EditDataSource: {
    url: {
      "9.5.0": (dataSourceUid) => `/datasources/edit/${dataSourceUid}`
    },
    settings: {
      "9.5.0": "Datasource settings page basic settings"
    }
  },
  AddDataSource: {
    url: {
      [MIN_GRAFANA_VERSION]: "/datasources/new"
    },
    dataSourcePluginsV2: {
      "9.3.1": (pluginName) => `Add new data source ${pluginName}`,
      [MIN_GRAFANA_VERSION]: (pluginName) => `Data source plugin item ${pluginName}`
    }
  },
  ConfirmModal: {
    delete: {
      "10.0.0": "data-testid Confirm Modal Danger Button",
      [MIN_GRAFANA_VERSION]: "Confirm Modal Danger Button"
    }
  },
  AddDashboard: {
    url: {
      [MIN_GRAFANA_VERSION]: "/dashboard/new"
    },
    itemButton: {
      "9.5.0": (title) => `data-testid ${title}`
    },
    addNewPanel: {
      "11.1.0": "data-testid Add new panel",
      "8.0.0": "Add new panel",
      [MIN_GRAFANA_VERSION]: "Add new panel"
    },
    itemButtonAddViz: {
      [MIN_GRAFANA_VERSION]: "Add new visualization menu item"
    },
    addNewRow: {
      "11.1.0": "data-testid Add new row",
      [MIN_GRAFANA_VERSION]: "Add new row"
    },
    addNewPanelLibrary: {
      "11.1.0": "data-testid Add new panel from panel library",
      [MIN_GRAFANA_VERSION]: "Add new panel from panel library"
    },
    Settings: {
      Annotations: {
        List: {
          url: {
            [MIN_GRAFANA_VERSION]: "/dashboard/new?orgId=1&editview=annotations"
          }
        },
        Edit: {
          url: {
            [MIN_GRAFANA_VERSION]: (annotationIndex) => `/dashboard/new?editview=annotations&editIndex=${annotationIndex}`
          }
        }
      },
      Variables: {
        List: {
          url: {
            "11.3.0": "/dashboard/new?orgId=1&editview=variables",
            [MIN_GRAFANA_VERSION]: "/dashboard/new?orgId=1&editview=templating"
          }
        },
        Edit: {
          url: {
            "11.3.0": (editIndex) => `/dashboard/new?orgId=1&editview=variables&editIndex=${editIndex}`,
            [MIN_GRAFANA_VERSION]: (editIndex) => `/dashboard/new?orgId=1&editview=templating&editIndex=${editIndex}`
          }
        }
      }
    }
  },
  Dashboard: {
    url: {
      [MIN_GRAFANA_VERSION]: (uid) => `/d/${uid}`
    },
    DashNav: {
      nav: {
        [MIN_GRAFANA_VERSION]: "Dashboard navigation"
      },
      navV2: {
        [MIN_GRAFANA_VERSION]: "data-testid Dashboard navigation"
      },
      publicDashboardTag: {
        "9.1.0": "data-testid public dashboard tag"
      },
      shareButton: {
        "10.4.0": "data-testid share-button"
      },
      scrollContainer: {
        "11.1.0": "data-testid Dashboard canvas scroll container"
      },
      newShareButton: {
        container: {
          "11.1.0": "data-testid new share button"
        },
        shareLink: {
          "11.1.0": "data-testid new share link-button"
        },
        arrowMenu: {
          "11.1.0": "data-testid new share button arrow menu"
        },
        menu: {
          container: {
            "11.1.0": "data-testid new share button menu"
          },
          shareInternally: {
            "11.1.0": "data-testid new share button share internally"
          },
          shareExternally: {
            "11.1.1": "data-testid new share button share externally"
          },
          shareSnapshot: {
            "11.2.0": "data-testid new share button share snapshot"
          }
        }
      },
      NewExportButton: {
        container: {
          "11.2.0": "data-testid new export button"
        },
        arrowMenu: {
          "11.2.0": "data-testid new export button arrow menu"
        },
        Menu: {
          container: {
            "11.2.0": "data-testid new export button menu"
          },
          exportAsJson: {
            "11.2.0": "data-testid new export button export as json"
          }
        }
      },
      playlistControls: {
        prev: {
          "11.0.0": "data-testid playlist previous dashboard button"
        },
        stop: {
          "11.0.0": "data-testid playlist stop dashboard button"
        },
        next: {
          "11.0.0": "data-testid playlist next dashboard button"
        }
      }
    },
    Controls: {
      "11.1.0": "data-testid dashboard controls"
    },
    SubMenu: {
      submenu: {
        [MIN_GRAFANA_VERSION]: "Dashboard submenu"
      },
      submenuItem: {
        [MIN_GRAFANA_VERSION]: "data-testid template variable"
      },
      submenuItemLabels: {
        [MIN_GRAFANA_VERSION]: (item) => `data-testid Dashboard template variables submenu Label ${item}`
      },
      submenuItemValueDropDownValueLinkTexts: {
        [MIN_GRAFANA_VERSION]: (item) => `data-testid Dashboard template variables Variable Value DropDown value link text ${item}`
      },
      submenuItemValueDropDownDropDown: {
        [MIN_GRAFANA_VERSION]: "Variable options"
      },
      submenuItemValueDropDownOptionTexts: {
        [MIN_GRAFANA_VERSION]: (item) => `data-testid Dashboard template variables Variable Value DropDown option text ${item}`
      },
      Annotations: {
        annotationsWrapper: {
          "10.0.0": "data-testid annotation-wrapper"
        },
        annotationLabel: {
          "10.0.0": (label) => `data-testid Dashboard annotations submenu Label ${label}`
        },
        annotationToggle: {
          "10.0.0": (label) => `data-testid Dashboard annotations submenu Toggle ${label}`
        }
      }
    },
    Settings: {
      Actions: {
        close: {
          "9.5.0": "data-testid dashboard-settings-close"
        }
      },
      General: {
        deleteDashBoard: {
          "11.1.0": "data-testid Dashboard settings page delete dashboard button"
        },
        sectionItems: {
          [MIN_GRAFANA_VERSION]: (item) => `Dashboard settings section item ${item}`
        },
        saveDashBoard: {
          [MIN_GRAFANA_VERSION]: "Dashboard settings aside actions Save button"
        },
        saveAsDashBoard: {
          [MIN_GRAFANA_VERSION]: "Dashboard settings aside actions Save As button"
        },
        title: {
          "11.2.0": "General"
        }
      },
      Annotations: {
        Edit: {
          urlParams: {
            [MIN_GRAFANA_VERSION]: (annotationIndex) => `editview=annotations&editIndex=${annotationIndex}`
          }
        },
        List: {
          url: {
            [MIN_GRAFANA_VERSION]: (dashboardUid) => `/d/${dashboardUid}?editview=annotations`
          },
          addAnnotationCTAV2: {
            [MIN_GRAFANA_VERSION]: "data-testid Call to action button Add annotation query"
          },
          annotations: {
            "10.4.0": "data-testid list-annotations"
          }
        },
        Settings: {
          name: {
            "11.1.0": "data-testid Annotations settings name input",
            [MIN_GRAFANA_VERSION]: "Annotations settings name input"
          }
        },
        NewAnnotation: {
          panelFilterSelect: {
            "10.0.0": "data-testid annotations-panel-filter"
          },
          showInLabel: {
            "11.1.0": "data-testid show-in-label"
          },
          previewInDashboard: {
            "10.0.0": "data-testid annotations-preview"
          },
          delete: {
            "10.4.0": "data-testid annotations-delete"
          },
          apply: {
            "10.4.0": "data-testid annotations-apply"
          },
          enable: {
            "10.4.0": "data-testid annotation-enable"
          },
          hide: {
            "10.4.0": "data-testid annotation-hide"
          }
        }
      },
      Variables: {
        List: {
          url: {
            "11.3.0": (dashboardUid) => `/d/${dashboardUid}?editview=variables`,
            [MIN_GRAFANA_VERSION]: (dashboardUid) => `/d/${dashboardUid}?editview=templating`
          },
          addVariableCTAV2: {
            [MIN_GRAFANA_VERSION]: "data-testid Call to action button Add variable"
          },
          newButton: {
            [MIN_GRAFANA_VERSION]: "Variable editor New variable button"
          },
          table: {
            [MIN_GRAFANA_VERSION]: "Variable editor Table"
          },
          tableRowNameFields: {
            [MIN_GRAFANA_VERSION]: (variableName) => `Variable editor Table Name field ${variableName}`
          },
          tableRowDefinitionFields: {
            "10.1.0": (variableName) => `Variable editor Table Definition field ${variableName}`
          },
          tableRowArrowUpButtons: {
            [MIN_GRAFANA_VERSION]: (variableName) => `Variable editor Table ArrowUp button ${variableName}`
          },
          tableRowArrowDownButtons: {
            [MIN_GRAFANA_VERSION]: (variableName) => `Variable editor Table ArrowDown button ${variableName}`
          },
          tableRowDuplicateButtons: {
            [MIN_GRAFANA_VERSION]: (variableName) => `Variable editor Table Duplicate button ${variableName}`
          },
          tableRowRemoveButtons: {
            [MIN_GRAFANA_VERSION]: (variableName) => `Variable editor Table Remove button ${variableName}`
          }
        },
        Edit: {
          urlParams: {
            "11.3.0": (editIndex) => `editview=variables&editIndex=${editIndex}`,
            [MIN_GRAFANA_VERSION]: (editIndex) => `editview=templating&editIndex=${editIndex}`
          },
          General: {
            headerLink: {
              [MIN_GRAFANA_VERSION]: "Variable editor Header link"
            },
            modeLabelNew: {
              [MIN_GRAFANA_VERSION]: "Variable editor Header mode New"
            },
            /**
             * @deprecated
             */
            modeLabelEdit: {
              [MIN_GRAFANA_VERSION]: "Variable editor Header mode Edit"
            },
            generalNameInput: {
              [MIN_GRAFANA_VERSION]: "Variable editor Form Name field"
            },
            generalNameInputV2: {
              [MIN_GRAFANA_VERSION]: "data-testid Variable editor Form Name field"
            },
            generalTypeSelect: {
              [MIN_GRAFANA_VERSION]: "Variable editor Form Type select"
            },
            generalTypeSelectV2: {
              [MIN_GRAFANA_VERSION]: "data-testid Variable editor Form Type select"
            },
            generalLabelInput: {
              [MIN_GRAFANA_VERSION]: "Variable editor Form Label field"
            },
            generalLabelInputV2: {
              [MIN_GRAFANA_VERSION]: "data-testid Variable editor Form Label field"
            },
            generalHideSelect: {
              [MIN_GRAFANA_VERSION]: "Variable editor Form Hide select"
            },
            generalHideSelectV2: {
              [MIN_GRAFANA_VERSION]: "data-testid Variable editor Form Hide select"
            },
            selectionOptionsAllowCustomValueSwitch: {
              [MIN_GRAFANA_VERSION]: "data-testid Variable editor Form Allow Custom Value switch"
            },
            selectionOptionsMultiSwitch: {
              "10.4.0": "data-testid Variable editor Form Multi switch",
              [MIN_GRAFANA_VERSION]: "Variable editor Form Multi switch"
            },
            selectionOptionsIncludeAllSwitch: {
              "10.4.0": "data-testid Variable editor Form IncludeAll switch",
              [MIN_GRAFANA_VERSION]: "Variable editor Form IncludeAll switch"
            },
            selectionOptionsCustomAllInput: {
              "10.4.0": "data-testid Variable editor Form IncludeAll field",
              [MIN_GRAFANA_VERSION]: "Variable editor Form IncludeAll field"
            },
            previewOfValuesOption: {
              "10.4.0": "data-testid Variable editor Preview of Values option",
              [MIN_GRAFANA_VERSION]: "Variable editor Preview of Values option"
            },
            submitButton: {
              "10.4.0": "data-testid Variable editor Run Query button",
              [MIN_GRAFANA_VERSION]: "Variable editor Submit button"
            },
            applyButton: {
              "9.3.0": "data-testid Variable editor Apply button"
            }
          },
          QueryVariable: {
            queryOptionsDataSourceSelect: {
              "10.4.0": "data-testid Select a data source",
              "10.0.0": "data-testid Data source picker select container",
              [MIN_GRAFANA_VERSION]: "Data source picker select container"
            },
            queryOptionsRefreshSelect: {
              [MIN_GRAFANA_VERSION]: "Variable editor Form Query Refresh select"
            },
            queryOptionsRefreshSelectV2: {
              [MIN_GRAFANA_VERSION]: "data-testid Variable editor Form Query Refresh select"
            },
            queryOptionsRegExInput: {
              [MIN_GRAFANA_VERSION]: "Variable editor Form Query RegEx field"
            },
            queryOptionsRegExInputV2: {
              [MIN_GRAFANA_VERSION]: "data-testid Variable editor Form Query RegEx field"
            },
            queryOptionsSortSelect: {
              [MIN_GRAFANA_VERSION]: "Variable editor Form Query Sort select"
            },
            queryOptionsSortSelectV2: {
              [MIN_GRAFANA_VERSION]: "data-testid Variable editor Form Query Sort select"
            },
            queryOptionsQueryInput: {
              "10.4.0": "data-testid Variable editor Form Default Variable Query Editor textarea"
            },
            valueGroupsTagsEnabledSwitch: {
              [MIN_GRAFANA_VERSION]: "Variable editor Form Query UseTags switch"
            },
            valueGroupsTagsTagsQueryInput: {
              [MIN_GRAFANA_VERSION]: "Variable editor Form Query TagsQuery field"
            },
            valueGroupsTagsTagsValuesQueryInput: {
              [MIN_GRAFANA_VERSION]: "Variable editor Form Query TagsValuesQuery field"
            }
          },
          ConstantVariable: {
            constantOptionsQueryInput: {
              [MIN_GRAFANA_VERSION]: "Variable editor Form Constant Query field"
            },
            constantOptionsQueryInputV2: {
              [MIN_GRAFANA_VERSION]: "data-testid Variable editor Form Constant Query field"
            }
          },
          DatasourceVariable: {
            datasourceSelect: {
              [MIN_GRAFANA_VERSION]: "data-testid datasource variable datasource type"
            }
          },
          TextBoxVariable: {
            textBoxOptionsQueryInput: {
              [MIN_GRAFANA_VERSION]: "Variable editor Form TextBox Query field"
            },
            textBoxOptionsQueryInputV2: {
              [MIN_GRAFANA_VERSION]: "data-testid Variable editor Form TextBox Query field"
            }
          },
          CustomVariable: {
            customValueInput: {
              [MIN_GRAFANA_VERSION]: "data-testid custom-variable-input"
            }
          },
          IntervalVariable: {
            intervalsValueInput: {
              [MIN_GRAFANA_VERSION]: "data-testid interval variable intervals input"
            },
            autoEnabledCheckbox: {
              "10.4.0": "data-testid interval variable auto value checkbox"
            },
            stepCountIntervalSelect: {
              "10.4.0": "data-testid interval variable step count input"
            },
            minIntervalInput: {
              "10.4.0": "data-testid interval variable mininum interval input"
            }
          },
          GroupByVariable: {
            dataSourceSelect: {
              "10.4.0": "data-testid Select a data source"
            },
            infoText: {
              "10.4.0": "data-testid group by variable info text"
            },
            modeToggle: {
              "10.4.0": "data-testid group by variable mode toggle"
            }
          },
          AdHocFiltersVariable: {
            datasourceSelect: {
              "10.4.0": "data-testid Select a data source"
            },
            infoText: {
              "10.4.0": "data-testid ad-hoc filters variable info text"
            },
            modeToggle: {
              "11.0.0": "data-testid ad-hoc filters variable mode toggle"
            }
          }
        }
      }
    },
    Annotations: {
      marker: {
        "10.0.0": "data-testid annotation-marker"
      }
    },
    Rows: {
      Repeated: {
        ConfigSection: {
          warningMessage: {
            "10.2.0": "data-testid Repeated rows warning message"
          }
        }
      }
    }
  },
  Dashboards: {
    url: {
      [MIN_GRAFANA_VERSION]: "/dashboards"
    },
    dashboards: {
      "10.2.0": (title) => `Dashboard search item ${title}`
    },
    toggleView: {
      [MIN_GRAFANA_VERSION]: "data-testid radio-button"
    }
  },
  SaveDashboardAsModal: {
    newName: {
      "10.2.0": "Save dashboard title field"
    },
    save: {
      "10.2.0": "Save dashboard button"
    }
  },
  SaveDashboardModal: {
    save: {
      "10.2.0": "Dashboard settings Save Dashboard Modal Save button"
    },
    saveVariables: {
      "10.2.0": "Dashboard settings Save Dashboard Modal Save variables checkbox"
    },
    saveTimerange: {
      "10.2.0": "Dashboard settings Save Dashboard Modal Save timerange checkbox"
    },
    saveRefresh: {
      "11.1.0": "Dashboard settings Save Dashboard Modal Save refresh checkbox"
    }
  },
  SharePanelModal: {
    linkToRenderedImage: {
      [MIN_GRAFANA_VERSION]: "Link to rendered image"
    }
  },
  ShareDashboardModal: {
    PublicDashboard: {
      WillBePublicCheckbox: {
        "9.1.0": "data-testid public dashboard will be public checkbox"
      },
      LimitedDSCheckbox: {
        "9.1.0": "data-testid public dashboard limited datasources checkbox"
      },
      CostIncreaseCheckbox: {
        "9.1.0": "data-testid public dashboard cost may increase checkbox"
      },
      PauseSwitch: {
        "9.5.0": "data-testid public dashboard pause switch"
      },
      EnableAnnotationsSwitch: {
        "9.3.0": "data-testid public dashboard on off switch for annotations"
      },
      CreateButton: {
        "9.5.0": "data-testid public dashboard create button"
      },
      DeleteButton: {
        "9.3.0": "data-testid public dashboard delete button"
      },
      CopyUrlInput: {
        "9.1.0": "data-testid public dashboard copy url input"
      },
      CopyUrlButton: {
        "9.1.0": "data-testid public dashboard copy url button"
      },
      SettingsDropdown: {
        "10.1.0": "data-testid public dashboard settings dropdown"
      },
      TemplateVariablesWarningAlert: {
        "9.1.0": "data-testid public dashboard disabled template variables alert"
      },
      UnsupportedDataSourcesWarningAlert: {
        "9.5.0": "data-testid public dashboard unsupported data sources alert"
      },
      NoUpsertPermissionsWarningAlert: {
        "9.5.0": "data-testid public dashboard no upsert permissions alert"
      },
      EnableTimeRangeSwitch: {
        "9.4.0": "data-testid public dashboard on off switch for time range"
      },
      EmailSharingConfiguration: {
        Container: {
          "9.5.0": "data-testid email sharing config container"
        },
        ShareType: {
          "9.5.0": "data-testid public dashboard share type"
        },
        EmailSharingInput: {
          "9.5.0": "data-testid public dashboard email sharing input"
        },
        EmailSharingInviteButton: {
          "9.5.0": "data-testid public dashboard email sharing invite button"
        },
        EmailSharingList: {
          "9.5.0": "data-testid public dashboard email sharing list"
        },
        DeleteEmail: {
          "9.5.0": "data-testid public dashboard delete email button"
        },
        ReshareLink: {
          "9.5.0": "data-testid public dashboard reshare link button"
        }
      }
    },
    SnapshotScene: {
      url: {
        "11.1.0": (key) => `/dashboard/snapshot/${key}`
      },
      PublishSnapshot: {
        "11.1.0": "data-testid publish snapshot button"
      },
      CopyUrlButton: {
        "11.1.0": "data-testid snapshot copy url button"
      },
      CopyUrlInput: {
        "11.1.0": "data-testid snapshot copy url input"
      }
    }
  },
  ShareDashboardDrawer: {
    ShareInternally: {
      container: {
        "11.3.0": "data-testid share internally drawer container"
      },
      lockTimeRangeSwitch: {
        "11.3.0": "data-testid share internally lock time range switch"
      },
      shortenUrlSwitch: {
        "11.3.0": "data-testid share internally shorten url switch"
      },
      copyUrlButton: {
        "11.3.0": "data-testid share internally copy url button"
      },
      SharePanel: {
        preview: {
          "11.5.0": "data-testid share panel internally image generation preview"
        },
        widthInput: {
          "11.5.0": "data-testid share panel internally width input"
        },
        heightInput: {
          "11.5.0": "data-testid share panel internally height input"
        },
        scaleFactorInput: {
          "11.5.0": "data-testid share panel internally scale factor input"
        },
        generateImageButton: {
          "11.5.0": "data-testid share panel internally generate image button"
        },
        downloadImageButton: {
          "11.5.0": "data-testid share panel internally download image button"
        }
      }
    },
    ShareExternally: {
      container: {
        "11.3.0": "data-testid share externally drawer container"
      },
      publicAlert: {
        "11.3.0": "data-testid public share alert"
      },
      emailSharingAlert: {
        "11.3.0": "data-testid email share alert"
      },
      shareTypeSelect: {
        "11.3.0": "data-testid share externally share type select"
      },
      Creation: {
        PublicShare: {
          createButton: {
            "11.3.0": "data-testid public share dashboard create button"
          },
          cancelButton: {
            "11.3.0": "data-testid public share dashboard cancel button"
          }
        },
        EmailShare: {
          createButton: {
            "11.3.0": "data-testid email share dashboard create button"
          },
          cancelButton: {
            "11.3.0": "data-testid email share dashboard cancel button"
          }
        },
        willBePublicCheckbox: {
          "11.3.0": "data-testid share dashboard will be public checkbox"
        }
      },
      Configuration: {
        enableTimeRangeSwitch: {
          "11.3.0": "data-testid share externally enable time range switch"
        },
        enableAnnotationsSwitch: {
          "11.3.0": "data-testid share externally enable annotations switch"
        },
        copyUrlButton: {
          "11.3.0": "data-testid share externally copy url button"
        },
        revokeAccessButton: {
          "11.3.0": "data-testid share externally revoke access button"
        },
        toggleAccessButton: {
          "11.3.0": "data-testid share externally pause or resume access button"
        }
      }
    },
    ShareSnapshot: {
      url: {
        "11.3.0": (key) => `/dashboard/snapshot/${key}`
      },
      container: {
        "11.3.0": "data-testid share snapshot drawer container"
      },
      publishSnapshot: {
        "11.3.0": "data-testid share snapshot publish button"
      },
      copyUrlButton: {
        "11.3.0": "data-testid share snapshot copy url button"
      }
    }
  },
  ExportDashboardDrawer: {
    ExportAsJson: {
      container: {
        "11.3.0": "data-testid export as json drawer container"
      },
      codeEditor: {
        "11.3.0": "data-testid export as json code editor"
      },
      exportExternallyToggle: {
        "11.3.0": "data-testid export as json externally switch"
      },
      saveToFileButton: {
        "11.3.0": "data-testid export as json save to file button"
      },
      copyToClipboardButton: {
        "11.3.0": "data-testid export as json copy to clipboard button"
      },
      cancelButton: {
        "11.3.0": "data-testid export as json cancel button"
      }
    }
  },
  PublicDashboard: {
    page: {
      "9.5.0": "public-dashboard-page"
    },
    NotAvailable: {
      container: {
        "9.5.0": "public-dashboard-not-available"
      },
      title: {
        "9.5.0": "public-dashboard-title"
      },
      pausedDescription: {
        "9.5.0": "public-dashboard-paused-description"
      }
    },
    footer: {
      "11.0.0": "public-dashboard-footer"
    }
  },
  PublicDashboardScene: {
    loadingPage: {
      "11.0.0": "public-dashboard-scene-loading-page"
    },
    page: {
      "11.0.0": "public-dashboard-scene-page"
    },
    controls: {
      "11.0.0": "public-dashboard-controls"
    }
  },
  RequestViewAccess: {
    form: {
      "9.5.0": "request-view-access-form"
    },
    recipientInput: {
      "9.5.0": "request-view-access-recipient-input"
    },
    submitButton: {
      "9.5.0": "request-view-access-submit-button"
    }
  },
  PublicDashboardConfirmAccess: {
    submitButton: {
      "10.2.0": "data-testid confirm-access-submit-button"
    }
  },
  Explore: {
    url: {
      [MIN_GRAFANA_VERSION]: "/explore"
    },
    General: {
      container: {
        [MIN_GRAFANA_VERSION]: "data-testid Explore"
      },
      graph: {
        [MIN_GRAFANA_VERSION]: "Explore Graph"
      },
      table: {
        [MIN_GRAFANA_VERSION]: "Explore Table"
      },
      scrollView: {
        "9.0.0": "data-testid explorer scroll view"
      },
      addFromQueryLibrary: {
        "11.5.0": "data-testid explore add from query library button"
      }
    },
    QueryHistory: {
      container: {
        "11.1.0": "data-testid QueryHistory"
      }
    }
  },
  SoloPanel: {
    url: {
      [MIN_GRAFANA_VERSION]: (page) => `/d-solo/${page}`
    }
  },
  PluginsList: {
    page: {
      [MIN_GRAFANA_VERSION]: "Plugins list page"
    },
    list: {
      [MIN_GRAFANA_VERSION]: "Plugins list"
    },
    listItem: {
      [MIN_GRAFANA_VERSION]: "Plugins list item"
    },
    signatureErrorNotice: {
      "10.3.0": "data-testid Unsigned plugins notice",
      [MIN_GRAFANA_VERSION]: "Unsigned plugins notice"
    }
  },
  PluginPage: {
    page: {
      [MIN_GRAFANA_VERSION]: "Plugin page"
    },
    signatureInfo: {
      "10.3.0": "data-testid Plugin signature info",
      [MIN_GRAFANA_VERSION]: "Plugin signature info"
    },
    disabledInfo: {
      "10.3.0": "data-testid Plugin disabled info",
      [MIN_GRAFANA_VERSION]: "Plugin disabled info"
    }
  },
  PlaylistForm: {
    name: {
      [MIN_GRAFANA_VERSION]: "Playlist name"
    },
    interval: {
      [MIN_GRAFANA_VERSION]: "Playlist interval"
    },
    itemDelete: {
      "10.2.0": "data-testid playlist-form-delete-item"
    }
  },
  BrowseDashboards: {
    table: {
      body: {
        "10.2.0": "data-testid browse-dashboards-table"
      },
      row: {
        "10.2.0": (name) => `data-testid browse dashboards row ${name}`
      },
      checkbox: {
        "10.0.0": (uid) => `data-testid ${uid} checkbox`
      }
    },
    NewFolderForm: {
      form: {
        "10.2.0": "data-testid new folder form"
      },
      nameInput: {
        "10.2.0": "data-testid new-folder-name-input"
      },
      createButton: {
        "10.2.0": "data-testid new-folder-create-button"
      }
    }
  },
  SearchDashboards: {
    table: {
      "10.2.0": "Search results table"
    }
  },
  Search: {
    url: {
      "9.3.0": "/?search=openn"
    },
    FolderView: {
      url: {
        "9.3.0": "/?search=open&layout=folders"
      }
    }
  },
  PublicDashboards: {
    ListItem: {
      linkButton: {
        "9.3.0": "public-dashboard-link-button"
      },
      configButton: {
        "9.3.0": "public-dashboard-configuration-button"
      },
      trashcanButton: {
        "9.3.0": "public-dashboard-remove-button"
      },
      pauseSwitch: {
        "10.1.0": "data-testid public dashboard pause switch"
      }
    }
  },
  UserListPage: {
    tabs: {
      allUsers: {
        "10.0.0": "data-testid all-users-tab"
      },
      orgUsers: {
        "10.0.0": "data-testid org-users-tab"
      },
      anonUserDevices: {
        "10.2.3": "data-testid anon-user-devices-tab"
      },
      publicDashboardsUsers: {
        "10.0.0": "data-testid public-dashboards-users-tab"
      },
      users: {
        "10.0.0": "data-testid users-tab"
      }
    },
    org: {
      url: {
        "10.2.0": "/admin/users",
        "9.5.0": "/org/users"
      }
    },
    admin: {
      url: {
        "9.5.0": "/admin/users"
      }
    },
    publicDashboards: {
      container: {
        "11.1.0": "data-testid public-dashboards-users-list"
      }
    },
    UserListAdminPage: {
      container: {
        "10.0.0": "data-testid user-list-admin-page"
      }
    },
    UsersListPage: {
      container: {
        "10.0.0": "data-testid users-list-page"
      }
    },
    UserAnonListPage: {
      container: {
        "10.4.0": "data-testid user-anon-list-page"
      }
    },
    UsersListPublicDashboardsPage: {
      container: {
        "10.0.0": "data-testid users-list-public-dashboards-page"
      },
      DashboardsListModal: {
        listItem: {
          "10.0.0": (uid) => `data-testid dashboards-list-item-${uid}`
        }
      }
    }
  },
  ProfilePage: {
    url: {
      "10.2.0": "/profile"
    }
  },
  Plugin: {
    url: {
      [MIN_GRAFANA_VERSION]: (pluginId) => `/plugins/${pluginId}`
    }
  },
  MigrateToCloud: {
    url: {
      "11.2.0": "/admin/migrate-to-cloud"
    }
  }
};

const Pages = resolveSelectors(versionedPages);
const Components = resolveSelectors(versionedComponents);
const selectors = { pages: Pages, components: Components };

exports.Components = Components;
exports.Pages = Pages;
exports.resolveSelectors = resolveSelectors;
exports.selectors = selectors;
exports.versionedComponents = versionedComponents;
exports.versionedPages = versionedPages;
//# sourceMappingURL=index.cjs.map
